var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.481,1,2.674]],["body/controllers/AppController.html",[0,2.5,1,4.513,2,0.017,3,0.235,4,0.235,5,4.535,6,6.2,7,6.403,8,5.257,9,2.081,10,0.286,11,5.257,12,0.673,13,4.184,14,4.535,15,0.235,16,0.128,17,1.958,18,1.37,19,1.496,20,5.257]],["title/modules/AppModule.html",[21,1.08,22,2.674]],["body/modules/AppModule.html",[1,3.949,2,0.017,3,0.154,4,0.154,10,0.34,12,0.44,13,4.032,14,2.964,15,0.154,16,0.084,21,1.595,22,5.456,23,1.555,24,1.639,25,1.639,26,1.478,27,2.309,28,1.639,29,2.964,30,2.964,31,2.964,32,4.331,33,4.331,34,4.619,35,4.331,36,4.331,37,4.331,38,4.331,39,3.354,40,3.435,41,2.964,42,4.176,43,5.249,44,3.435,45,2.964,46,1.834,47,2.421,48,3.435,49,3.435,50,4.84,51,2.653,52,4.84,53,3.435,54,4.176,55,3.435,56,2.653,57,3.435,58,3.435,59,3.435,60,4.84,61,2.964,62,4.84,63,2.964,64,3.435,65,3.435,66,2.653,67,2.421,68,3.435,69,3.435,70,3.435,71,3.435,72,1.95,73,3.435,74,3.435,75,1.222,76,3.435,77,2.082,78,1.341,79,3.435,80,3.435]],["title/injectables/AppService.html",[13,2.299,81,0.628]],["body/injectables/AppService.html",[2,0.018,3,0.223,4,0.223,6,6.093,9,2.018,10,0.302,12,0.64,13,3.763,15,0.223,16,0.122,17,1.863,18,1.303,19,1.423,61,4.314,81,1.027,82,1.779,83,4.314,84,3.862,85,3.731,86,5,87,5,88,3.524,89,3.524,90,1.625,91,5,92,5,93,5]],["title/controllers/AuthController.html",[0,1.481,94,2.674]],["body/controllers/AuthController.html",[0,1.188,2,0.018,3,0.136,4,0.136,10,0.308,12,0.39,15,0.136,16,0.074,17,1.134,18,0.793,19,1.49,75,2.524,94,3.128,95,2.626,96,2.626,97,3.829,98,3.829,99,3.428,100,3.044,101,4.937,102,4.4,103,3.044,104,4.158,105,3.626,106,3.22,107,3.048,108,4.293,109,3.048,110,3.044,111,2.626,112,4.438,113,3.044,114,5.002,115,2.626,116,3.044,117,3.044,118,4.438,119,3.044,120,4.045,121,1.728,122,3.044,123,2.477,124,3.044,125,3.044,126,3.044,127,3.044,128,2.64,129,2.145,130,3.044,131,2.37,132,1.981,133,2.689,134,2.145,135,3.747,136,2.351,137,2.889,138,1.534,139,2.351,140,3.691,141,3.747,142,0.946,143,1.247,144,3.174,145,2.626,146,2.626,147,3.044,148,3.044,149,2.889,150,4.438,151,4.438,152,3.691,153,4.438,154,3.174,155,3.044,156,5.238,157,3.044,158,3.044,159,3.044,160,3.044,161,3.044,162,3.044,163,2.626,164,3.044,165,3.044,166,3.044]],["title/modules/AuthModule.html",[21,1.08,32,2.47]],["body/modules/AuthModule.html",[2,0.017,3,0.216,4,0.216,10,0.328,12,0.62,15,0.216,16,0.118,21,1.894,23,2.192,24,2.311,25,2.311,26,2.084,27,2.904,28,2.311,32,4.906,72,2.748,77,2.935,94,4.691,144,4.449,145,4.178,167,4.178,168,4.178,169,3.92,170,4.843,171,2.935,172,1.804,173,1.722,174,2.748,175,4.178,176,4.843,177,4.178]],["title/injectables/AuthService.html",[81,0.628,144,2.299]],["body/injectables/AuthService.html",[2,0.018,3,0.13,4,0.13,10,0.31,12,0.372,15,0.13,16,0.071,18,1.329,19,1.22,46,1.551,75,1.525,81,0.709,82,1.033,90,2.283,97,3.7,98,3.7,101,4.883,102,3.908,114,4.581,115,3.7,123,2.422,128,1.464,143,1.19,144,2.599,146,2.506,149,3.664,169,3.47,172,1.082,173,1.813,174,1.649,175,2.506,178,2.506,179,3.355,180,4.853,181,2.506,182,3.005,183,3.689,184,2.905,185,3.312,186,4.288,187,2.905,188,2.161,189,2.905,190,4.288,191,2.905,192,1.551,193,2.047,194,2.244,195,1.649,196,1.19,197,1.464,198,2.506,199,1.76,200,1.891,201,1.19,202,1.315,203,2.244,204,2.569,205,2.893,206,2.244,207,1.25,208,5.098,209,2.905,210,4.288,211,2.29,212,4.288,213,2.905,214,2.506,215,2.837,216,2.506,217,3.005,218,2.422,219,2.599,220,2.506,221,4.288,222,4.288,223,4.288,224,4.288,225,4.288,226,4.288,227,1.674,228,4.288,229,5.629,230,3.7,231,2.244,232,2.047,233,2.905,234,2.905,235,2.905,236,2.905,237,2.244,238,2.244,239,4.288,240,2.905,241,2.244,242,2.047]],["title/injectables/BearerParserMiddleware.html",[47,2.674,81,0.628]],["body/injectables/BearerParserMiddleware.html",[2,0.018,3,0.166,4,0.166,10,0.305,12,0.475,15,0.166,16,0.09,17,1.383,18,0.968,46,1.982,47,3.6,51,2.867,78,1.449,81,0.845,82,1.32,84,2.867,85,3.436,88,2.616,90,2.312,123,2.707,128,1.871,143,1.52,149,3.325,192,1.982,194,2.867,196,1.52,197,1.871,215,3.171,217,3.359,218,2.707,219,2.249,220,3.202,231,2.867,232,2.616,237,4.511,238,2.867,243,5.039,244,3.202,245,3.945,246,3.712,247,3.945,248,5.039,249,3.812,250,6.291,251,3.712,252,3.325,253,3.945,254,5.039,255,2.867,256,5.108,257,3.712,258,3.202,259,3.202,260,3.202,261,3.712,262,5.108,263,3.712,264,3.712,265,2.867,266,3.712,267,3.712,268,5.84,269,3.712,270,3.712,271,3.712,272,3.712,273,3.712,274,3.712,275,3.712,276,3.712,277,3.712]],["title/guards/CheckOwnerGuard.html",[278,2.674,279,2.47]],["body/guards/CheckOwnerGuard.html",[2,0.018,3,0.18,4,0.18,10,0.312,12,0.517,15,0.18,16,0.098,18,1.052,19,1.149,75,1.436,78,1.576,81,0.894,90,2.32,123,2.327,143,1.654,172,1.504,179,3.256,182,3.478,192,2.155,193,2.845,195,2.291,196,1.654,197,2.035,201,1.654,202,1.827,204,2.035,205,2.291,207,2.327,215,3.073,217,3.256,218,2.624,219,3.277,241,3.118,242,2.845,279,3.52,280,5.261,281,3.483,282,5.619,283,3.483,284,4.037,285,4.665,286,4.665,287,5.031,288,4.037,289,2.845,290,4.665,291,2.271,292,2.291,293,3.118,294,3.118,295,4.037,296,2.726,297,4.037,298,4.037,299,4.037,300,3.483,301,1.436,302,4.037,303,4.037]],["title/modules/CommonModule.html",[21,1.08,33,2.47]],["body/modules/CommonModule.html",[2,0.017,3,0.229,4,0.229,10,0.282,12,0.656,15,0.229,16,0.125,21,1.943,23,2.32,24,2.445,25,2.445,26,2.205,27,3.008,28,3.008,33,4.91,85,3.931,304,4.422,305,4.422,306,4.422,307,5.125,308,4.869,309,5.125]],["title/interfaces/CommonResponseFormat.html",[310,2.47,311,2.47]],["body/interfaces/CommonResponseFormat.html",[2,0.017,3,0.164,4,0.164,9,2.526,10,0.227,12,0.47,15,0.227,16,0.124,78,1.981,105,3.857,106,3.675,107,3.479,109,3.479,121,3.731,138,3.578,188,2.557,202,2.296,211,3.719,310,2.392,311,4.077,312,2.59,313,4.424,314,3.074,315,2.227,316,4.095,317,3.302,318,3.918,319,3.074,320,3.575,321,3.918,322,2.838,323,3.918,324,3.918,325,3.575,326,3.918,327,3.918,328,3.918,329,3.918,330,3.918,331,2.227,332,4.487,333,1.577,334,4.415,335,2.838,336,2.838]],["title/injectables/CommonService.html",[81,0.628,85,1.913]],["body/injectables/CommonService.html",[2,0.018,3,0.206,4,0.206,10,0.263,12,0.589,15,0.206,16,0.112,17,1.714,18,1.199,19,1.309,56,3.553,75,1.637,81,0.974,82,1.637,85,2.969,337,3.969,338,6.499,339,4.601,340,7.246,341,4.601,342,4.601,343,5.607,344,5.607,345,5.607,346,6.499,347,4.601,348,3.243,349,5.891,350,6.852,351,4.601,352,4.601]],["title/classes/CreateMenuDto.html",[16,0.092,353,2.154]],["body/classes/CreateMenuDto.html",[2,0.017,3,0.244,4,0.244,10,0.293,15,0.244,16,0.133,142,1.697,353,3.718,354,4.71,355,4.216,356,3.126,357,6.551,358,4.617,359,3.718,360,4.617,361,5.652,362,3.308,363,2.349,364,4.216]],["title/classes/CreateReservationDto.html",[16,0.092,365,2.154]],["body/classes/CreateReservationDto.html",[2,0.017,3,0.225,4,0.225,10,0.279,15,0.279,16,0.152,142,1.567,333,2.107,356,3.234,362,3.055,363,3.048,365,3.542,366,4.82,367,3.553,368,5.847,369,5.235,370,5.235,371,5.235,372,5.041,373,2.282,374,3.553,375,3.055,376,2.541]],["title/classes/CreateReservationWithPhoneDto.html",[16,0.092,375,2.299]],["body/classes/CreateReservationWithPhoneDto.html",[2,0.017,3,0.225,4,0.225,10,0.278,15,0.278,16,0.152,142,1.563,333,2.104,356,3.23,362,3.047,363,3.045,365,2.853,366,4.811,367,3.543,368,5.84,369,5.228,370,5.228,371,5.228,373,2.276,374,3.543,375,3.775,376,3.14,377,5.027]],["title/classes/CreateRestaurantDto.html",[16,0.092,378,2.299]],["body/classes/CreateRestaurantDto.html",[2,0.017,3,0.231,4,0.231,10,0.306,15,0.231,16,0.126,142,1.606,291,1.925,292,2.933,353,3.89,356,3.024,358,4.466,359,3.596,362,3.132,363,2.949,378,3.84,379,5.467,380,3.992,381,6.337,382,5.467,383,5.168,384,5.168,385,3.643]],["title/classes/CreateUserDto.html",[16,0.092,386,2.299]],["body/classes/CreateUserDto.html",[2,0.017,3,0.241,4,0.241,10,0.291,15,0.241,16,0.131,142,1.677,173,1.919,174,3.062,207,2.799,356,3.104,362,3.27,376,3.278,386,3.942,387,4.655,388,4.167,389,5.612,390,4.234,391,5.024,392,4.234,393,4.234]],["title/modules/DatabaseModule.html",[21,1.08,34,2.47]],["body/modules/DatabaseModule.html",[2,0.017,3,0.246,4,0.246,10,0.315,12,0.705,15,0.246,16,0.134,21,1.874,34,4.287,72,3.126,171,3.338,172,2.052,394,5.508,395,4.642,396,5.508,397,5.508,398,5.508]],["title/classes/ExceptionResponseFormat.html",[16,0.092,331,2.299]],["body/classes/ExceptionResponseFormat.html",[2,0.018,3,0.145,4,0.145,9,2.508,10,0.208,12,0.415,15,0.208,16,0.113,78,1.813,105,3.561,106,3.581,107,3.431,109,3.431,121,3.364,138,3.529,188,2.341,202,2.103,211,3.839,310,2.11,311,3.858,312,2.285,313,4.083,314,2.815,315,1.965,316,3.825,317,3.533,318,3.587,319,2.815,320,3.274,321,3.587,322,2.504,323,3.587,324,3.587,325,3.274,326,3.587,327,3.587,328,3.587,329,3.587,330,3.587,331,2.815,332,5.192,333,1.95,334,4.847,335,2.504,336,2.504,399,2.797,400,4.645,401,3.242,402,3.242,403,3.242,404,3.242,405,3.242,406,3.242,407,3.242]],["title/classes/GlobalExceptionFilter.html",[16,0.092,408,2.931]],["body/classes/GlobalExceptionFilter.html",[2,0.018,3,0.168,4,0.168,10,0.296,12,0.482,15,0.168,16,0.092,17,1.402,18,0.981,19,1.071,39,3.19,46,2.01,66,2.908,78,1.47,90,2.404,101,3.635,106,2.6,107,2.807,109,2.807,123,2.219,138,1.898,143,1.542,196,1.542,197,1.898,211,2.754,215,1.898,218,2.219,231,4.888,331,3.566,334,3.635,348,4.147,408,3.984,409,5.076,410,3.248,411,5.884,412,2.908,413,3.765,414,3.984,415,5.158,416,5.076,417,6.329,418,3.765,419,5.158,420,5.884,421,3.984,422,3.248,423,3.765,424,3.765,425,3.765,426,3.765,427,3.765,428,3.765,429,3.765,430,3.765,431,4.45,432,3.765,433,3.765,434,5.158,435,3.765,436,3.765,437,3.765,438,3.765,439,3.765,440,3.765,441,3.765,442,3.765]],["title/injectables/LoggerMiddleware.html",[67,2.674,81,0.628]],["body/injectables/LoggerMiddleware.html",[2,0.018,3,0.205,4,0.205,10,0.29,12,0.586,15,0.205,16,0.112,17,1.705,18,1.193,39,3.447,46,3.462,67,4.139,78,1.787,81,0.971,82,1.628,90,1.908,107,2.802,114,4.57,123,2.943,128,2.308,143,1.875,245,4.536,247,4.536,249,4.145,253,4.536,412,3.536,414,4.536,443,3.95,444,4.578,445,4.578,446,2.98,447,4.578,448,3.95,449,5.873,450,3.95,451,4.578]],["title/modules/LoggerModule.html",[21,1.08,35,2.47]],["body/modules/LoggerModule.html",[2,0.017,3,0.236,4,0.236,10,0.287,12,0.677,15,0.236,16,0.129,21,1.97,23,2.393,24,2.523,25,2.523,26,2.275,27,3.066,28,2.523,35,4.883,39,3.781,308,4.962,452,5.287,453,5.287,454,5.287,455,5.287]],["title/injectables/LoggerService.html",[39,1.913,81,0.628]],["body/injectables/LoggerService.html",[2,0.018,3,0.289,4,0.141,9,1.736,10,0.239,12,0.404,15,0.141,16,0.077,18,1.393,19,1.521,39,2.295,46,2.853,75,1.122,81,0.753,82,1.122,90,2.101,202,2.061,204,3.675,232,4.374,289,4.558,313,3.478,314,2.759,325,2.222,348,4.124,456,2.435,457,6.206,458,5.344,459,5.344,460,5.344,461,6.206,462,6.206,463,4.553,464,2.95,465,4.553,466,4.553,467,3.153,468,3.153,469,4.553,470,3.153,471,5.581,472,3.153,473,3.153,474,3.153,475,4.127,476,3.928,477,3.153,478,3.153,479,3.153,480,3.153,481,3.153,482,3.153,483,3.153,484,1.357,485,3.153,486,4.553,487,2.435,488,4.553,489,3.153,490,4.553,491,3.153,492,4.553,493,3.153,494,3.153,495,3.153,496,3.153,497,3.153,498,3.153,499,3.153]],["title/classes/LoginDto.html",[16,0.092,102,2.47]],["body/classes/LoginDto.html",[2,0.017,3,0.227,4,0.227,9,2.471,10,0.227,15,0.227,16,0.123,102,4.075,142,1.575,207,2.924,392,4.422,484,2.694,500,4.373,501,3.794,502,3.577,503,5.402,504,5.069,505,5.402,506,5.069,507,4.117]],["title/entities/Menu.html",[363,1.633,508,1.718]],["body/entities/Menu.html",[2,0.018,3,0.134,4,0.134,9,2.268,10,0.255,15,0.134,16,0.073,75,2.033,142,0.932,201,1.229,227,1.171,291,2.558,292,1.702,296,2.618,301,1.847,333,2.224,358,3.66,359,2.947,360,3.66,361,4.48,363,1.889,484,3.004,501,3.686,502,3.518,507,3.851,508,1.988,509,2.588,510,3.66,511,3.66,512,4.48,513,3.66,514,2.999,515,4.479,516,4.479,517,4.415,518,2.999,519,4.479,520,3.66,521,2.999,522,3.66,523,2.999,524,4.39,525,4.39,526,3.391,527,4.39,528,2.999,529,3.38,530,2.999,531,4.39,532,2.999,533,2.999,534,3.72,535,3.391,536,2.999,537,3.851,538,2.114,539,3.788,540,2.999,541,2.114,542,4.39,543,3.094,544,2.999,545,1.952,546,2.999,547,3.66,548,2.999,549,2.588,550,2.588,551,4.137,552,3.094,553,3.094,554,2.999,555,2.999]],["title/controllers/MenusController.html",[0,1.481,556,2.674]],["body/controllers/MenusController.html",[0,1.078,2,0.018,3,0.123,4,0.123,9,2.184,10,0.31,12,0.354,15,0.123,16,0.067,17,1.029,18,0.72,19,1.755,104,1.797,108,2.688,111,4.737,131,2.641,132,1.797,133,2.998,134,1.946,137,2.688,138,1.392,139,2.133,141,4.014,142,0.858,152,2.911,154,3.562,227,1.931,279,1.797,296,3.109,301,1.469,333,2.043,353,4.075,359,1.567,385,2.911,464,2.494,484,1.777,502,2.082,556,2.911,557,2.382,558,2.382,559,2.129,560,2.344,561,2.344,562,2.205,563,2.382,564,2.761,565,4.13,566,2.761,567,2.382,568,2.382,569,2.761,570,2.761,571,1.946,572,2.761,573,2.761,574,2.382,575,2.761,576,2.761,577,4.763,578,2.382,579,2.761,580,2.761,581,2.382,582,4.374,583,2.761,584,2.761,585,2.761,586,3.19,587,2.761,588,1.946,589,2.133,590,1.946,591,3.563,592,2.761,593,2.382,594,1.474,595,1.797,596,1.474,597,1.474,598,2.998,599,2.382,600,1.946,601,2.761,602,1.946,603,2.761,604,2.761,605,2.761,606,4.268,607,3.821,608,2.133,609,2.761,610,2.761,611,2.761,612,2.761,613,2.761,614,2.761,615,2.761,616,2.761,617,2.761,618,2.761,619,2.761,620,2.761,621,2.761,622,2.761,623,2.761]],["title/modules/MenusModule.html",[21,1.08,624,2.47]],["body/modules/MenusModule.html",[2,0.017,3,0.22,4,0.22,10,0.33,12,0.632,15,0.22,16,0.12,21,1.91,23,2.233,24,2.354,25,2.354,26,2.123,27,2.938,28,2.354,72,2.8,77,2.99,171,2.99,172,1.838,291,2.293,292,2.8,363,2.123,364,3.81,556,4.731,598,4.47,599,4.256,624,4.801,625,4.256,626,4.256,627,4.933,628,4.933,629,4.933]],["title/injectables/MenusService.html",[81,0.628,598,2.299]],["body/injectables/MenusService.html",[2,0.018,3,0.143,4,0.143,10,0.291,12,0.411,15,0.143,16,0.078,18,0.836,19,1.851,81,0.763,82,1.141,90,1.498,172,1.195,179,3.473,182,3.149,188,2.324,192,1.713,195,1.821,201,1.314,202,1.452,204,1.617,205,2.616,296,3.279,301,2.098,333,2.343,353,4.183,363,2.322,364,2.478,385,3.249,464,2.324,559,1.984,560,2.616,561,2.616,562,2.461,563,3.977,571,3.249,574,3.977,577,4.556,578,3.977,581,3.977,582,4.463,596,1.713,597,1.713,598,2.794,630,2.768,631,4.61,632,3.208,633,3.208,634,4.61,635,3.208,636,4.61,637,3.208,638,3.208,639,3.208,640,3.208,641,3.208,642,3.208,643,3.208,644,4.61,645,3.208,646,3.208,647,3.208,648,3.208,649,3.208,650,3.208,651,3.208]],["title/injectables/ParseArrayOrOnePipe.html",[81,0.628,600,2.674]],["body/injectables/ParseArrayOrOnePipe.html",[2,0.018,3,0.212,4,0.212,10,0.268,12,0.607,15,0.212,16,0.116,19,1.35,78,1.852,81,0.994,82,1.687,90,1.952,192,2.532,196,1.943,197,2.391,215,3.027,217,3.207,218,2.585,219,3.64,600,4.233,602,4.233,652,5.182,653,4.092,654,6.007,655,6.007,656,5.687,657,6.93,658,4.743,659,5.182,660,6.007,661,4.743,662,4.743,663,3.64,664,5.182,665,4.743]],["title/entities/Reservation.html",[373,1.718,508,1.718]],["body/entities/Reservation.html",[2,0.018,3,0.121,4,0.121,9,1.318,10,0.26,15,0.121,16,0.066,75,2.174,142,0.838,173,2.375,174,1.531,201,1.105,207,2.099,227,1.904,291,2.487,292,1.531,296,2.458,301,1.735,333,2.222,369,3.767,370,3.767,371,3.767,373,1.837,376,2.458,484,3.046,501,3.844,502,3.603,507,3.955,508,1.837,510,3.438,511,3.438,512,4.208,513,3.438,515,2.86,516,2.86,519,5.184,520,3.438,522,3.438,529,2.641,534,3.979,535,3.133,537,3.705,538,1.901,539,3.5,541,2.86,543,3.824,545,2.641,547,3.438,549,2.327,550,2.327,551,4.128,552,3.438,553,2.86,666,2.327,667,2.697,668,2.697,669,2.697,670,2.697,671,1.901,672,2.697,673,5.274,674,5.274,675,5.041,676,4.057,677,2.697,678,2.697,679,5.426,680,2.697,681,2.697,682,2.697,683,4.057,684,2.697,685,2.697,686,2.697,687,4.057,688,2.697,689,2.697,690,2.697,691,4.057,692,2.083]],["title/entities/ReservationMenu.html",[508,1.718,537,2.299]],["body/entities/ReservationMenu.html",[2,0.018,3,0.172,4,0.172,10,0.286,15,0.172,16,0.094,75,2.275,142,1.2,201,1.581,227,2.327,301,2.12,333,2.327,363,3.133,373,3.296,484,2.878,501,3.612,502,3.477,507,3.875,508,2.375,529,3.415,534,4.162,537,3.179,541,3.697,543,4.507,545,3.415,551,3.879,552,4.2,577,4.603,671,2.72,693,5.951,694,3.33,695,5.96,696,3.859,697,5.246,698,3.859,699,3.859,700,5.246,701,3.859,702,3.859,703,3.33,704,2.981]],["title/controllers/ReservationsController.html",[0,1.481,705,2.674]],["body/controllers/ReservationsController.html",[0,1.117,2,0.018,3,0.128,4,0.128,9,2.204,10,0.297,12,0.366,15,0.128,16,0.07,17,1.065,18,0.745,19,1.697,90,0.929,108,2.759,123,2.404,128,2.816,131,2.263,132,1.861,137,3.288,140,4.403,141,4.067,142,0.889,143,1.171,154,3.615,173,1.017,227,2.181,238,2.209,296,3.149,301,2.222,333,2.203,365,3.769,375,3.385,464,2.546,559,2.173,560,2.867,561,2.406,562,2.263,571,2.016,588,2.016,589,2.209,590,2.016,594,1.527,595,1.861,596,1.527,597,1.527,607,3.274,608,3.274,705,2.988,706,2.467,707,2.209,708,2.467,709,4.607,710,2.467,711,2.86,712,3.385,713,3.636,714,2.86,715,2.86,716,2.016,717,2.86,718,2.86,719,2.016,720,2.86,721,2.86,722,2.016,723,4.323,724,2.86,725,2.86,726,2.016,727,3.274,728,3.061,729,2.467,730,2.86,731,4.239,732,2.86,733,2.86,734,2.467,735,2.467,736,2.86,737,2.86,738,2.86,739,2.86,740,2.86,741,2.86,742,2.86,743,2.86,744,2.86,745,2.86]],["title/modules/ReservationsModule.html",[21,1.08,746,2.47]],["body/modules/ReservationsModule.html",[2,0.017,3,0.22,4,0.22,10,0.33,12,0.632,15,0.22,16,0.12,21,1.91,23,2.233,24,2.354,25,2.354,26,2.123,27,2.938,28,2.354,72,2.8,77,2.99,171,2.99,172,1.838,173,2.19,174,2.8,373,2.233,374,3.477,705,4.731,728,4.47,729,4.256,746,4.801,747,4.256,748,4.256,749,4.933,750,4.933,751,4.933]],["title/injectables/ReservationsService.html",[81,0.628,728,2.299]],["body/injectables/ReservationsService.html",[2,0.018,3,0.14,4,0.14,10,0.315,12,0.401,15,0.14,16,0.076,18,1.181,81,0.749,82,1.114,90,1.018,172,1.167,173,1.612,174,1.777,179,2.842,182,3.552,185,4.111,188,1.579,192,1.672,195,1.777,196,1.283,197,1.579,199,1.898,200,2.038,201,1.283,202,1.418,203,2.419,204,2.284,205,1.777,206,2.419,207,2.291,227,1.223,296,2.94,301,2.075,314,2.746,333,2.335,365,3.867,373,1.418,374,2.207,375,3.535,376,2.284,464,2.284,559,2.291,560,2.571,561,2.571,562,2.419,571,2.207,596,1.672,597,1.672,692,2.419,712,2.746,713,2.949,716,2.207,719,2.207,722,2.207,723,4.029,727,3.499,728,2.746,752,2.702,753,3.132,754,3.132,755,4.531,756,2.702,757,3.132,758,3.132,759,3.132,760,3.132,761,3.132,762,2.207,763,3.132,764,2.207,765,2.702,766,3.132,767,3.132,768,3.132,769,3.132,770,3.132]],["title/classes/ResponseFormat.html",[16,0.092,315,2.299]],["body/classes/ResponseFormat.html",[2,0.018,3,0.147,4,0.147,9,2.526,10,0.21,12,0.421,15,0.21,16,0.114,78,1.832,105,3.58,106,3.592,107,3.441,109,3.441,121,3.386,138,3.541,188,2.365,202,2.124,211,3.85,310,2.14,311,3.883,312,2.318,313,4.106,314,2.843,315,2.843,316,4.758,317,3.561,318,3.624,319,2.843,320,3.307,321,3.624,322,2.54,323,3.624,324,3.624,325,3.307,326,3.624,327,3.624,328,3.624,329,3.624,330,3.624,331,1.993,332,4.225,333,1.458,334,4.205,335,2.54,336,2.54,399,2.837,771,4.692,772,3.288,773,3.288,774,3.288,775,3.288,776,3.288,777,3.288]],["title/injectables/ResponseInterceptor.html",[81,0.628,778,2.931]],["body/injectables/ResponseInterceptor.html",[2,0.018,3,0.19,4,0.19,10,0.308,12,0.543,15,0.19,16,0.103,17,1.58,18,1.106,19,1.207,39,3.348,66,3.276,78,1.656,81,0.924,82,1.509,90,2.303,101,2.989,106,2.138,107,2.666,114,2.989,123,1.825,128,2.138,143,1.737,218,1.825,249,3.787,287,5.13,289,2.989,294,3.276,315,2.57,412,3.276,414,4.316,422,3.659,448,3.659,450,3.659,778,4.316,779,3.659,780,5.588,781,4.241,782,5.588,783,6.642,784,4.241,785,5.392,786,5.588,787,4.241,788,5.588,789,3.276,790,4.241,791,4.241,792,5.588,793,4.241,794,4.241,795,4.241,796,4.241,797,4.241,798,4.241,799,3.659,800,4.241]],["title/entities/Restaurant.html",[291,1.413,508,1.718]],["body/entities/Restaurant.html",[2,0.018,3,0.126,4,0.126,9,2.405,10,0.265,15,0.126,16,0.068,75,1.489,142,0.874,173,2.402,174,1.596,201,1.152,207,2.152,227,1.634,291,1.559,301,1.779,319,2.537,333,2.054,358,3.525,359,2.838,363,2.672,373,2.811,382,4.314,484,3.039,501,4.005,502,3.686,507,4.092,508,1.895,510,3.525,511,3.525,513,3.525,515,4.376,516,4.376,517,4.279,519,4.376,520,2.95,522,2.95,526,2.172,529,2.725,534,2.725,538,2.95,541,1.982,543,2.95,545,1.83,547,2.95,551,3.855,552,2.95,553,3.525,558,4.314,663,1.704,671,1.982,673,4.779,674,4.779,703,2.426,704,2.172,707,3.862,801,2.426,802,4.186,803,2.812,804,2.812,805,4.779,806,2.812,807,2.812,808,2.812,809,2.812,810,2.812,811,5.54,812,4.186,813,2.812,814,2.812,815,4.186,816,2.812,817,2.812,818,4.186,819,2.812,820,2.812,821,2.812,822,4.186,823,2.812,824,2.812,825,2.812,826,4.186,827,2.812]],["title/injectables/RestaurantExistsMiddleware.html",[81,0.628,828,2.674]],["body/injectables/RestaurantExistsMiddleware.html",[2,0.018,3,0.194,4,0.194,10,0.319,12,0.557,15,0.194,16,0.106,18,1.134,46,3.034,78,1.699,81,0.94,82,1.548,90,1.414,123,2.887,128,2.193,143,1.782,172,1.621,179,3.379,182,3.811,195,2.47,199,2.637,200,2.832,201,1.782,202,1.97,204,2.193,205,2.47,245,4.389,247,4.389,248,5.459,249,4.066,253,4.389,291,1.621,292,2.47,293,3.361,296,2.864,301,1.548,446,2.832,828,4.005,829,5.459,830,3.754,831,4.351,832,4.351,833,4.351,834,4.351,835,4.351]],["title/controllers/RestaurantsController.html",[0,1.481,836,2.674]],["body/controllers/RestaurantsController.html",[0,0.936,2,0.018,3,0.107,4,0.107,9,2.098,10,0.309,12,0.307,15,0.107,16,0.058,17,0.893,18,0.625,19,1.571,75,1.816,104,2.415,105,2.898,106,2.574,107,2.436,108,3.324,109,2.436,123,2.197,128,2.574,131,1.281,132,1.561,133,2.75,134,1.691,135,2.953,136,1.852,137,2.953,138,1.209,139,1.852,140,3.599,141,3.8,142,0.745,143,0.982,152,1.691,154,3.346,227,2.521,249,2.248,279,1.561,291,1.902,296,3.436,301,0.853,319,2.248,333,2.171,359,2.898,378,3.997,464,2.287,484,2.707,502,3.17,559,1.952,560,2.575,561,2.106,562,1.981,567,3.201,568,3.201,588,1.691,589,1.852,590,1.691,591,4.406,593,2.069,594,1.281,595,1.561,596,1.281,597,1.281,606,3.201,607,3.504,608,1.852,708,2.069,709,2.866,710,2.069,712,3.538,713,3.324,726,1.691,734,2.069,735,2.069,764,2.615,765,3.915,836,2.615,837,2.069,838,3.944,839,2.399,840,2.399,841,2.399,842,2.069,843,2.399,844,3.201,845,3.201,846,2.399,847,2.399,848,2.615,849,2.399,850,2.399,851,2.399,852,3.71,853,2.399,854,2.399,855,2.399,856,2.399,857,2.399,858,4.202,859,2.399,860,2.399,861,2.399,862,2.399,863,2.866,864,2.399,865,3.71,866,2.866,867,1.852,868,2.399,869,2.75,870,2.069,871,2.399,872,2.399,873,2.399,874,2.399,875,2.399,876,2.069,877,2.399,878,2.399,879,2.399,880,2.399,881,2.399,882,2.399,883,2.399]],["title/modules/RestaurantsModule.html",[21,1.08,36,2.47]],["body/modules/RestaurantsModule.html",[2,0.018,3,0.173,4,0.173,10,0.326,12,0.496,15,0.173,16,0.094,21,1.906,23,1.755,24,1.849,25,1.849,26,1.668,27,2.51,28,2.51,36,4.84,41,3.344,42,4.539,43,5.527,45,4.539,46,2.069,54,4.539,72,2.2,77,2.349,78,1.513,109,2.51,171,2.349,172,1.444,291,1.444,624,4.598,746,4.598,828,2.732,836,4.21,867,2.993,869,4.541,870,3.344,876,4.539,884,3.344,885,3.344,886,3.876,887,3.344,888,3.876,889,3.876,890,3.876,891,2.993,892,3.876,893,3.876,894,3.876,895,3.876,896,3.876,897,3.876,898,3.876,899,3.876,900,3.876]],["title/injectables/RestaurantsService.html",[81,0.628,869,2.299]],["body/injectables/RestaurantsService.html",[2,0.018,3,0.141,4,0.141,10,0.305,12,0.405,15,0.141,16,0.077,18,0.825,19,1.768,81,0.755,82,1.125,90,1.74,172,1.179,179,3.457,182,3.129,188,2.301,193,2.23,195,1.796,196,1.296,197,1.595,200,2.059,201,1.296,202,1.432,204,1.595,205,2.59,207,1.964,215,1.595,217,1.689,218,1.361,227,2.09,241,2.444,242,2.23,283,2.73,285,3.938,291,2.315,293,2.444,300,2.73,301,2.21,333,2.339,378,4.14,464,2.301,559,1.964,560,2.59,561,2.59,562,2.437,596,1.689,597,1.689,712,3.245,713,4.045,716,3.217,719,3.217,722,3.217,756,3.938,762,3.217,838,2.444,842,3.938,848,3.217,858,4.447,866,3.525,867,2.444,869,2.766,901,2.73,902,3.164,903,3.164,904,3.164,905,3.164,906,3.164,907,3.164,908,3.164,909,3.164,910,3.164,911,3.164,912,3.164,913,3.164,914,3.164,915,3.164]],["title/guards/RoleGuard.html",[129,2.674,278,2.674]],["body/guards/RoleGuard.html",[2,0.018,3,0.167,4,0.167,10,0.305,12,0.478,15,0.167,16,0.091,17,1.391,18,0.973,19,1.795,75,2.084,78,1.458,81,0.848,90,2.219,104,2.431,121,2.911,123,2.207,129,3.615,131,3.128,143,1.53,173,1.824,194,2.884,196,1.53,197,1.882,204,2.953,215,2.585,217,2.739,218,2.207,237,3.962,282,5.704,286,3.222,287,4.871,289,3.615,290,4.425,294,2.884,487,2.884,594,3.906,595,2.431,663,2.263,785,5.055,789,2.884,891,2.884,916,3.222,917,5.129,918,3.734,919,6.83,920,3.734,921,3.734,922,5.129,923,3.734,924,3.734,925,5.129,926,3.734,927,3.734,928,3.734,929,3.734,930,5.129,931,3.734,932,3.734,933,3.734,934,3.734]],["title/injectables/TypeormService.html",[81,0.628,395,2.674]],["body/injectables/TypeormService.html",[2,0.018,3,0.221,4,0.221,10,0.314,12,0.633,15,0.221,16,0.12,17,1.843,18,1.289,19,1.408,63,4.268,78,1.931,81,1.02,82,1.759,85,3.546,88,3.486,172,1.843,395,4.347,935,4.268,936,7.035,937,4.947,938,4.947,939,6.167,940,4.947,941,6.72,942,3.82,943,6.167,944,4.947]],["title/classes/UpdateMenuDto.html",[16,0.092,582,2.47]],["body/classes/UpdateMenuDto.html",[2,0.017,3,0.252,4,0.252,10,0.299,15,0.252,16,0.137,142,1.754,353,3.203,355,4.358,356,3.188,385,3.977,559,2.428,582,4.349,945,4.868,946,6.681,947,4.358]],["title/classes/UpdateReservationDto.html",[16,0.092,723,2.47]],["body/classes/UpdateReservationDto.html",[2,0.017,3,0.252,4,0.252,10,0.299,15,0.252,16,0.137,142,1.754,356,3.188,365,3.203,367,3.977,559,2.428,723,4.349,727,4.358,947,4.358,948,4.868,949,6.681]],["title/classes/UpdateRestaurantDto.html",[16,0.092,858,2.47]],["body/classes/UpdateRestaurantDto.html",[2,0.017,3,0.251,4,0.251,10,0.298,15,0.251,16,0.137,356,3.182,378,3.409,380,4.345,559,2.421,858,4.341,866,4.345,947,4.345,950,4.854,951,6.669,952,4.345,953,4.345]],["title/classes/UpdateUserDto.html",[16,0.092,954,2.47]],["body/classes/UpdateUserDto.html",[2,0.017,3,0.25,4,0.25,10,0.297,15,0.25,16,0.136,356,3.171,386,3.388,388,4.319,393,4.325,559,2.406,952,4.319,953,4.319,954,4.325,955,4.824,956,6.645,957,5.592,958,4.319]],["title/entities/User.html",[173,1.35,508,1.718]],["body/entities/User.html",[2,0.018,3,0.123,4,0.123,9,2.421,10,0.262,15,0.123,16,0.067,75,2.334,142,0.853,173,1.462,201,1.124,207,2.121,227,1.605,291,2.292,292,1.558,301,1.753,333,1.701,373,2.786,376,2.485,390,3.209,391,3.807,392,3.209,393,3.209,484,3.057,501,3.866,502,3.615,503,2.368,505,2.368,507,3.976,508,1.861,510,3.474,511,3.474,513,3.474,515,4.816,516,4.816,517,3.175,519,4.337,520,3.474,522,3.474,526,2.12,529,2.676,534,2.676,535,3.175,538,2.898,545,1.787,547,3.474,551,4.153,553,3.474,594,3.407,595,1.787,671,1.935,675,3.175,704,2.12,707,3.807,838,3.807,959,2.368,960,2.745,961,2.745,962,2.745,963,6.154,964,4.111,965,2.745,966,2.745,967,2.745,968,2.745,969,4.111,970,4.111,971,2.745,972,2.745,973,4.111,974,2.745,975,4.111,976,2.745,977,4.111,978,2.745,979,2.745,980,2.745,981,5.474,982,2.745,983,2.745,984,2.745,985,2.745]],["title/controllers/UsersController.html",[0,1.481,986,2.674]],["body/controllers/UsersController.html",[0,0.893,2,0.018,3,0.102,4,0.102,10,0.291,12,0.293,15,0.102,16,0.056,17,0.852,18,0.597,19,1.703,75,2.359,104,4.03,105,3.514,106,3.121,107,2.955,108,4.317,109,2.955,120,3.401,123,2.801,128,3.016,131,2.658,132,1.489,133,3.017,134,1.613,135,3.516,136,1.767,137,2.328,138,1.153,140,3.509,141,4.03,142,0.711,143,0.937,152,1.613,154,3.626,169,2.351,173,0.814,179,3.398,188,2.22,207,1.539,301,1.566,362,1.387,376,1.803,386,3.471,389,1.974,390,2.328,464,1.803,559,1.539,562,1.91,588,1.613,590,1.613,596,1.222,597,1.222,709,3.401,954,4.03,958,2.763,986,2.521,987,1.974,988,3.577,989,3.577,990,3.577,991,3.577,992,3.086,993,2.288,994,6.365,995,2.288,996,2.288,997,2.288,998,2.288,999,2.288,1000,3.577,1001,2.288,1002,2.288,1003,2.288,1004,2.288,1005,2.288,1006,2.288,1007,3.577,1008,2.288,1009,2.288,1010,2.288,1011,2.288,1012,2.288,1013,2.288,1014,3.577,1015,1.974,1016,2.288,1017,2.288,1018,2.288,1019,2.288,1020,2.288,1021,2.288,1022,2.288,1023,2.288,1024,2.288,1025,2.288,1026,2.288,1027,2.288,1028,1.767,1029,1.974,1030,2.288,1031,2.288,1032,2.288,1033,2.288,1034,2.288,1035,3.799,1036,2.288,1037,2.288,1038,4.404,1039,2.288,1040,2.288,1041,4.404,1042,2.288,1043,2.288,1044,2.288,1045,2.288,1046,2.288,1047,2.288,1048,2.288,1049,2.288,1050,2.288,1051,2.288,1052,2.288,1053,2.288,1054,2.288,1055,2.288,1056,2.288,1057,2.288,1058,2.288,1059,2.288,1060,2.288,1061,2.288,1062,2.288,1063,2.288]],["title/modules/UsersModule.html",[21,1.08,37,2.47]],["body/modules/UsersModule.html",[2,0.017,3,0.218,4,0.218,10,0.322,12,0.623,15,0.218,16,0.119,21,1.898,23,2.204,24,2.323,25,2.323,26,2.095,27,2.913,28,2.913,37,4.856,72,2.763,77,2.95,169,4.137,171,2.95,172,1.813,173,1.732,177,4.2,986,4.702,1028,3.76,1029,4.2,1064,4.2,1065,4.2,1066,4.868,1067,4.868,1068,4.868]],["title/injectables/UsersService.html",[81,0.628,169,2.026]],["body/injectables/UsersService.html",[2,0.018,3,0.092,4,0.092,9,1.999,10,0.275,12,0.264,15,0.092,16,0.05,18,0.858,19,1.795,75,2.292,81,0.544,82,0.732,90,2.194,120,1.59,169,1.757,172,0.767,173,2.333,179,3.906,181,1.776,182,2.506,183,3.26,185,2.541,188,3.007,192,1.099,193,1.451,195,1.168,196,0.843,197,1.038,198,1.776,199,2.844,200,1.34,201,0.843,202,0.932,203,1.59,204,1.658,205,3.877,206,3.174,207,2.647,211,1.099,214,1.776,215,2.071,216,1.776,217,2.194,218,1.768,219,1.247,242,1.451,265,3.625,301,2.292,317,1.34,333,1.912,348,3.308,376,2.366,386,3.11,390,3.34,393,2.141,464,1.658,559,1.416,560,2.664,561,1.867,562,1.757,596,1.099,597,1.099,663,1.247,716,2.319,719,2.319,722,2.319,954,3.884,958,2.541,992,2.838,1015,2.838,1028,1.59,1069,1.776,1070,4.109,1071,3.29,1072,3.29,1073,3.29,1074,2.058,1075,3.29,1076,4.694,1077,2.058,1078,2.058,1079,2.058,1080,2.058,1081,3.29,1082,2.058,1083,3.29,1084,2.058,1085,3.29,1086,2.058,1087,3.545,1088,2.058,1089,2.058,1090,2.058,1091,2.058,1092,2.838,1093,2.838,1094,3.29,1095,3.29,1096,2.058,1097,2.838,1098,2.058,1099,2.058,1100,2.058,1101,3.29,1102,2.058,1103,2.058,1104,2.058,1105,4.05,1106,2.058,1107,5.472,1108,2.058,1109,3.29,1110,2.058,1111,2.058,1112,3.29,1113,2.058,1114,2.058,1115,2.058,1116,2.058,1117,4.109,1118,4.109,1119,2.058,1120,3.29,1121,3.29,1122,3.29,1123,2.058,1124,2.058]],["title/modules/UtilModule.html",[21,1.08,38,2.47]],["body/modules/UtilModule.html",[2,0.017,3,0.229,4,0.229,10,0.282,12,0.656,15,0.229,16,0.125,21,1.943,23,2.32,24,2.445,25,2.445,26,2.205,27,3.008,28,3.008,38,4.91,183,4.427,308,4.869,1125,4.422,1126,4.422,1127,4.422,1128,5.125,1129,5.125]],["title/injectables/UtilService.html",[81,0.628,183,2.154]],["body/injectables/UtilService.html",[2,0.018,3,0.144,4,0.144,9,2.272,10,0.291,12,0.413,15,0.144,16,0.079,17,1.201,18,0.841,19,1.54,51,2.491,81,0.765,82,1.147,84,2.491,85,3.284,88,2.273,90,2.118,99,2.491,121,1.83,149,3.522,180,4.18,183,2.626,192,1.722,196,1.895,207,2.804,211,2.889,215,1.625,217,1.722,218,1.388,219,1.954,252,2.099,254,2.782,255,2.491,260,2.782,265,2.491,301,2.227,376,2.98,390,4.075,392,2.099,393,4.075,664,2.782,1105,3.992,1130,2.782,1131,5.412,1132,4.627,1133,4.627,1134,5.412,1135,4.627,1136,4.627,1137,5.913,1138,3.225,1139,4.627,1140,3.225,1141,3.225,1142,4.669,1143,3.225,1144,4.627,1145,5.412,1146,3.225,1147,3.225,1148,3.225,1149,3.225,1150,3.225,1151,3.225,1152,4.627,1153,3.225,1154,3.225,1155,4.627,1156,3.225,1157,4.627,1158,4.627,1159,4.627,1160,4.627,1161,4.627,1162,3.225,1163,3.225,1164,3.225,1165,3.225]],["title/coverage.html",[1166,5.186]],["body/coverage.html",[0,2.234,1,1.609,2,0.017,5,1.969,13,1.383,16,0.166,26,0.982,39,1.151,47,1.609,67,1.609,81,1.155,83,1.969,85,1.151,89,2.516,94,1.609,95,1.969,102,1.486,129,1.609,131,1.219,133,1.383,135,1.486,144,1.383,169,1.219,173,0.812,178,1.969,183,1.296,196,1.462,199,1.383,218,0.982,243,1.969,244,1.969,252,2.324,278,2.516,279,1.486,280,1.969,281,1.969,291,0.85,310,1.486,311,1.486,312,3.099,315,1.383,331,1.383,337,1.969,353,1.296,354,1.969,355,2.757,363,0.982,365,1.296,366,2.757,367,3.099,373,1.033,375,1.383,378,1.383,379,1.969,380,2.757,386,1.383,387,1.969,388,2.757,395,1.609,408,1.763,409,1.969,410,1.969,421,1.763,443,1.969,446,2.862,456,2.757,471,1.763,475,1.763,484,2.662,500,1.969,508,2.443,509,1.969,537,1.383,556,1.609,557,1.969,582,1.486,586,1.763,594,1.906,598,1.383,600,1.609,602,1.609,630,1.969,652,1.969,653,1.969,663,4.804,666,1.969,693,1.969,694,1.969,705,1.609,706,1.969,723,1.486,728,1.383,752,1.969,762,1.609,778,1.763,779,1.969,801,1.969,828,1.609,829,1.969,830,1.969,836,1.609,837,1.969,858,1.486,863,1.763,869,1.383,901,1.969,916,1.969,935,1.969,942,1.763,945,1.969,948,1.969,950,1.969,954,1.486,955,1.969,959,1.969,986,1.609,987,1.969,1069,1.969,1130,1.969,1167,2.283,1168,5.396,1169,6.505,1170,3.57,1171,2.283,1172,1.969,1173,7.447,1174,7.769,1175,1.969,1176,1.969,1177,1.969,1178,1.969,1179,1.969,1180,6.187,1181,1.969,1182,5.811,1183,1.969,1184,1.969,1185,1.969,1186,1.969,1187,1.969,1188,1.969,1189,1.969,1190,1.969,1191,1.969,1192,1.969,1193,1.763,1194,1.969,1195,1.969,1196,2.757,1197,2.283,1198,1.969,1199,5.396,1200,3.57,1201,3.57,1202,2.283,1203,1.969,1204,2.757,1205,3.396,1206,2.283,1207,2.283,1208,1.969,1209,1.969,1210,4.29,1211,1.969,1212,1.969,1213,1.969,1214,1.969,1215,3.08,1216,2.283,1217,2.283]],["title/dependencies.html",[23,2.067,1218,2.731]],["body/dependencies.html",[2,0.017,12,0.644,16,0.152,56,3.883,142,1.563,143,2.059,172,1.873,201,2.552,255,3.883,314,3.047,656,4.337,789,3.883,891,3.883,952,3.883,953,3.883,1219,6.769,1220,5.027,1221,5.027,1222,5.027,1223,5.027,1224,5.027,1225,5.027,1226,5.027,1227,5.027,1228,5.027,1229,5.027,1230,5.027,1231,5.027,1232,4.337,1233,5.027,1234,5.027,1235,5.027,1236,5.027,1237,5.027,1238,5.027,1239,5.027,1240,5.027,1241,5.027,1242,5.027,1243,5.027,1244,5.027,1245,5.027]],["title/miscellaneous/functions.html",[1246,2.445,1247,4.566]],["body/miscellaneous/functions.html",[2,0.017,9,2.014,26,2.902,109,2.957,182,3.309,199,3.756,227,1.947,333,2.193,712,3.756,713,4.034,726,4.973,762,4.369,848,3.515,1087,5.348,1092,5.348,1093,5.348,1097,5.348,1198,4.302,1215,4.302,1248,4.987,1249,6.198,1250,4.987,1251,7.055,1252,4.987]],["title/index.html",[1253,3.165,1254,3.165,1255,3.165]],["body/index.html",[2,0.018,99,4.322,258,3.667,259,5.398,291,1.583,345,4.828,359,2.413,805,3.667,1232,3.667,1256,4.251,1257,6.908,1258,4.251,1259,4.251,1260,6.256,1261,4.251,1262,5.596,1263,4.251,1264,6.256,1265,4.251,1266,4.251,1267,4.251,1268,5.596,1269,5.596,1270,4.251,1271,4.251,1272,4.251,1273,4.251,1274,4.251,1275,4.251,1276,4.251,1277,4.251,1278,4.251,1279,4.251,1280,4.251,1281,4.251,1282,5.596,1283,4.251,1284,4.251,1285,5.596,1286,4.251,1287,4.251,1288,4.251,1289,3.667,1290,4.251,1291,4.251,1292,4.251,1293,4.251,1294,4.251,1295,4.251,1296,4.251,1297,4.251,1298,4.251,1299,5.596,1300,4.251]],["title/modules.html",[1301,5.186]],["body/modules.html",[2,0.018,22,3.582,32,3.308,33,3.308,34,3.308,35,3.308,36,3.308,37,3.308,38,3.308,624,3.308,746,3.308,1302,7.667]],["title/overview.html",[1303,5.186]],["body/overview.html",[2,0.017,13,3.558,21,1.067,22,5.476,23,1.697,24,1.789,25,1.789,26,1.613,27,1.789,28,1.789,29,3.235,30,3.235,31,3.235,32,4.558,33,4.451,34,4.112,35,4.309,36,4.765,37,4.451,38,4.451,39,3.185,82,1.334,85,3.53,144,3.558,167,3.235,168,3.235,169,3.808,183,3.975,227,1.464,304,3.235,305,3.235,306,3.235,598,3.558,624,4.309,625,3.235,626,3.235,675,2.896,692,2.896,728,3.558,746,4.309,747,3.235,748,3.235,764,2.643,848,2.643,869,4.244,884,3.235,885,3.235,887,3.235,1064,3.235,1065,3.235,1125,3.235,1126,3.235,1127,3.235,1304,3.75,1305,3.75]],["title/properties.html",[1218,2.731,1306,3.939]],["body/properties.html",[2,0.017,360,4.168,1193,4.568,1307,5.103,1308,5.914,1309,5.914,1310,5.914]],["title/miscellaneous/typealiases.html",[1246,2.445,1311,4.566]],["body/miscellaneous/typealiases.html",[2,0.017,89,4.576,196,2.66,252,4.226,421,5.015,446,4.825,456,4.155,471,5.015,484,2.315,594,3.467,942,5.015,1179,4.641,1181,4.641,1194,4.641,1195,4.641,1196,5.015,1204,4.155,1205,4.155,1312,5.379,1313,5.379,1314,5.602,1315,5.379,1316,5.379,1317,5.379,1318,4.641,1319,5.379]],["title/miscellaneous/variables.html",[1246,2.445,1320,4.566]],["body/miscellaneous/variables.html",[0,0.442,2,0.018,9,2.162,16,0.028,19,1.436,75,0.947,89,1.403,90,2.004,96,0.977,105,2.459,106,2.79,107,2.197,109,2.641,121,2.069,131,1.063,133,1.206,135,1.295,138,0.571,149,0.737,154,2.21,163,0.977,173,0.403,180,0.875,196,0.815,211,3.527,218,0.856,227,0.442,230,0.977,232,2.257,249,1.206,252,1.295,278,0.798,291,0.422,313,1.733,316,2.57,317,3.15,319,1.206,320,1.403,333,1.675,343,0.977,344,0.977,356,0.541,360,1.403,363,0.487,373,0.513,391,0.875,392,1.295,416,1.717,431,5.559,446,1.733,475,2.816,476,1.717,484,3.103,487,3.103,502,3.436,537,0.686,586,1.537,594,1.421,602,2.57,659,2.296,663,0.686,712,1.94,726,0.798,764,0.798,799,1.717,844,2.763,845,1.717,863,1.537,1035,2.296,1142,0.977,1172,0.977,1175,0.977,1176,0.977,1177,0.977,1178,0.977,1182,0.977,1183,2.296,1184,2.296,1185,2.296,1186,2.296,1187,2.296,1188,3.146,1189,2.296,1190,2.296,1191,2.296,1192,2.296,1193,2.473,1196,1.537,1203,0.977,1204,0.875,1205,0.875,1208,0.977,1209,0.977,1210,0.977,1211,2.763,1212,3.146,1213,1.717,1214,1.717,1289,0.977,1306,4.991,1307,0.977,1314,0.977,1318,0.977,1321,1.133,1322,1.133,1323,1.133,1324,1.133,1325,1.133,1326,5.39,1327,3.202,1328,1.133,1329,1.133,1330,1.133,1331,1.133,1332,4.839,1333,5.667,1334,5.228,1335,3.202,1336,4.018,1337,1.133,1338,1.133,1339,1.99,1340,1.133,1341,4.018,1342,1.99,1343,4.604,1344,4.333,1345,1.133,1346,1.133,1347,4.333,1348,4.018,1349,1.99,1350,5.786,1351,2.662,1352,2.662,1353,1.133,1354,3.202,1355,1.133,1356,3.646,1357,1.99,1358,1.99,1359,1.99,1360,1.99,1361,1.133,1362,1.133,1363,1.133,1364,1.133,1365,1.133,1366,1.133,1367,1.133,1368,1.99,1369,4.604,1370,1.99,1371,1.99,1372,1.99,1373,1.133,1374,1.99,1375,3.202,1376,1.99,1377,2.662,1378,1.133,1379,1.133,1380,1.133,1381,1.133,1382,2.662,1383,1.133,1384,1.133,1385,1.133,1386,1.133,1387,1.133,1388,2.662,1389,1.133,1390,1.133,1391,1.133,1392,1.133,1393,1.133,1394,1.99,1395,1.133,1396,1.133,1397,1.133,1398,1.99,1399,1.133,1400,1.133,1401,1.133,1402,1.133,1403,1.133,1404,1.133,1405,1.133,1406,1.133,1407,1.133,1408,1.133,1409,1.133,1410,1.133,1411,1.133,1412,1.133,1413,1.133,1414,1.133,1415,1.133,1416,1.133,1417,1.133,1418,1.133,1419,1.133,1420,1.133,1421,1.133,1422,1.133,1423,1.133,1424,1.133,1425,1.133,1426,4.333,1427,1.133,1428,1.133,1429,4.604,1430,1.133,1431,1.133,1432,1.133,1433,1.133,1434,1.133,1435,1.99,1436,1.133,1437,1.133,1438,1.133,1439,1.133,1440,1.133,1441,1.133,1442,1.133,1443,1.133,1444,1.133,1445,1.133,1446,1.133,1447,1.133,1448,1.133,1449,1.133,1450,1.133,1451,1.133,1452,1.133,1453,1.133,1454,1.133,1455,1.133,1456,1.133,1457,1.133,1458,1.133,1459,1.133,1460,1.133,1461,1.133,1462,1.133,1463,1.133,1464,1.133,1465,1.133,1466,1.133,1467,1.133,1468,1.133,1469,1.133,1470,1.133,1471,1.133,1472,1.133,1473,1.133,1474,1.133,1475,1.133,1476,1.133,1477,1.99,1478,1.133,1479,1.133,1480,1.133,1481,1.133]]],"invertedIndex":[["",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":663,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"entities/Restaurant.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0'})@column({type",{"_index":813,"title":{},"body":{"entities/Restaurant.html":{}}}],["0.0.1",{"_index":1307,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["0.14.1",{"_index":1229,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1240,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":1242,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1206,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1202,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1168,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1169,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1170,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1171,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1199,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1201,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1207,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":811,"title":{},"body":{"entities/Restaurant.html":{}}}],["000",{"_index":812,"title":{},"body":{"entities/Restaurant.html":{}}}],["010",{"_index":969,"title":{},"body":{"entities/User.html":{}}}],["03",{"_index":674,"title":{},"body":{"entities/Reservation.html":{},"entities/Restaurant.html":{}}}],["09:00",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.11.13",{"_index":1235,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1234,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":1231,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":848,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["10.1.13",{"_index":1265,"title":{},"body":{"index.html":{}}}],["10.3.13",{"_index":1279,"title":{},"body":{"index.html":{}}}],["10.3.13/winx64",{"_index":1277,"title":{},"body":{"index.html":{}}}],["100",{"_index":964,"title":{},"body":{"entities/User.html":{}}}],["1000",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["100000})@column({type",{"_index":533,"title":{},"body":{"entities/Menu.html":{}}}],["1001",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1002",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1003",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1004",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1005",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100_000",{"_index":555,"title":{},"body":{"entities/Menu.html":{}}}],["11",{"_index":805,"title":{},"body":{"entities/Restaurant.html":{},"index.html":{}}}],["11.0.0",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":970,"title":{},"body":{"entities/User.html":{}}}],["13",{"_index":675,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{},"overview.html":{}}}],["13:00",{"_index":690,"title":{},"body":{"entities/Reservation.html":{}}}],["13:00'})@column({type",{"_index":681,"title":{},"body":{"entities/Reservation.html":{}}}],["14:51:15",{"_index":826,"title":{},"body":{"entities/Restaurant.html":{}}}],["14:51:15'})@createdatecolumn",{"_index":806,"title":{},"body":{"entities/Restaurant.html":{}}}],["14:51:15'})@updatedatecolumn",{"_index":820,"title":{},"body":{"entities/Restaurant.html":{}}}],["15",{"_index":1305,"title":{},"body":{"overview.html":{}}}],["15:00",{"_index":691,"title":{},"body":{"entities/Reservation.html":{}}}],["15:00'})@column({type",{"_index":676,"title":{},"body":{"entities/Reservation.html":{}}}],["1741672686205",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d",{"_index":1164,"title":{},"body":{"injectables/UtilService.html":{}}}],["1})@apioperation({summary",{"_index":568,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["1})@column({type",{"_index":545,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["1})@primarygeneratedcolumn",{"_index":671,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["1})@useguards(checkownerguard)@roles(['undefined'])@delete(':restaurantid",{"_index":855,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["1})@useguards(checkownerguard)@roles(['undefined'])@patch(':restaurantid",{"_index":861,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["2",{"_index":764,"title":{},"body":{"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["20",{"_index":981,"title":{},"body":{"entities/User.html":{}}}],["200",{"_index":319,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"miscellaneous/variables.html":{}}}],["2000",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2001",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2002",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2003",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2004",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2005",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2006",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2007",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2008",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2009",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2010",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201].includes(status",{"_index":320,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["2025",{"_index":673,"title":{},"body":{"entities/Reservation.html":{},"entities/Restaurant.html":{}}}],["24",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["255",{"_index":527,"title":{},"body":{"entities/Menu.html":{}}}],["3",{"_index":765,"title":{},"body":{"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{}}}],["3.13.0",{"_index":1238,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3002",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3306",{"_index":1289,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["3})@apiquery({name",{"_index":846,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["4",{"_index":766,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["4.0.1",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1245,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4000",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4001",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4002",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["409",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":692,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"overview.html":{}}}],["5.1.1",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":517,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["500",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5678",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["5678'})@column({type",{"_index":971,"title":{},"body":{"entities/User.html":{}}}],["5m",{"_index":1162,"title":{},"body":{"injectables/UtilService.html":{}}}],["5})@column({type",{"_index":667,"title":{},"body":{"entities/Reservation.html":{}}}],["6",{"_index":1304,"title":{},"body":{"overview.html":{}}}],["60",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["7.8.1",{"_index":1241,"title":{},"body":{"dependencies.html":{}}}],["8080",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.2",{"_index":1236,"title":{},"body":{"dependencies.html":{}}}],["_oxbfyihmsm7saf7zkvm3fnsi",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["_res",{"_index":248,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["access",{"_index":1299,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1159,"title":{},"body":{"injectables/UtilService.html":{}}}],["alias",{"_index":1180,"title":{},"body":{"coverage.html":{}}}],["alloworigins",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":371,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"entities/Reservation.html":{}}}],["anyof",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1257,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@apioperation({summary",{"_index":709,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apibodywithmodel",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apibodywithmodel({emailvalidatedto",{"_index":997,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibodywithmodel({phonenumbervalidatedto",{"_index":1004,"title":{},"body":{"controllers/UsersController.html":{}}}],["apibodywithmodel({updatemenudto",{"_index":583,"title":{},"body":{"controllers/MenusController.html":{}}}],["apibodywithmodel({updaterestaurantdto",{"_index":859,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apibodywithmodel({useridvalidatedto",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiextramodels(...extramodels",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(createclass",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(model",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pickmodel",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apioperation",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{}}}],["apiparam",{"_index":591,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["apiparam({name",{"_index":567,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["apiproperty",{"_index":507,"title":{},"body":{"classes/LoginDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["apiproperty({type",{"_index":501,"title":{},"body":{"classes/LoginDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["apiquery",{"_index":865,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponse",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiresponsesearchmodel",{"_index":863,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsesearchmodel({findallresponse",{"_index":843,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithcasemodel",{"_index":586,"title":{},"body":{"controllers/MenusController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsewithcasemodel({createmenudto",{"_index":564,"title":{},"body":{"controllers/MenusController.html":{}}}],["apiresponsewithmodel",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsewithmodel({createrestaurantresponse",{"_index":839,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({loginresponse",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({logoutresponse",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({refreshresponse",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({restaurant",{"_index":850,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({signupresponse",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({validateemailresponse",{"_index":995,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({validatephoneresponse",{"_index":1002,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({validateuseridresponse",{"_index":1009,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply(restaurantexistsmiddleware",{"_index":899,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["applydecorators",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(apiresponse",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(setmetadata('roles",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":22,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":13,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argsrequired",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":657,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["argumentshost",{"_index":417,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":602,"title":{},"body":{"controllers/MenusController.html":{},"injectables/ParseArrayOrOnePipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(createmenudto",{"_index":610,"title":{},"body":{"controllers/MenusController.html":{}}}],["array.isarray(model",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":661,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["assignment.git",{"_index":1271,"title":{},"body":{"index.html":{}}}],["async",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/guard/role.guard",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guard/roles.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["auth/login",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login'})@apibearerauth()@apioperation({summary",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login'})@apibodywithmodel({logindto",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout'})@apibearerauth()@apioperation({summary",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["authcontroller",{"_index":94,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":32,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1310,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":256,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["authorization.replace(/^bearer\\s/i",{"_index":261,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["bad",{"_index":436,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["badrequest",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["badrequestexception(errorprotocol",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["bcrypt",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":258,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"index.html":{}}}],["bearerparsermiddleware",{"_index":47,"title":{"injectables/BearerParserMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["bearerparsermiddleware).forroutes('*api",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["blanc",{"_index":525,"title":{},"body":{"entities/Menu.html":{}}}],["body",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["body(parsearrayoronepipe",{"_index":609,"title":{},"body":{"controllers/MenusController.html":{}}}],["boolean",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"guards/RoleGuard.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brew",{"_index":1294,"title":{},"body":{"index.html":{}}}],["bulkmenus",{"_index":643,"title":{},"body":{"injectables/MenusService.html":{}}}],["bulkmenus.map",{"_index":646,"title":{},"body":{"injectables/MenusService.html":{}}}],["callhandler",{"_index":783,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["canactivate",{"_index":282,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":286,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["cascade",{"_index":543,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["case",{"_index":268,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["catch",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catch(exception",{"_index":415,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["category",{"_index":358,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"entities/Restaurant.html":{}}}],["cause",{"_index":913,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["check",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkduplicatedemail",{"_index":989,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedemail(@body",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedemail(emaildto",{"_index":993,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber",{"_index":990,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber(@body",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber(phonedto",{"_index":1001,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid",{"_index":991,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid(@body",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid(useriddto",{"_index":1008,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkownerguard",{"_index":279,"title":{"guards/CheckOwnerGuard.html":{}},"body":{"guards/CheckOwnerGuard.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["chinese",{"_index":802,"title":{},"body":{"entities/Restaurant.html":{}}}],["choco",{"_index":1281,"title":{},"body":{"index.html":{}}}],["ci",{"_index":1272,"title":{},"body":{"index.html":{}}}],["class",{"_index":16,"title":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/LoginDto.html":{},"classes/ResponseFormat.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["clone",{"_index":1269,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":304,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":306,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_providers",{"_index":305,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":452,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_loggermodule_providers",{"_index":453,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_menusmodule",{"_index":625,"title":{},"body":{"modules/MenusModule.html":{},"overview.html":{}}}],["cluster_menusmodule_providers",{"_index":626,"title":{},"body":{"modules/MenusModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule",{"_index":747,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_providers",{"_index":748,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule",{"_index":884,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_exports",{"_index":887,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_imports",{"_index":886,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["cluster_restaurantsmodule_providers",{"_index":885,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1064,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1065,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1066,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_utilmodule",{"_index":1125,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["cluster_utilmodule_exports",{"_index":1127,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["cluster_utilmodule_providers",{"_index":1126,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["code",{"_index":332,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["column",{"_index":551,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["column({type",{"_index":526,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["common",{"_index":343,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["common.service",{"_index":309,"title":{},"body":{"modules/CommonModule.html":{}}}],["common/common.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["common/common.service",{"_index":88,"title":{},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/TypeormService.html":{},"injectables/UtilService.html":{}}}],["common/decorators/api.body.with.model",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/decorators/api.response.search.model",{"_index":864,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["common/decorators/api.response.with.case.model",{"_index":587,"title":{},"body":{"controllers/MenusController.html":{}}}],["common/decorators/api.response.with.model",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/variables/commonconf",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["common/variables/databaseconf",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypeormService.html":{}}}],["common/variables/environment",{"_index":483,"title":{},"body":{"injectables/LoggerService.html":{}}}],["common/variables/secretconf",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["common/variables/swaggerconf",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["commonconf",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["commonconfig",{"_index":91,"title":{},"body":{"injectables/AppService.html":{}}}],["commonconfig.version",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["commonmodule",{"_index":33,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["commonoption",{"_index":89,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["commonresponseformat",{"_index":311,"title":{"interfaces/CommonResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["commonservice",{"_index":85,"title":{"injectables/CommonService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"injectables/TypeormService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["compareinputpasswordwith",{"_index":1132,"title":{},"body":{"injectables/UtilService.html":{}}}],["compareinputpasswordwith(message",{"_index":1136,"title":{},"body":{"injectables/UtilService.html":{}}}],["comparepassword",{"_index":1071,"title":{},"body":{"injectables/UsersService.html":{}}}],["comparepassword(userid",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["compression",{"_index":1230,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["configname",{"_index":349,"title":{},"body":{"injectables/CommonService.html":{}}}],["configservice",{"_index":340,"title":{},"body":{"injectables/CommonService.html":{}}}],["configtype",{"_index":350,"title":{},"body":{"injectables/CommonService.html":{}}}],["configurable",{"_index":498,"title":{},"body":{"injectables/LoggerService.html":{}}}],["configure",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["configure(consumer",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["conflict",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":1091,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errorprotocol",{"_index":1104,"title":{},"body":{"injectables/UsersService.html":{}}}],["console[level].bind",{"_index":496,"title":{},"body":{"injectables/LoggerService.html":{}}}],["const",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["constructor(commonservice",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["constructor(configservice",{"_index":339,"title":{},"body":{"injectables/CommonService.html":{}}}],["constructor(customconfig",{"_index":937,"title":{},"body":{"injectables/TypeormService.html":{}}}],["constructor(logger",{"_index":412,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["constructor(menurepository",{"_index":632,"title":{},"body":{"injectables/MenusService.html":{}}}],["constructor(private",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{}}}],["constructor(reflector",{"_index":918,"title":{},"body":{"guards/RoleGuard.html":{}}}],["constructor(repository",{"_index":831,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["constructor(reservationrepository",{"_index":753,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["constructor(restaurantrepository",{"_index":283,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["constructor(status",{"_index":399,"title":{},"body":{"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["constructor(userrepository",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["consumer",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["consumer.apply(loggermiddleware",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":289,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/LoggerService.html":{},"injectables/ResponseInterceptor.html":{},"guards/RoleGuard.html":{}}}],["context.constructor.name",{"_index":489,"title":{},"body":{"injectables/LoggerService.html":{}}}],["context.getclass",{"_index":927,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":926,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":294,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/ResponseInterceptor.html":{},"guards/RoleGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":791,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('menus",{"_index":604,"title":{},"body":{"controllers/MenusController.html":{}}}],["controller('reservations",{"_index":730,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('restaurants",{"_index":871,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["controller('users",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["cookie",{"_index":1232,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookiewrongtype",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count",{"_index":1101,"title":{},"body":{"injectables/UsersService.html":{}}}],["coverage",{"_index":1166,"title":{"coverage.html":{}},"body":{}}],["create",{"_index":559,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":708,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["create(restaurantid",{"_index":563,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["create(userid",{"_index":756,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{}}}],["createbulk",{"_index":631,"title":{},"body":{"injectables/MenusService.html":{}}}],["createbulk(restaurantid",{"_index":636,"title":{},"body":{"injectables/MenusService.html":{}}}],["createclass",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":510,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":520,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["createddata",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["createddata.id",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["createhashedpassword",{"_index":1133,"title":{},"body":{"injectables/UtilService.html":{}}}],["createhashedpassword(message",{"_index":1139,"title":{},"body":{"injectables/UtilService.html":{}}}],["createhmac('sha256",{"_index":1147,"title":{},"body":{"injectables/UtilService.html":{}}}],["createmenudto",{"_index":353,"title":{"classes/CreateMenuDto.html":{}},"body":{"classes/CreateMenuDto.html":{},"classes/CreateRestaurantDto.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["createmenudto.map((menu",{"_index":645,"title":{},"body":{"injectables/MenusService.html":{}}}],["createreservationdto",{"_index":365,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["createreservationdto.amount",{"_index":770,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["createreservationwithphonedto",{"_index":375,"title":{"classes/CreateReservationWithPhoneDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["createrestaurantdto",{"_index":378,"title":{"classes/CreateRestaurantDto.html":{}},"body":{"classes/CreateRestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["createrestaurantdto})@apibearerauth()@apioperation({summary",{"_index":860,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["createrestaurantresponse",{"_index":872,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["createtoken",{"_index":1134,"title":{},"body":{"injectables/UtilService.html":{}}}],["createtoken(undefined",{"_index":1141,"title":{},"body":{"injectables/UtilService.html":{}}}],["createtypeormoptions",{"_index":936,"title":{},"body":{"injectables/TypeormService.html":{}}}],["createuserdto",{"_index":386,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1108,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.userid",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{}}}],["crypto",{"_index":1145,"title":{},"body":{"injectables/UtilService.html":{}}}],["ctx",{"_index":423,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":426,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":425,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["cuisine",{"_index":825,"title":{},"body":{"entities/Restaurant.html":{}}}],["cuisine'})@column({type",{"_index":803,"title":{},"body":{"entities/Restaurant.html":{}}}],["curl",{"_index":1274,"title":{},"body":{"index.html":{}}}],["customconfig",{"_index":939,"title":{},"body":{"injectables/TypeormService.html":{}}}],["customer",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":1287,"title":{},"body":{"index.html":{}}}],["data",{"_index":799,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":344,"title":{},"body":{"injectables/CommonService.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconf",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":34,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseoption",{"_index":942,"title":{},"body":{"injectables/TypeormService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datasource(typeormoption",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":519,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["date.now",{"_index":795,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["datetime",{"_index":679,"title":{},"body":{"entities/Reservation.html":{}}}],["dayjs",{"_index":314,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"dependencies.html":{}}}],["dayjs().format('hh:mm.ss.sss",{"_index":499,"title":{},"body":{"injectables/LoggerService.html":{}}}],["dayjs().format('yyyy",{"_index":326,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["db_host",{"_index":1183,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_name",{"_index":1184,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_pass",{"_index":1185,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_user",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":328,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["debug",{"_index":457,"title":{},"body":{"injectables/LoggerService.html":{}}}],["declarations",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["default",{"_index":276,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["delete",{"_index":588,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":743,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["delete(':menuid",{"_index":621,"title":{},"body":{"controllers/MenusController.html":{}}}],["delete(':restaurantid",{"_index":881,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["delete('me",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedat",{"_index":511,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":522,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["dependencies",{"_index":23,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["description",{"_index":360,"title":{},"body":{"classes/CreateMenuDto.html":{},"entities/Menu.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["detail",{"_index":334,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{}}}],["development",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["digest('base64",{"_index":1150,"title":{},"body":{"injectables/UtilService.html":{}}}],["docker",{"_index":1285,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1297,"title":{},"body":{"index.html":{}}}],["dropschema",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto/create",{"_index":596,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":597,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":1290,"title":{},"body":{"index.html":{}}}],["email",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["emaildto",{"_index":1000,"title":{},"body":{"controllers/UsersController.html":{}}}],["emaildto?.email",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["emailvalidatedto",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["entities",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/menu.entity",{"_index":364,"title":{},"body":{"classes/CreateMenuDto.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{}}}],["entities/reservation.entity",{"_index":374,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["entities/restaurant.entity",{"_index":867,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{}}}],["entities/user.entity",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":508,"title":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":977,"title":{},"body":{"entities/User.html":{}}}],["error",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["error.message",{"_index":267,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["errorcode",{"_index":431,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["errorprotocol",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["errorprotocol.errorcode",{"_index":440,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["errorprotocol.message",{"_index":441,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["errortype",{"_index":421,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["example",{"_index":502,"title":{},"body":{"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":419,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.cause",{"_index":433,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":410,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:16",{"_index":413,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:19",{"_index":418,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":432,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":430,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionfilter",{"_index":411,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionformat",{"_index":434,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionresponseformat",{"_index":331,"title":{"classes/ExceptionResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["executioncontext",{"_index":287,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/ResponseInterceptor.html":{},"guards/RoleGuard.html":{}}}],["exists.middleware",{"_index":896,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["exists.middleware.ts",{"_index":830,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{}}}],["exists.middleware.ts:15",{"_index":833,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["exists.middleware.ts:9",{"_index":832,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["expired",{"_index":272,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["expiresin",{"_index":1161,"title":{},"body":{"injectables/UtilService.html":{}}}],["export",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["exports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["express",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":356,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["extendsmodel",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels.length",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels.push(usemodel",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswidxnlcklkijoidgvzdhvzzxixiiwizw1hawwioij0zxn0mublegftcgxllmnvbsisinjvbguiojesinbob25lijoimdewlteymzqtnty3ocisimlhdci6mtc0mtg0nti2oswizxhwijoxnzqxodq1nty5lcjpc3mioijiaxrszxn0yxvyyw50in0.xekaapjvzufiwcdu5",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["findall",{"_index":560,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findall(@param('restaurantid",{"_index":613,"title":{},"body":{"controllers/MenusController.html":{}}}],["findall(page",{"_index":842,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["findall(restaurantid",{"_index":571,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["findallresponse",{"_index":874,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findone",{"_index":561,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":738,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findone(@param('menuid",{"_index":616,"title":{},"body":{"controllers/MenusController.html":{}}}],["findone(@param('restaurantid",{"_index":877,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findone(id",{"_index":716,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findone(menuid",{"_index":574,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["findone(restaurantid",{"_index":849,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findonebyuserid",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyuserid(userid",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionsselect",{"_index":1092,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["findoptionswhere",{"_index":1093,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["forbidden",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroutes('restaurants/:restaurantid/*api",{"_index":900,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["founduser",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":446,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1247,"title":{"miscellaneous/functions.html":{}},"body":{}}],["get(':id",{"_index":737,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get(':menuid",{"_index":615,"title":{},"body":{"controllers/MenusController.html":{}}}],["get(':restaurantid",{"_index":852,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["get('me",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('version",{"_index":7,"title":{},"body":{"controllers/AppController.html":{}}}],["getconfig",{"_index":338,"title":{},"body":{"injectables/CommonService.html":{}}}],["getconfig(configname",{"_index":342,"title":{},"body":{"injectables/CommonService.html":{}}}],["getme",{"_index":992,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getme(@req",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["getme(req",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["getme(usertokendata",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["getschemapath(createclass",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pickmodel",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(usemodel",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getserverversion",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettimestamp",{"_index":481,"title":{},"body":{"injectables/LoggerService.html":{}}}],["getting",{"_index":1253,"title":{"index.html":{}},"body":{}}],["git",{"_index":1268,"title":{},"body":{"index.html":{}}}],["global",{"_index":308,"title":{},"body":{"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/UtilModule.html":{}}}],["globalexceptionfilter",{"_index":408,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["guard",{"_index":278,"title":{"guards/CheckOwnerGuard.html":{},"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["guard/check",{"_index":868,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["hashedpassword",{"_index":1105,"title":{},"body":{"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["header",{"_index":11,"title":{},"body":{"controllers/AppController.html":{}}}],["hh:mm:ss.sss",{"_index":329,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["hit",{"_index":1256,"title":{},"body":{"index.html":{}}}],["hitrestaurant",{"_index":1158,"title":{},"body":{"injectables/UtilService.html":{}}}],["home",{"_index":1263,"title":{},"body":{"index.html":{}}}],["host",{"_index":416,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":424,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["hs256",{"_index":1160,"title":{},"body":{"injectables/UtilService.html":{}}}],["http://:/api",{"_index":1296,"title":{},"body":{"index.html":{}}}],["http://:/docs",{"_index":1298,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":420,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["httponly",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://archive.mariadb.org/mariadb",{"_index":1276,"title":{},"body":{"index.html":{}}}],["https://community.chocolatey.org/packages/mariadb/10.3.13",{"_index":1284,"title":{},"body":{"index.html":{}}}],["https://github.com/kkn1125/hit",{"_index":1270,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/MenusController.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.bad_request",{"_index":439,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.created",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":492,"title":{},"body":{"injectables/LoggerService.html":{}}}],["icons",{"_index":458,"title":{},"body":{"injectables/LoggerService.html":{}}}],["id",{"_index":301,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["implements",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ParseArrayOrOnePipe.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{}}}],["import",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["imports",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":1255,"title":{"index.html":{}},"body":{}}],["infer",{"_index":352,"title":{},"body":{"injectables/CommonService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["injectable",{"_index":81,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["injectables",{"_index":82,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"overview.html":{}}}],["injectrepository",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(menu",{"_index":642,"title":{},"body":{"injectables/MenusService.html":{}}}],["injectrepository(reservation",{"_index":763,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["injectrepository(restaurant",{"_index":293,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{}}}],["injectrepository(user",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["inputpassword",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":1282,"title":{},"body":{"index.html":{}}}],["installmariadb",{"_index":1273,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":429,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["int",{"_index":534,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["intercept",{"_index":780,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":782,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["interface",{"_index":310,"title":{"interfaces/CommonResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["invalid",{"_index":269,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["invalidtimerange",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isarray",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isclass",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iscorrectpassword",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdev",{"_index":1211,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isduplicatedby",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["isduplicatedby(whereoption",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{}}}],["isexistsargs",{"_index":1152,"title":{},"body":{"injectables/UtilService.html":{}}}],["isglobal",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["ismatchrole",{"_index":930,"title":{},"body":{"guards/RoleGuard.html":{}}}],["isoutput",{"_index":459,"title":{},"body":{"injectables/LoggerService.html":{}}}],["issuer",{"_index":1157,"title":{},"body":{"injectables/UtilService.html":{}}}],["istest",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["items",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonwebtoken",{"_index":255,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"dependencies.html":{}}}],["jwt",{"_index":254,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["jwt.sign",{"_index":1155,"title":{},"body":{"injectables/UtilService.html":{}}}],["jwt.verify",{"_index":263,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["jwtcreate",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtexpired",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtmalformed",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtserverexception",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtwrongsignature",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["length",{"_index":516,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["level",{"_index":490,"title":{},"body":{"injectables/LoggerService.html":{}}}],["level.touppercase",{"_index":497,"title":{},"body":{"injectables/LoggerService.html":{}}}],["levels",{"_index":460,"title":{},"body":{"injectables/LoggerService.html":{}}}],["license",{"_index":1308,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":1319,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:8080",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":382,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"entities/Restaurant.html":{}}}],["log",{"_index":461,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":414,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["logger.service",{"_index":455,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger.setcontext(this",{"_index":790,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["logger/logger.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger.service",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["loggermiddleware",{"_index":67,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermodule",{"_index":35,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":39,"title":{"injectables/LoggerService.html":{}},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(res",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":102,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.userid",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresponse",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["logmethod",{"_index":471,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logout",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@res",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutresponse",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["lunch",{"_index":531,"title":{},"body":{"entities/Menu.html":{}}}],["mac",{"_index":1293,"title":{},"body":{"index.html":{}}}],["main",{"_index":554,"title":{},"body":{"entities/Menu.html":{}}}],["main'})@column({type",{"_index":514,"title":{},"body":{"entities/Menu.html":{}}}],["malformed",{"_index":274,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["manytoone",{"_index":552,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["manytoone(undefined",{"_index":541,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["map",{"_index":787,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":797,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["mariadb",{"_index":1264,"title":{},"body":{"index.html":{}}}],["mariadb:10.3.13",{"_index":1292,"title":{},"body":{"index.html":{}}}],["mariadbapi",{"_index":1295,"title":{},"body":{"index.html":{}}}],["matchroles",{"_index":917,"title":{},"body":{"guards/RoleGuard.html":{}}}],["matchroles(roles",{"_index":922,"title":{},"body":{"guards/RoleGuard.html":{}}}],["maxage",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["menu",{"_index":363,"title":{"entities/Menu.html":{}},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menu.dto",{"_index":385,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{}}}],["menu.dto.ts",{"_index":355,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["menu.entity",{"_index":550,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{}}}],["menu.entity.ts",{"_index":694,"title":{},"body":{"entities/ReservationMenu.html":{},"coverage.html":{}}}],["menu.entity.ts:10",{"_index":696,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:14",{"_index":699,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:18",{"_index":702,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:23",{"_index":701,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:26",{"_index":698,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.id",{"_index":647,"title":{},"body":{"injectables/MenusService.html":{}}}],["menu.reservationmenus",{"_index":697,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.restaurant",{"_index":815,"title":{},"body":{"entities/Restaurant.html":{}}}],["menuid",{"_index":577,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/ReservationMenu.html":{}}}],["menurepository",{"_index":634,"title":{},"body":{"injectables/MenusService.html":{}}}],["menus",{"_index":558,"title":{},"body":{"controllers/MenusController.html":{},"entities/Restaurant.html":{}}}],["menus.controller",{"_index":628,"title":{},"body":{"modules/MenusModule.html":{}}}],["menus.service",{"_index":599,"title":{},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{}}}],["menus/menus.module",{"_index":892,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["menuscontroller",{"_index":556,"title":{"controllers/MenusController.html":{}},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{},"coverage.html":{}}}],["menusmodule",{"_index":624,"title":{"modules/MenusModule.html":{}},"body":{"modules/MenusModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["menusservice",{"_index":598,"title":{"injectables/MenusService.html":{}},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"coverage.html":{},"overview.html":{}}}],["message",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":485,"title":{},"body":{"injectables/LoggerService.html":{}}}],["metadata",{"_index":656,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"dependencies.html":{}}}],["method",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["middleware/bearer",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/logger.middleware",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/restaurant",{"_index":895,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["middlewareconsumer",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["miscellaneous",{"_index":1246,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{}}],["mm",{"_index":327,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["model",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model.constructor.tostring().match(/function",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model.constructor.tostring().startswith('class",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model[0",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modelname",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modelprops",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":21,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["modules",{"_index":1301,"title":{"modules.html":{}},"body":{}}],["mustpositive",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1237,"title":{},"body":{"dependencies.html":{}}}],["mysql_root_password",{"_index":1291,"title":{},"body":{"index.html":{}}}],["name",{"_index":359,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"index.html":{}}}],["naming",{"_index":1243,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestinterceptor",{"_index":786,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nestjs/common",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommonService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":891,"title":{},"body":{"modules/RestaurantsModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":952,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":253,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["nestmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["new",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":249,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"miscellaneous/variables.html":{}}}],["next.handle().pipe",{"_index":796,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nextfunction",{"_index":250,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["node.js",{"_index":1258,"title":{},"body":{"index.html":{}}}],["nomatchownrestaurant",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nomatchroles",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nomatchuser",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["norefreshcookie",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notallowedpasttime",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfound",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception(errorprotocol",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["notion",{"_index":1300,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1260,"title":{},"body":{"index.html":{}}}],["null",{"_index":827,"title":{},"body":{"entities/Restaurant.html":{}}}],["number",{"_index":333,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/ExceptionResponseFormat.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["number.isnan(restaurantid",{"_index":298,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["o",{"_index":1275,"title":{},"body":{"index.html":{}}}],["object",{"_index":317,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object.assign(createreservationdto",{"_index":768,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["object.defineproperty(this",{"_index":494,"title":{},"body":{"injectables/LoggerService.html":{}}}],["object.entries(model).map(([k",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(model[0]).map(([k",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(modelprops)[0",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(models).map(([summary",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(usemodel).map(([k",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.fromentries",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.keys(usertokendata).every((item",{"_index":1153,"title":{},"body":{"injectables/UtilService.html":{}}}],["object.keys(value).length",{"_index":665,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["object>(modelprops",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":785,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"guards/RoleGuard.html":{}}}],["ok",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["omit",{"_index":1142,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["omittype",{"_index":957,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["omittype(createuserdto",{"_index":956,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["one.pipe",{"_index":603,"title":{},"body":{"controllers/MenusController.html":{}}}],["one.pipe.ts",{"_index":653,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"coverage.html":{}}}],["one.pipe.ts:11",{"_index":658,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["oneof",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":553,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":538,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["options",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orm",{"_index":1251,"title":{},"body":{"miscellaneous/functions.html":{}}}],["overview",{"_index":1303,"title":{"overview.html":{}},"body":{}}],["owner.guard",{"_index":593,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["owner.guard.ts",{"_index":281,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"coverage.html":{}}}],["owner.guard.ts:15",{"_index":284,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["owner.guard.ts:21",{"_index":288,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["p",{"_index":1288,"title":{},"body":{"index.html":{}}}],["package",{"_index":1218,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["packages/mariadb",{"_index":1278,"title":{},"body":{"index.html":{}}}],["page",{"_index":712,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pagination",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pagination.page",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pagination.total",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationtype",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":589,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["param('id",{"_index":741,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["param('menuid",{"_index":619,"title":{},"body":{"controllers/MenusController.html":{}}}],["param('restaurantid",{"_index":608,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["parsearrayoronepipe",{"_index":600,"title":{"injectables/ParseArrayOrOnePipe.html":{}},"body":{"controllers/MenusController.html":{},"injectables/ParseArrayOrOnePipe.html":{},"coverage.html":{}}}],["parser",{"_index":1233,"title":{},"body":{"dependencies.html":{}}}],["parser.middleware",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["parser.middleware.ts",{"_index":244,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["parser.middleware.ts:14",{"_index":246,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["parser.middleware.ts:17",{"_index":251,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["partialtype",{"_index":947,"title":{},"body":{"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{}}}],["partialtype(createmenudto",{"_index":946,"title":{},"body":{"classes/UpdateMenuDto.html":{}}}],["partialtype(createreservationdto",{"_index":949,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createrestaurantdto",{"_index":951,"title":{},"body":{"classes/UpdateRestaurantDto.html":{}}}],["passthrough",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":590,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":740,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["patch(':menuid",{"_index":618,"title":{},"body":{"controllers/MenusController.html":{}}}],["patch(':restaurantid",{"_index":879,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["patch('me",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["pathname",{"_index":792,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["path}?page=${pagination.next",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path}?page=${pagination.prev",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":316,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["perpage",{"_index":713,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"miscellaneous/functions.html":{}}}],["phone",{"_index":376,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateUserDto.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["phone'].includes(item",{"_index":1154,"title":{},"body":{"injectables/UtilService.html":{}}}],["phonedto",{"_index":1007,"title":{},"body":{"controllers/UsersController.html":{}}}],["phonedto?.phone",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["phonenumbervalidatedto",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["pick",{"_index":994,"title":{},"body":{"controllers/UsersController.html":{}}}],["pickmodel",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pickmodel.constructor.tostring().match(/function",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pickmodel.constructor.tostring().startswith('class",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["picktype",{"_index":362,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["picktype(createuserdto",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["picktype(menu",{"_index":357,"title":{},"body":{"classes/CreateMenuDto.html":{}}}],["picktype(reservation",{"_index":368,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{}}}],["picktype(restaurant",{"_index":381,"title":{},"body":{"classes/CreateRestaurantDto.html":{}}}],["picktype(user",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["pipe/parse",{"_index":601,"title":{},"body":{"controllers/MenusController.html":{}}}],["pipetransform",{"_index":660,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["pkg.version",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":1188,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["pos",{"_index":605,"title":{},"body":{"controllers/MenusController.html":{}}}],["pos')@apibodywithmodel({createmenudto",{"_index":566,"title":{},"body":{"controllers/MenusController.html":{}}}],["post",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate/email",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('validate/phone",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('validate/user",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["prev",{"_index":845,"title":{},"body":{"controllers/RestaurantsController.html":{},"miscellaneous/variables.html":{}}}],["price",{"_index":361,"title":{},"body":{"classes/CreateMenuDto.html":{},"entities/Menu.html":{}}}],["primarygeneratedcolumn",{"_index":529,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["private",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{}}}],["process.env.db_host",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_pass",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.port",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_access_token",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_hash_password",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_refresh_token",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":476,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":290,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["properties",{"_index":1306,"title":{"properties.html":{}},"body":{"miscellaneous/variables.html":{}}}],["properties.message",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.method",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.ok",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.path",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.payload",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.status",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.timestamp",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protocol",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["protocol.argsrequired",{"_index":664,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"injectables/UtilService.html":{}}}],["protocol.badrequest",{"_index":438,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["protocol.conflict",{"_index":1103,"title":{},"body":{"injectables/UsersService.html":{}}}],["protocol.jwtcreate",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["protocol.jwtexpired",{"_index":273,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtmalformed",{"_index":275,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtserverexception",{"_index":277,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtwrongsignature",{"_index":271,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.nomatchownrestaurant",{"_index":303,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["protocol.nomatchroles",{"_index":933,"title":{},"body":{"guards/RoleGuard.html":{}}}],["protocol.nomatchuser",{"_index":1100,"title":{},"body":{"injectables/UsersService.html":{}}}],["protocol.norefreshcookie",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["protocol.notfound",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["protocol.requiredlogin",{"_index":928,"title":{},"body":{"guards/RoleGuard.html":{}}}],["protocol.wronglogindata",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["protocol.wrongparamtype",{"_index":299,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["providers",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["query",{"_index":726,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["query('page",{"_index":734,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["query('perpage",{"_index":735,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["qweqq!!1",{"_index":503,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{}}}],["qweqq!!1'})@column({type",{"_index":967,"title":{},"body":{"entities/User.html":{}}}],["readonly",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["record",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ref",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1239,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":919,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refresh",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["refresh(@req",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshresponse",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken(req",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["remove",{"_index":562,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":744,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["remove(@param('menuid",{"_index":622,"title":{},"body":{"controllers/MenusController.html":{}}}],["remove(@param('restaurantid",{"_index":882,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["remove(@req",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":719,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["remove(menuid",{"_index":578,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["remove(req",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(restaurantid",{"_index":854,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["repository",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["req",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["req.cookies.refresh",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["req.headers?.authorization",{"_index":257,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["req.method",{"_index":448,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["req.originalurl",{"_index":450,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["req.params.restaurantid",{"_index":834,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["req.user",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"controllers/ReservationsController.html":{}}}],["request",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["request(400",{"_index":437,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.method",{"_index":427,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.originalurl",{"_index":428,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.params.restaurantid",{"_index":297,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["request.user",{"_index":924,"title":{},"body":{"guards/RoleGuard.html":{}}}],["request.user.id",{"_index":295,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["required",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requiredlogin",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["res.clearcookie('refresh",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.cookie('refresh",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.statuscode",{"_index":793,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["reservation",{"_index":373,"title":{"entities/Reservation.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservation.dto",{"_index":727,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":367,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:17",{"_index":377,"title":{},"body":{"classes/CreateReservationWithPhoneDto.html":{}}}],["reservation.dto.ts:9",{"_index":372,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.reservationmenus",{"_index":700,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["reservation.restaurant",{"_index":818,"title":{},"body":{"entities/Restaurant.html":{}}}],["reservation.user",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["reservationid",{"_index":695,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["reservationmenu",{"_index":537,"title":{"entities/ReservationMenu.html":{}},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservationmenu.reservation",{"_index":539,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{}}}],["reservationmenus",{"_index":512,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{}}}],["reservationrepository",{"_index":755,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservations",{"_index":707,"title":{},"body":{"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["reservations.controller",{"_index":750,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.service",{"_index":729,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations/reservations.module",{"_index":893,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["reservationscontroller",{"_index":705,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationsmodule",{"_index":746,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationsservice",{"_index":728,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reserveendat",{"_index":370,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"entities/Reservation.html":{}}}],["reservestartat",{"_index":369,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"entities/Reservation.html":{}}}],["response",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["response.status(httpstatus.bad_request).json(exceptionformat",{"_index":442,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(status).json(exceptionformat",{"_index":435,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["responseformat",{"_index":315,"title":{"classes/ResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["responseformat(status",{"_index":798,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["responseinterceptor",{"_index":778,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["responseproperty",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restaurant",{"_index":291,"title":{"entities/Restaurant.html":{}},"body":{"guards/CheckOwnerGuard.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"modules/MenusModule.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["restaurant.dto",{"_index":866,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{}}}],["restaurant.dto.ts",{"_index":380,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["restaurant.dto.ts:10",{"_index":383,"title":{},"body":{"classes/CreateRestaurantDto.html":{}}}],["restaurant.id",{"_index":909,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurant.menus",{"_index":542,"title":{},"body":{"entities/Menu.html":{}}}],["restaurant.reservations",{"_index":683,"title":{},"body":{"entities/Reservation.html":{}}}],["restaurant.user",{"_index":975,"title":{},"body":{"entities/User.html":{}}}],["restaurant.userid",{"_index":302,"title":{},"body":{"guards/CheckOwnerGuard.html":{}}}],["restaurantexistsmiddleware",{"_index":828,"title":{"injectables/RestaurantExistsMiddleware.html":{}},"body":{"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantid",{"_index":296,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{}}}],["restaurantrepository",{"_index":285,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["restaurants",{"_index":838,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{}}}],["restaurants'})@apibodywithmodel({createrestaurantdto",{"_index":840,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants.controller",{"_index":894,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["restaurants.service",{"_index":870,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/:restaurantid",{"_index":876,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/:restaurantid'})@apiparam({name",{"_index":851,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants/:restaurantid/menus",{"_index":565,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/entities/reservation",{"_index":549,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{}}}],["restaurants/entities/restaurant.entity",{"_index":292,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"modules/MenusModule.html":{},"entities/Reservation.html":{},"injectables/RestaurantExistsMiddleware.html":{},"entities/User.html":{}}}],["restaurants/guard/check",{"_index":592,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/menus/dto/create",{"_index":384,"title":{},"body":{"classes/CreateRestaurantDto.html":{}}}],["restaurants/menus/entities/menu.entity",{"_index":703,"title":{},"body":{"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["restaurants/reservations/entities/reservation.entity",{"_index":704,"title":{},"body":{"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["restaurants/restaurants.module",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["restaurantscontroller",{"_index":836,"title":{"controllers/RestaurantsController.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantsmodule",{"_index":36,"title":{"modules/RestaurantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurantsservice",{"_index":869,"title":{"injectables/RestaurantsService.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["result",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["returntype",{"_index":1144,"title":{},"body":{"injectables/UtilService.html":{}}}],["role",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["roleguard",{"_index":129,"title":{"guards/RoleGuard.html":{}},"body":{"controllers/AuthController.html":{},"guards/RoleGuard.html":{},"coverage.html":{}}}],["roles",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles()@delete(':id",{"_index":720,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles()@delete('me",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles()@get",{"_index":572,"title":{},"body":{"controllers/MenusController.html":{}}}],["roles()@get(':menuid",{"_index":575,"title":{},"body":{"controllers/MenusController.html":{}}}],["roles()@get('me",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles()@patch('me",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles(['undefined'])@get",{"_index":714,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles(['undefined'])@get(':id",{"_index":717,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles(['undefined'])@patch(':id",{"_index":724,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles(['undefined'])@post",{"_index":710,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["roles([userrole.customer",{"_index":731,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles([userrole.shopkeeper",{"_index":607,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["roles.includes(userrole",{"_index":934,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roles.length",{"_index":929,"title":{},"body":{"guards/RoleGuard.html":{}}}],["routermodule",{"_index":890,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["routermodule.register",{"_index":898,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["run",{"_index":1286,"title":{},"body":{"index.html":{}}}],["run_mode",{"_index":475,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":789,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["samesite",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["sauvignon",{"_index":524,"title":{},"body":{"entities/Menu.html":{}}}],["schema",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schemaobject",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchpagination",{"_index":762,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["searchpagination(orm",{"_index":1250,"title":{},"body":{"miscellaneous/functions.html":{}}}],["secret",{"_index":346,"title":{},"body":{"injectables/CommonService.html":{}}}],["secret_access_token",{"_index":1189,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret_hash_password",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret_refresh_token",{"_index":1191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretconf",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["secretconfig",{"_index":1131,"title":{},"body":{"injectables/UtilService.html":{}}}],["secretoption",{"_index":252,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["secretoption.accesstoken",{"_index":264,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["select",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["selectoption",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["servererror",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serverurl",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setcontext",{"_index":463,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setcontext(context",{"_index":466,"title":{},"body":{"injectables/LoggerService.html":{}}}],["shopkeeper",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":270,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["signupresponse",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["skip",{"_index":912,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["snakenamingstrategy",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ParseArrayOrOnePipe.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["src/.../api.body.with.model.ts",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.search.model.ts",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.with.case.model.ts",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.with.model.ts",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.ts",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../commonconf.ts",{"_index":1312,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../databaseconf.ts",{"_index":1313,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../environment.ts",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.service.ts",{"_index":1315,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../protocol.ts",{"_index":1314,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secret.ts",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secretconf.ts",{"_index":1316,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.ts",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swaggerconf.ts",{"_index":1317,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../typeorm.ts",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userrole.ts",{"_index":1318,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../utilfunction.ts",{"_index":1249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:39",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":87,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:80",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:18",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:61",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":500,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:5",{"_index":506,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":504,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/guard/role.guard.ts",{"_index":916,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/auth/guard/role.guard.ts:14",{"_index":920,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guard/role.guard.ts:17",{"_index":921,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guard/role.guard.ts:48",{"_index":923,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/auth/guard/roles.decorator.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/common.module.ts",{"_index":307,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/common.service.ts",{"_index":337,"title":{},"body":{"injectables/CommonService.html":{},"coverage.html":{}}}],["src/common/common.service.ts:5",{"_index":341,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:8",{"_index":347,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/decorators/api.body.with.model.ts",{"_index":1175,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.search.model.ts",{"_index":1176,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.with.case.model.ts",{"_index":1177,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.with.model.ts",{"_index":1178,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/variables/commonconf.ts",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/databaseconf.ts",{"_index":1181,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/environment.ts",{"_index":1182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/variables/secretconf.ts",{"_index":1194,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/swaggerconf.ts",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/database/database.module.ts",{"_index":394,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/typeorm.service.ts",{"_index":935,"title":{},"body":{"injectables/TypeormService.html":{},"coverage.html":{}}}],["src/database/typeorm.service.ts:10",{"_index":940,"title":{},"body":{"injectables/TypeormService.html":{}}}],["src/database/typeorm.service.ts:7",{"_index":938,"title":{},"body":{"injectables/TypeormService.html":{}}}],["src/logger/logger.module.ts",{"_index":454,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service",{"_index":447,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/logger/logger.service.ts",{"_index":456,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/logger/logger.service.ts:10",{"_index":470,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:11",{"_index":478,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:12",{"_index":473,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:14",{"_index":479,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:15",{"_index":474,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:16",{"_index":472,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:17",{"_index":480,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:18",{"_index":465,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:24",{"_index":467,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:33",{"_index":468,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:49",{"_index":482,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:9",{"_index":477,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/main.ts",{"_index":1198,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/bearer",{"_index":243,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["src/middleware/global",{"_index":409,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/middleware/logger.middleware.ts",{"_index":443,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/middleware/logger.middleware.ts:6",{"_index":444,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/middleware/logger.middleware.ts:9",{"_index":445,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/middleware/repsonse.interceptor.ts",{"_index":779,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/middleware/repsonse.interceptor.ts:13",{"_index":781,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/middleware/repsonse.interceptor.ts:18",{"_index":784,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/restaurants/dto/create",{"_index":379,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"coverage.html":{}}}],["src/restaurants/dto/update",{"_index":950,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["src/restaurants/entities/reservation",{"_index":693,"title":{},"body":{"entities/ReservationMenu.html":{},"coverage.html":{}}}],["src/restaurants/entities/restaurant.entity.ts",{"_index":801,"title":{},"body":{"entities/Restaurant.html":{},"coverage.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:20",{"_index":810,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:24",{"_index":824,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:28",{"_index":804,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:32",{"_index":817,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:36",{"_index":814,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:40",{"_index":807,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:44",{"_index":821,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:48",{"_index":809,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:51",{"_index":823,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:54",{"_index":819,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:57",{"_index":816,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/guard/check",{"_index":280,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"coverage.html":{}}}],["src/restaurants/menus/dto/create",{"_index":354,"title":{},"body":{"classes/CreateMenuDto.html":{},"coverage.html":{}}}],["src/restaurants/menus/dto/update",{"_index":945,"title":{},"body":{"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts",{"_index":509,"title":{},"body":{"entities/Menu.html":{},"coverage.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:18",{"_index":530,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:22",{"_index":546,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:26",{"_index":518,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:30",{"_index":532,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:34",{"_index":536,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:41",{"_index":528,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:44",{"_index":521,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:47",{"_index":548,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:50",{"_index":523,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:55",{"_index":544,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:61",{"_index":540,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/menus.controller.ts",{"_index":557,"title":{},"body":{"controllers/MenusController.html":{},"coverage.html":{}}}],["src/restaurants/menus/menus.controller.ts:44",{"_index":570,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:57",{"_index":573,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:64",{"_index":576,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:73",{"_index":585,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:84",{"_index":580,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.module.ts",{"_index":627,"title":{},"body":{"modules/MenusModule.html":{}}}],["src/restaurants/menus/menus.service.ts",{"_index":630,"title":{},"body":{"injectables/MenusService.html":{},"coverage.html":{}}}],["src/restaurants/menus/menus.service.ts:15",{"_index":637,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:24",{"_index":635,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:32",{"_index":638,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:40",{"_index":639,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:44",{"_index":641,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:48",{"_index":640,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:9",{"_index":633,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/pipe/parse",{"_index":652,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"coverage.html":{}}}],["src/restaurants/middleware/restaurant",{"_index":829,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{}}}],["src/restaurants/reservations/dto/create",{"_index":366,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateReservationWithPhoneDto.html":{},"coverage.html":{}}}],["src/restaurants/reservations/dto/update",{"_index":948,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts",{"_index":666,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:20",{"_index":672,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:24",{"_index":689,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:28",{"_index":685,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:32",{"_index":682,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:36",{"_index":680,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:40",{"_index":677,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:44",{"_index":668,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:47",{"_index":669,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:50",{"_index":686,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:53",{"_index":670,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:56",{"_index":688,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:61",{"_index":684,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:67",{"_index":678,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/reservations.controller.ts",{"_index":706,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:31",{"_index":711,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:49",{"_index":715,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:61",{"_index":718,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:69",{"_index":725,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:80",{"_index":721,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.module.ts",{"_index":749,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/restaurants/reservations/reservations.service.ts",{"_index":752,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/restaurants/reservations/reservations.service.ts:19",{"_index":754,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:35",{"_index":757,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:75",{"_index":758,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:84",{"_index":759,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:88",{"_index":761,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:92",{"_index":760,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/restaurants.controller.ts",{"_index":837,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.controller.ts:111",{"_index":856,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:52",{"_index":841,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:68",{"_index":847,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:87",{"_index":853,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:98",{"_index":862,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.module.ts",{"_index":888,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.module.ts:27",{"_index":889,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.service.ts",{"_index":901,"title":{},"body":{"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.service.ts:11",{"_index":902,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:17",{"_index":903,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:25",{"_index":904,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:37",{"_index":905,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:48",{"_index":907,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:52",{"_index":906,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/users/dto/create",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":955,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":959,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":966,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:23",{"_index":982,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:27",{"_index":965,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":983,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:35",{"_index":968,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:39",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":960,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":979,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":961,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":987,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:102",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:110",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":999,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1006,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:86",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1067,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1069,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:101",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:113",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:123",{"_index":1089,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:138",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1090,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:24",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:74",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:91",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/util/common.ts",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/enums/userrole.ts",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/protocol.ts",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/response.ts",{"_index":312,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["src/util/response.ts:13",{"_index":774,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:14",{"_index":777,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:15",{"_index":773,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:16",{"_index":775,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:17",{"_index":776,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:18",{"_index":772,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:19",{"_index":771,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:42",{"_index":404,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:43",{"_index":406,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:44",{"_index":401,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:45",{"_index":403,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:46",{"_index":405,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:47",{"_index":402,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:48",{"_index":407,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:49",{"_index":400,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/secret.ts",{"_index":1208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/swagger.ts",{"_index":1209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/typeorm.ts",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/util.module.ts",{"_index":1128,"title":{},"body":{"modules/UtilModule.html":{}}}],["src/util/util.service.ts",{"_index":1130,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["src/util/util.service.ts:11",{"_index":1135,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:18",{"_index":1140,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:25",{"_index":1138,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:30",{"_index":1143,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/utilfunction.ts",{"_index":1215,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":794,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["started",{"_index":1254,"title":{"index.html":{}},"body":{}}],["statements",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["strategies",{"_index":1244,"title":{},"body":{"dependencies.html":{}}}],["strict",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["string",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":1165,"title":{},"body":{"injectables/UtilService.html":{}}}],["summary",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["svg",{"_index":1302,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":345,"title":{},"body":{"injectables/CommonService.html":{},"index.html":{}}}],["swagger_url",{"_index":1192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconf",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["swaggeroption",{"_index":1196,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":266,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["synchronize",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":469,"title":{},"body":{"injectables/LoggerService.html":{}}}],["t",{"_index":348,"title":{},"body":{"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerService.html":{},"injectables/UsersService.html":{}}}],["table",{"_index":1217,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":911,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["tap",{"_index":788,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["test",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test1@example.com",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["test1@example.com'})@column({type",{"_index":962,"title":{},"body":{"entities/User.html":{}}}],["testuser1",{"_index":505,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{}}}],["testuser1'})@column({type",{"_index":980,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.getserverversion",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(res",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(req",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.code",{"_index":335,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.commonservice.getconfig('common",{"_index":92,"title":{},"body":{"injectables/AppService.html":{}}}],["this.commonservice.getconfig('secret",{"_index":260,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["this.configservice.get(configname",{"_index":351,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.context",{"_index":488,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.createhashedpassword(message",{"_index":1151,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.customconfig.getconfig('database",{"_index":944,"title":{},"body":{"injectables/TypeormService.html":{}}}],["this.detail",{"_index":336,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.icons[this.levels.indexof(level",{"_index":493,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.isduplicatedby",{"_index":1107,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.isoutput",{"_index":495,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.levels",{"_index":491,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.log",{"_index":800,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["this.logger.log(`request",{"_index":451,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.matchroles(roles",{"_index":931,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.menurepository.delete(menuid",{"_index":651,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.find",{"_index":648,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.findoneby",{"_index":649,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.save",{"_index":644,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.update(menuid",{"_index":650,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menusservice.create(+restaurantid",{"_index":612,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.createbulk(+restaurantid",{"_index":611,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.findall(+restaurantid",{"_index":614,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.findone(+menuid",{"_index":617,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.remove(+menuid",{"_index":623,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.update(+menuid",{"_index":620,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.message",{"_index":330,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.method",{"_index":323,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.ok",{"_index":318,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.path",{"_index":324,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.payload",{"_index":322,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.reflector.get('roles",{"_index":925,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reservationsservice.create",{"_index":732,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findall(restaurantid",{"_index":736,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findone(+id",{"_index":739,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.remove(+id",{"_index":745,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.update(+id",{"_index":742,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.restaurantrepository",{"_index":910,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.findoneby",{"_index":300,"title":{},"body":{"guards/CheckOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.save",{"_index":908,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.softdelete(id",{"_index":915,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.update(id",{"_index":914,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantsservice.create(req.user.id",{"_index":873,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.findall(+page",{"_index":875,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.findone(+restaurantid",{"_index":878,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.remove(+restaurantid",{"_index":883,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.update(+restaurantid",{"_index":880,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.secretconfig",{"_index":1146,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.accesstoken",{"_index":1156,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.password",{"_index":1148,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.refreshtoken",{"_index":1163,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.status",{"_index":321,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.timestamp",{"_index":325,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"classes/ResponseFormat.html":{}}}],["this.update",{"_index":486,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.userrepository",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.countby(whereoption",{"_index":1102,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(createuserdto",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softdelete(id",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userselectoption",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.comparepassword",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getme(req.user",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isduplicatedby",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(req.user.id",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(req.user.id",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.utilservice.compareinputpasswordwith",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.utilservice.createhashedpassword",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.utilservice.createhashedpassword(message",{"_index":1106,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.utilservice.createtoken(user",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["thrownoexistsentitywithselectby",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["thrownoexistsentitywithselectby(orm",{"_index":1252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["thrownoexistsentitywithselectby(this.repository",{"_index":835,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["thrownoexistsentitywithselectby(this.userrepository",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["thrownoexistsuserwithselectby",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{}}}],["timestamp",{"_index":313,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["timezone",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["title",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["todo",{"_index":767,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["token",{"_index":259,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"index.html":{}}}],["total",{"_index":844,"title":{},"body":{"controllers/RestaurantsController.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":654,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["transform(value",{"_index":655,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["transformer",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"injectables/CommonService.html":{},"injectables/LoggerService.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{}}}],["type",{"_index":484,"title":{},"body":{"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1311,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":487,"title":{},"body":{"injectables/LoggerService.html":{},"guards/RoleGuard.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"entities/Menu.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeorm.service",{"_index":396,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([menu",{"_index":629,"title":{},"body":{"modules/MenusModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":751,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["typeormmodule.forfeature([restaurant",{"_index":897,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":397,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":941,"title":{},"body":{"injectables/TypeormService.html":{}}}],["typeormoption",{"_index":1213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormoptionsfactory",{"_index":943,"title":{},"body":{"injectables/TypeormService.html":{}}}],["typeormservice",{"_index":395,"title":{"injectables/TypeormService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/TypeormService.html":{},"coverage.html":{}}}],["typeormsource",{"_index":1214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":953,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["unauthorized",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/RoleGuard.html":{}}}],["unauthorizedexception(errorprotocol",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/RoleGuard.html":{}}}],["undefined",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{}}}],["undefined})@deletedatecolumn",{"_index":808,"title":{},"body":{"entities/Restaurant.html":{}}}],["undefined})@post('validate/email",{"_index":998,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@post('validate/phone",{"_index":1005,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@post('validate/user",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["unique",{"_index":963,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":1309,"title":{},"body":{"properties.html":{}}}],["unsigned",{"_index":535,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["update",{"_index":464,"title":{},"body":{"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@req",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":722,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["update(menuid",{"_index":581,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["update(message",{"_index":1149,"title":{},"body":{"injectables/UtilService.html":{}}}],["update(req",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(restaurantid",{"_index":857,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["updatedat",{"_index":513,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":547,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["updatemenudto",{"_index":582,"title":{"classes/UpdateMenuDto.html":{}},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["updatereservationdto",{"_index":723,"title":{"classes/UpdateReservationDto.html":{}},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updaterestaurantdto",{"_index":858,"title":{"classes/UpdateRestaurantDto.html":{}},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":954,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.email",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.phone",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.userid",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":449,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["use",{"_index":245,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["use(req",{"_index":247,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["useclass",{"_index":398,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["useguards(checkownerguard",{"_index":606,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["useguards(checkownerguard)@roles(['undefined'])@delete(':menuid",{"_index":579,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(checkownerguard)@roles(['undefined'])@patch(':menuid",{"_index":584,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(checkownerguard)@roles(['undefined'])@post",{"_index":569,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(roleguard",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["useguards(roleguard)@roles()@post('refresh",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["usemodel",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":173,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1094,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":958,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.id",{"_index":733,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["user.password",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phone",{"_index":769,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["user.reservations",{"_index":687,"title":{},"body":{"entities/Reservation.html":{}}}],["user.restaurants",{"_index":822,"title":{},"body":{"entities/Restaurant.html":{}}}],["user.role",{"_index":932,"title":{},"body":{"guards/RoleGuard.html":{}}}],["userdata",{"_index":262,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["userhashedpassword",{"_index":1137,"title":{},"body":{"injectables/UtilService.html":{}}}],["userid",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"guards/CheckOwnerGuard.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["useriddto",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{}}}],["useriddto?.userid",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["useridvalidatedto",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["username",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":594,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":988,"title":{},"body":{"controllers/UsersController.html":{}}}],["users'})@apioperation({summary",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1068,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{}}}],["users/users.module",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["users/validate/email",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/email'})@apioperation({summary",{"_index":996,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/phone",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/phone'})@apioperation({summary",{"_index":1003,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/userid",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/userid'})@apioperation({summary",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":986,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userselectoption",{"_index":1070,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersmodule",{"_index":37,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":169,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertokendata",{"_index":265,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["usertokendata.id",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["util",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{}}}],["util.service",{"_index":1129,"title":{},"body":{"modules/UtilModule.html":{}}}],["util/enums/userrole",{"_index":595,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"entities/User.html":{}}}],["util/protocol",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/CheckOwnerGuard.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ParseArrayOrOnePipe.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{}}}],["util/response",{"_index":422,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["util/util.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["util/util.service",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["util/utilfunction",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["utilmodule",{"_index":38,"title":{"modules/UtilModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UtilModule.html":{},"modules.html":{},"overview.html":{}}}],["utilservice",{"_index":183,"title":{"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["v10.9.0",{"_index":1261,"title":{},"body":{"index.html":{}}}],["v20.11.1",{"_index":1259,"title":{},"body":{"index.html":{}}}],["v3.0.8",{"_index":1267,"title":{},"body":{"index.html":{}}}],["validateemailresponse",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatephoneresponse",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["validateuseridresponse",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":1228,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":659,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":662,"title":{},"body":{"injectables/ParseArrayOrOnePipe.html":{}}}],["varchar",{"_index":515,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["variable",{"_index":1173,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1320,"title":{"miscellaneous/variables.html":{}},"body":{}}],["version",{"_index":1193,"title":{},"body":{"coverage.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version=10.3.13",{"_index":1283,"title":{},"body":{"index.html":{}}}],["vitest",{"_index":1266,"title":{},"body":{"index.html":{}}}],["void",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{}}}],["warn",{"_index":462,"title":{},"body":{"injectables/LoggerService.html":{}}}],["whereoption",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["windows",{"_index":1262,"title":{},"body":{"index.html":{}}}],["winx64.msi",{"_index":1280,"title":{},"body":{"index.html":{}}}],["wronglogindata",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrongparamtype",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getServerVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getServerVersion\n                        \n                    \n                \n            \n            \n                \n                        \n                    getServerVersion()\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @Get('version')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('version')\n  getServerVersion(): string {\n    return this.appService.getServerVersion();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    모듈\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUtilModule\n\nUtilModule\n\nAppModule -->\n\nUtilModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nAppModule -->\n\nLoggerService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            AppService\n                        \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            RestaurantsModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UtilModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/app.module.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { BearerParserMiddleware } from '@middleware/bearer-parser.middleware';\nimport secretConf from '@common/variables/secretConf';\nimport swaggerConf from '@common/variables/swaggerConf';\nimport { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CommonModule } from './common/common.module';\nimport commonConf from './common/variables/commonConf';\nimport databaseConf from './common/variables/databaseConf';\nimport { DatabaseModule } from './database/database.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { LoggerService } from './logger/logger.service';\nimport { LoggerMiddleware } from './middleware/logger.middleware';\nimport { RestaurantsModule } from './restaurants/restaurants.module';\nimport { UsersModule } from './users/users.module';\nimport { UtilModule } from './util/util.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [commonConf, databaseConf, secretConf, swaggerConf],\n    }),\n    CommonModule,\n    DatabaseModule,\n    UsersModule,\n    RestaurantsModule,\n    AuthModule,\n    DatabaseModule,\n    LoggerModule,\n    UtilModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, LoggerService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware, BearerParserMiddleware).forRoutes('*api');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                getServerVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        getServerVersion\n                        \n                    \n                \n            \n            \n                \ngetServerVersion()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/app.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommonService } from './common/common.service';\nimport { CommonOption } from './common/variables/commonConf';\n\n@Injectable()\nexport class AppService {\n  constructor(private readonly commonService: CommonService) {}\n\n  getServerVersion(): string {\n    const commonConfig = this.commonService.getConfig('common');\n    return commonConfig.version;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                접두어\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(res: Response, loginDto: LoginDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({LoginResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/login'})@ApiBodyWithModel({LoginDto: })@ApiOperation({summary: '로그인'})@Post('login')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({LogoutResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/logout'})@ApiBearerAuth()@ApiOperation({summary: '로그아웃'})@Post('logout')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     { result: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(req: Request, res: Response)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({RefreshResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/login'})@ApiBearerAuth()@ApiOperation({summary: '토큰 리프레시'})@UseGuards(RoleGuard)@Roles()@Post('refresh')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { RoleGuard } from '@auth/guard/role.guard';\nimport { Roles } from '@auth/guard/roles.decorator';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport {\n  Body,\n  Controller,\n  HttpStatus,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { Request, Response } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiResponseWithModel(\n    {\n      LoginResponse: {\n        accessToken:\n          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcklkIjoidGVzdHVzZXIxIiwiZW1haWwiOiJ0ZXN0MUBleGFtcGxlLmNvbSIsInJvbGUiOjEsInBob25lIjoiMDEwLTEyMzQtNTY3OCIsImlhdCI6MTc0MTg0NTI2OSwiZXhwIjoxNzQxODQ1NTY5LCJpc3MiOiJIaXRSZXN0YXVyYW50In0.XEkAAPJvzufiwCdU5-_oXbfyIHmSm7saF7zkVm3FNSI',\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/login',\n    },\n  )\n  @ApiBodyWithModel({ LoginDto })\n  @ApiOperation({ summary: '로그인' })\n  @Post('login')\n  login(@Res({ passthrough: true }) res: Response, @Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto, res);\n  }\n\n  @ApiResponseWithModel(\n    { LogoutResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/logout',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '로그아웃' })\n  @Post('logout')\n  logout(@Res({ passthrough: true }) res: Response) {\n    this.authService.logout(res);\n    return { result: true };\n  }\n\n  @ApiResponseWithModel(\n    {\n      RefreshResponse: {\n        accessToken:\n          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcklkIjoidGVzdHVzZXIxIiwiZW1haWwiOiJ0ZXN0MUBleGFtcGxlLmNvbSIsInJvbGUiOjEsInBob25lIjoiMDEwLTEyMzQtNTY3OCIsImlhdCI6MTc0MTg0NTI2OSwiZXhwIjoxNzQxODQ1NTY5LCJpc3MiOiJIaXRSZXN0YXVyYW50In0.XEkAAPJvzufiwCdU5-_oXbfyIHmSm7saF7zkVm3FNSI',\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/login',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '토큰 리프레시' })\n  @UseGuards(RoleGuard)\n  @Roles()\n  @Post('refresh')\n  refresh(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n    return this.authService.refreshToken(req, res);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    모듈\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { UsersService } from '@users/users.service';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [AuthController],\n  providers: [AuthService, UsersService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(userRepository: Repository, usersService: UsersService, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/auth/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { UsersService } from '@users/users.service';\nimport { Protocol } from '@util/protocol';\nimport { UtilService } from '@util/util.service';\nimport { throwNoExistsEntityWithSelectBy } from '@util/utilFunction';\nimport { Request, Response } from 'express';\nimport { Repository } from 'typeorm';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly usersService: UsersService,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async login(loginDto: LoginDto, res: Response) {\n    await throwNoExistsEntityWithSelectBy(this.userRepository, {\n      userId: loginDto.userId,\n    });\n\n    const user = await this.usersService.comparePassword(\n      loginDto.userId,\n      loginDto.password,\n    );\n\n    const message = loginDto.userId + loginDto.password;\n    const isCorrectPassword = this.utilService.compareInputPasswordWith(\n      message,\n      user.password,\n    );\n\n    if (!isCorrectPassword) {\n      const errorProtocol = Protocol.WrongLoginData;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    try {\n      const { accessToken, refreshToken } = this.utilService.createToken(user);\n      res.cookie('refresh', refreshToken, {\n        httpOnly: true,\n        sameSite: 'strict',\n        maxAge: 1 * 24 * 60 * 60 * 1000,\n      });\n      return { accessToken };\n    } catch (error) {\n      const errorProtocol = Protocol.JwtCreate;\n      throw new BadRequestException(errorProtocol);\n    }\n  }\n\n  logout(res: Response) {\n    res.clearCookie('refresh');\n  }\n\n  async refreshToken(req: Request, res: Response) {\n    if (!req.cookies.refresh) {\n      const errorProtocol = Protocol.NoRefreshCookie;\n      throw new UnauthorizedException(errorProtocol);\n    }\n    const user = req.user;\n    const foundUser = await this.usersService.findOne(user.id);\n    if (!foundUser) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol);\n    }\n    const { accessToken, refreshToken } = this.utilService.createToken(user);\n    res.cookie('refresh', refreshToken, {\n      httpOnly: true,\n      sameSite: 'strict',\n      maxAge: 1 * 24 * 60 * 60 * 1000,\n    });\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/BearerParserMiddleware.html":{"url":"injectables/BearerParserMiddleware.html","title":"injectable - BearerParserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BearerParserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/bearer-parser.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/bearer-parser.middleware.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, _res, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/bearer-parser.middleware.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                _res\n                                            \n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { SecretOption } from '@common/variables/secretConf';\nimport {\n  BadRequestException,\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Protocol } from '@util/protocol';\nimport { NextFunction, Request } from 'express';\nimport * as jwt from 'jsonwebtoken';\n\n@Injectable()\nexport class BearerParserMiddleware implements NestMiddleware {\n  constructor(private readonly commonService: CommonService) {}\n\n  use(req: Request, _res, next: NextFunction) {\n    const authorization = req.headers?.authorization; // 헤더에서 `Bearer token` 정보 가져오기\n    const secretOption = this.commonService.getConfig('secret');\n    if (authorization) {\n      const accessToken = authorization.replace(/^bearer\\s/i, '');\n      try {\n        const userData = jwt.verify(\n          accessToken,\n          secretOption.accessToken,\n        ) as UserTokenData;\n        req.user = userData;\n      } catch (error: any) {\n        switch (error.message) {\n          case 'invalid signature': {\n            const errorProtocol = Protocol.JwtWrongSignature;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          case 'jwt expired': {\n            const errorProtocol = Protocol.JwtExpired;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          case 'jwt malformed': {\n            const errorProtocol = Protocol.JwtMalFormed;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          default: {\n            const errorProtocol = Protocol.JwtServerException;\n            throw new BadRequestException(errorProtocol);\n          }\n        }\n      }\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"guards/CheckOwnerGuard.html":{"url":"guards/CheckOwnerGuard.html","title":"guard - CheckOwnerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    가드\n    CheckOwnerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            파일\n            \n            \n                src/restaurants/guard/check-owner.guard.ts\n            \n\n\n\n\n\n\n                \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    생성자\n        \n            \n                \n                    \nconstructor(restaurantRepository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/guard/check-owner.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        restaurantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/guard/check-owner.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  BadRequestException,\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class CheckOwnerGuard implements CanActivate {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly restaurantRepository: Repository,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const userId = request.user.id;\n    const restaurantId = +request.params.restaurantId;\n\n    if (Number.isNaN(restaurantId)) {\n      const errorProtocol = Protocol.WrongParamType;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    const restaurant = await this.restaurantRepository.findOneBy({\n      id: restaurantId,\n    });\n\n    if (!restaurant) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol);\n    }\n\n    if (restaurant.userId !== userId) {\n      const errorProtocol = Protocol.NoMatchOwnRestaurant;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    모듈\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nCommonService \n\nCommonService \n\n\n\nCommonModule\n\nCommonModule\n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            CommonService\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            CommonService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\n\n@Global()\n@Module({\n  providers: [CommonService],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"interfaces/CommonResponseFormat.html":{"url":"interfaces/CommonResponseFormat.html","title":"interface - CommonResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  인터페이스\n  \n  CommonResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n        \n            색인\n            \n                \n                    \n                        \n                            속성\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            ok\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                속성\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ok\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ok:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.payload = payload;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/CommonService.html":{"url":"injectables/CommonService.html","title":"injectable - CommonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/common/common.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                getConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/common/common.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n            \n                \ngetConfig(configName: \"common\" | \"database\" | \"swagger\" | \"secret\")\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/common.service.ts:8\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                configName\n                                            \n                                                        \"common\" | \"database\" | \"swagger\" | \"secret\"\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     ConfigType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService, ConfigType } from '@nestjs/config';\n\n@Injectable()\nexport class CommonService {\n  constructor(private readonly configService: ConfigService) {}\n\n  getConfig any>(\n    configName: 'common' | 'database' | 'swagger' | 'secret',\n  ): ConfigType {\n    return this.configService.get(configName, {\n      infer: true,\n    }) as ConfigType;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateMenuDto.html":{"url":"classes/CreateMenuDto.html","title":"class - CreateMenuDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateMenuDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/dto/create-menu.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Menu, [\n  'category',\n  'name',\n  'description',\n  'price',\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Menu } from '../entities/menu.entity';\n\nexport class CreateMenuDto extends PickType(Menu, [\n  'category',\n  'name',\n  'description',\n  'price',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'amount',\n])\n            \n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                menu\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     number[]\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/dto/create-reservation.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Reservation } from '../entities/reservation.entity';\n\nexport class CreateReservationDto extends PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'amount',\n]) {\n  menu!: number[];\n}\nexport class CreateReservationWithPhoneDto extends PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'phone',\n  'amount',\n]) {\n  menu!: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateReservationWithPhoneDto.html":{"url":"classes/CreateReservationWithPhoneDto.html","title":"class - CreateReservationWithPhoneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateReservationWithPhoneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'phone',\n  'amount',\n])\n            \n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                menu\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     number[]\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/dto/create-reservation.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Reservation } from '../entities/reservation.entity';\n\nexport class CreateReservationDto extends PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'amount',\n]) {\n  menu!: number[];\n}\nexport class CreateReservationWithPhoneDto extends PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'phone',\n  'amount',\n]) {\n  menu!: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateRestaurantDto.html":{"url":"classes/CreateRestaurantDto.html","title":"class - CreateRestaurantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateRestaurantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/dto/create-restaurant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Restaurant, [\n  'category',\n  'name',\n  'location',\n])\n            \n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                menu\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         CreateMenuDto[]\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/dto/create-restaurant.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { CreateMenuDto } from '@restaurants/menus/dto/create-menu.dto';\n\nexport class CreateRestaurantDto extends PickType(Restaurant, [\n  'category',\n  'name',\n  'location',\n]) {\n  menu!: CreateMenuDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(User, [\n  'userId',\n  'phone',\n  'email',\n  'username',\n  'password',\n  'role',\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { User } from '@users/entities/user.entity';\n\nexport class CreateUserDto extends PickType(User, [\n  'userId',\n  'phone',\n  'email',\n  'username',\n  'password',\n  'role',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    모듈\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeormService } from './typeorm.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useClass: TypeormService,\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/ExceptionResponseFormat.html":{"url":"classes/ExceptionResponseFormat.html","title":"class - ExceptionResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  ExceptionResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                            CommonResponseFormat\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                    선택적\n                                detail\n                            \n                            \n                                message\n                            \n                            \n                                method\n                            \n                            \n                                ok\n                            \n                            \n                                path\n                            \n                            \n                                status\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(status: HttpStatus, code: number, method: string, message: any, path: string, detail?)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/response.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        detail\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            네\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            선택적\n                        detail\n                        \n                    \n                \n            \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     string | object\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         boolean\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     HttpStatus\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.payload = payload;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/global-exception.filter.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/global-exception.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/global-exception.filter.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from '@logger/logger.service';\nimport {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ErrorType, Protocol } from '@util/protocol';\nimport { ExceptionResponseFormat } from '@util/response';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class GlobalExceptionFilter\n  implements ExceptionFilter\n{\n  constructor(private readonly logger: LoggerService) {}\n\n  catch(exception: T, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const method = request.method;\n    const path = request.originalUrl;\n\n    /* HttpException 지정 프로토콜 처리 */\n    if (exception instanceof HttpException) {\n      const status = exception.getStatus();\n\n      const { errorCode, message } = exception.getResponse() as ErrorType;\n      const detail = exception.cause;\n\n      const exceptionFormat = new ExceptionResponseFormat(\n        status,\n        errorCode,\n        method,\n        message,\n        path,\n        detail,\n      );\n\n      response.status(status).json(exceptionFormat);\n      return;\n    }\n\n    /* 그 외 예상치 못한 예외 일괄 Bad Request(400) 처리 */\n    const errorProtocol = Protocol.BadRequest;\n    const exceptionFormat = new ExceptionResponseFormat(\n      HttpStatus.BAD_REQUEST,\n      errorProtocol.errorCode,\n      method,\n      errorProtocol.message,\n      path,\n    );\n    response.status(HttpStatus.BAD_REQUEST).json(exceptionFormat);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/logger.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request } from 'express';\nimport { LoggerService } from 'src/logger/logger.service';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  constructor(private readonly logger: LoggerService) {}\n\n  use(req: Request, res: any, next: () => void) {\n    const method = req.method;\n    const url = req.originalUrl;\n    this.logger.log(`Request [${method}] ${url} -->`);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    모듈\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService\n\nLoggerService\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Global()\n@Module({\n  providers: [LoggerService],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                context\n                            \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                    Private\n                                icons\n                            \n                            \n                                info\n                            \n                            \n                                    Private\n                                    Readonly\n                                isOutput\n                            \n                            \n                                    Private\n                                levels\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                setContext\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            접근자\n                        \n                    \n                    \n                        \n                            \n                                \n                                    timestamp\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/logger/logger.service.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        setContext\n                        \n                    \n                \n            \n            \n                \nsetContext(context: T)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/logger/logger.service.ts:24\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/logger/logger.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : 'System'\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        icons\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : ['📄', '✨', '🐛', '⚠️', '❌'] as const\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isOutput\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : RUN_MODE !== 'production'\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levels\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : ['log', 'info', 'debug', 'warn', 'error'] as const\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        접근자\n    \n        \n            \n                \n                    \n                        \n                        timestamp\n                    \n                \n\n                \n                    \n                        gettimestamp()\n                    \n                \n                            \n                                \n                                    다음에 정의됨 src/logger/logger.service.ts:49\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { RUN_MODE } from '@common/variables/environment';\nimport { Injectable } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ntype LogMethod = (...messages: any) => void;\n\n@Injectable()\nexport class LoggerService {\n  private readonly isOutput = RUN_MODE !== 'production';\n  private context: string = 'System';\n  private levels = ['log', 'info', 'debug', 'warn', 'error'] as const;\n  private icons = ['📄', '✨', '🐛', '⚠️', '❌'] as const;\n\n  log!: LogMethod;\n  info!: LogMethod;\n  error!: LogMethod;\n  warn!: LogMethod;\n  debug!: LogMethod;\n\n  constructor() {\n    this.update();\n  }\n\n  setContext(context: T) {\n    if (typeof context === 'string') {\n      this.context = context;\n    } else {\n      this.context = context.constructor.name;\n    }\n    this.update();\n  }\n\n  update() {\n    for (const level of this.levels) {\n      const icon = this.icons[this.levels.indexOf(level)];\n      Object.defineProperty(this, level, {\n        get() {\n          if (!this.isOutput) return () => {};\n          return console[level].bind(\n            this,\n            `${icon} [${level.toUpperCase()}] ${this.timestamp} --`,\n          ) as LogMethod;\n        },\n        configurable: true,\n      });\n    }\n  }\n\n  private get timestamp() {\n    return dayjs().format('HH:mm.ss.SSS');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'qweQQ!!1'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'testuser1'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/auth/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ type: String, example: 'testuser1' })\n  userId!: string;\n\n  @ApiProperty({ type: String, example: 'qweQQ!!1' })\n  password!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Menu.html":{"url":"entities/Menu.html","title":"entity - Menu","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Menu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/entities/menu.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                reservationMenus\n                            \n                            \n                                    \n                                restaurant\n                            \n                            \n                                    \n                                    \n                                restaurantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'main'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: '홍게살/아스파라거스/레몬, Sauvignon Blanc(소비뇽 블랑)'})@Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Lunch 와인 페어링'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 100000})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationMenus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     ReservationMenu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservationMenu => reservationMenu.reservation)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurant\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, restaurant => restaurant.menus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:47\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ReservationMenu } from '@restaurants/entities/reservation-menu.entity';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Menu {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  restaurantId!: number;\n\n  @ApiProperty({ type: String, example: 'main' })\n  @Column({ type: 'varchar', length: 50 })\n  category!: string;\n\n  @ApiProperty({ type: String, example: 'Lunch 와인 페어링' })\n  @Column({ type: 'varchar', length: 50 })\n  name!: string;\n\n  @ApiProperty({ type: Number, example: 100_000 })\n  @Column({ type: 'int', unsigned: true })\n  price!: number;\n\n  @ApiProperty({\n    type: Number,\n    example: '홍게살/아스파라거스/레몬, Sauvignon Blanc(소비뇽 블랑)',\n  })\n  @Column({ type: 'varchar', length: 255 })\n  description!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => Restaurant, (restaurant) => restaurant.menus, {\n    cascade: true,\n  })\n  restaurant!: Restaurant;\n\n  @OneToMany(\n    () => ReservationMenu,\n    (reservationMenu) => reservationMenu.reservation,\n  )\n  reservationMenus!: ReservationMenu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/MenusController.html":{"url":"controllers/MenusController.html","title":"controller - MenusController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  MenusController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/menus.controller.ts\n        \n\n            \n                접두어\n            \n            \n                menus\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(restaurantId: number, createMenuDto: CreateMenuDto | CreateMenuDto[])\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithCaseModel({CreateMenuDto: undefined}, HttpStatus.CREATED, '/restaurants/:restaurantId/menus', 'POS')@ApiBodyWithModel({CreateMenuDto: })@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiOperation({summary: '식당 메뉴 추가'})@UseGuards(CheckOwnerGuard)@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto | CreateMenuDto[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(restaurantId: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiOperation({summary: '식당 메뉴 전체 조회'})@Roles()@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(menuId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiOperation({summary: '식당 메뉴 상세 조회'})@Roles()@Get(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(menuId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiOperation({summary: '식당 메뉴 제거'})@UseGuards(CheckOwnerGuard)@Roles(['undefined'])@Delete(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(menuId: string, updateMenuDto: UpdateMenuDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBodyWithModel({UpdateMenuDto: })@ApiOperation({summary: '식당 메뉴 수정'})@UseGuards(CheckOwnerGuard)@Roles(['undefined'])@Patch(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateMenuDto\n                                            \n                                                            UpdateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Roles } from '@auth/guard/roles.decorator';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseWithCaseModel } from '@common/decorators/api.response.with.case.model';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { CheckOwnerGuard } from '@restaurants/guard/check-owner.guard';\nimport { UserRole } from '@util/enums/UserRole';\nimport { CreateMenuDto } from './dto/create-menu.dto';\nimport { UpdateMenuDto } from './dto/update-menu.dto';\nimport { MenusService } from './menus.service';\nimport { ParseArrayOrOnePipe } from './pipe/parse-array-or-one.pipe';\n\n@Controller('menus')\nexport class MenusController {\n  constructor(private readonly menusService: MenusService) {}\n\n  @ApiResponseWithCaseModel(\n    {\n      CreateMenuDto: {\n        '개별 추가': { id: 1 },\n        '다중 추가': [{ id: 1 }],\n      },\n    },\n    HttpStatus.CREATED,\n    '/restaurants/:restaurantId/menus',\n    'POS',\n  )\n  @ApiBodyWithModel({ CreateMenuDto })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 메뉴 추가' })\n  @UseGuards(CheckOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Post()\n  create(\n    @Param('restaurantId') restaurantId: number,\n    @Body(ParseArrayOrOnePipe) createMenuDto: CreateMenuDto | CreateMenuDto[],\n  ) {\n    if (Array.isArray(createMenuDto)) {\n      return this.menusService.createBulk(+restaurantId, createMenuDto);\n    }\n    return this.menusService.create(+restaurantId, createMenuDto);\n  }\n\n  @ApiOperation({ summary: '식당 메뉴 전체 조회' })\n  @Roles()\n  @Get()\n  findAll(@Param('restaurantId') restaurantId: number) {\n    return this.menusService.findAll(+restaurantId);\n  }\n\n  @ApiOperation({ summary: '식당 메뉴 상세 조회' })\n  @Roles()\n  @Get(':menuId')\n  findOne(@Param('menuId') menuId: string) {\n    return this.menusService.findOne(+menuId);\n  }\n\n  @ApiBodyWithModel({ UpdateMenuDto })\n  @ApiOperation({ summary: '식당 메뉴 수정' })\n  @UseGuards(CheckOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Patch(':menuId')\n  update(\n    @Param('menuId') menuId: string,\n    @Body() updateMenuDto: UpdateMenuDto,\n  ) {\n    return this.menusService.update(+menuId, updateMenuDto);\n  }\n\n  @ApiOperation({ summary: '식당 메뉴 제거' })\n  @UseGuards(CheckOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Delete(':menuId')\n  remove(@Param('menuId') menuId: string) {\n    return this.menusService.remove(+menuId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/MenusModule.html":{"url":"modules/MenusModule.html","title":"module - MenusModule","body":"\n                   \n\n\n\n\n    모듈\n    MenusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MenusModule\n\n\n\ncluster_MenusModule_providers\n\n\n\n\nMenusService\n\nMenusService\n\n\n\nMenusModule\n\nMenusModule\n\nMenusModule -->\n\nMenusService->MenusModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/menus/menus.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            MenusService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            MenusController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { Menu } from './entities/menu.entity';\nimport { MenusController } from './menus.controller';\nimport { MenusService } from './menus.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Menu, Restaurant])],\n  controllers: [MenusController],\n  providers: [MenusService],\n})\nexport class MenusModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/MenusService.html":{"url":"injectables/MenusService.html","title":"injectable - MenusService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MenusService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/menus.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createBulk\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(menuRepository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/menus/menus.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        menuRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(restaurantId: number, createMenuDto: CreateMenuDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBulk\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBulk(restaurantId: number, createMenuDto: CreateMenuDto[])\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(restaurantId: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(menuId: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(menuId: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(menuId: number, updateMenuDto: UpdateMenuDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateMenuDto\n                                            \n                                                            UpdateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { CreateMenuDto } from './dto/create-menu.dto';\nimport { UpdateMenuDto } from './dto/update-menu.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Menu } from './entities/menu.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class MenusService {\n  constructor(\n    @InjectRepository(Menu)\n    private readonly menuRepository: Repository,\n  ) {}\n\n  async createBulk(restaurantId: number, createMenuDto: CreateMenuDto[]) {\n    const bulkMenus = await this.menuRepository.save(\n      createMenuDto.map((menu) => ({ restaurantId, ...menu })),\n    );\n    return bulkMenus.map(({ id }) => ({\n      id,\n    }));\n  }\n\n  async create(restaurantId: number, createMenuDto: CreateMenuDto) {\n    const menu = await this.menuRepository.save({\n      restaurantId,\n      ...createMenuDto,\n    });\n    return { id: menu.id };\n  }\n\n  findAll(restaurantId: number) {\n    return this.menuRepository.find({\n      where: {\n        restaurantId,\n      },\n    });\n  }\n\n  findOne(menuId: number) {\n    return this.menuRepository.findOneBy({ id: menuId });\n  }\n\n  update(menuId: number, updateMenuDto: UpdateMenuDto) {\n    return this.menuRepository.update(menuId, updateMenuDto);\n  }\n\n  remove(menuId: number) {\n    return this.menuRepository.delete(menuId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ParseArrayOrOnePipe.html":{"url":"injectables/ParseArrayOrOnePipe.html","title":"injectable - ParseArrayOrOnePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseArrayOrOnePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/pipe/parse-array-or-one.pipe.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/pipe/parse-array-or-one.pipe.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common';\nimport { Protocol } from '@util/protocol';\n\n@Injectable()\nexport class ParseArrayOrOnePipe implements PipeTransform {\n  transform(value: any, metadata: ArgumentMetadata) {\n    if (Array.isArray(value)) {\n      if (value.length === 0) {\n        const errorProtocol = Protocol.ArgsRequired;\n        throw new BadRequestException(errorProtocol);\n      }\n    }\n\n    if (Object.keys(value).length === 0) {\n      const errorProtocol = Protocol.ArgsRequired;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/entities/reservation.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                reservationMenus\n                            \n                            \n                                    \n                                    \n                                reserveEndAt\n                            \n                            \n                                    \n                                    \n                                reserveStartAt\n                            \n                            \n                                    \n                                restaurant\n                            \n                            \n                                    \n                                    \n                                restaurantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: 5})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: '2025-03-13 15:00'})@Column({type: 'varchar', length: 13})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationMenus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     ReservationMenu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservationMenu => reservationMenu.reservation)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reserveEndAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: '2025-03-13 15:00'})@Column({type: 'datetime'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reserveStartAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: '2025-03-13 13:00'})@Column({type: 'datetime'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurant\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, restaurant => restaurant.reservations, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         User\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reservations, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { ReservationMenu } from '@restaurants/entities/reservation-menu.entity';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { User } from '@users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Reservation {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  userId!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  restaurantId!: number;\n\n  @ApiProperty({ type: Date, example: '2025-03-13 13:00' })\n  @Column({ type: 'datetime' })\n  reserveStartAt!: Date;\n\n  @ApiProperty({ type: Date, example: '2025-03-13 15:00' })\n  @Column({ type: 'datetime' })\n  reserveEndAt!: Date;\n\n  @ApiProperty({ type: Date, example: '2025-03-13 15:00' })\n  @Column({ type: 'varchar', length: 13 })\n  phone!: string;\n\n  @ApiProperty({ type: Date, example: 5 })\n  @Column({ type: 'int', unsigned: true })\n  amount!: number;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => User, (user) => user.reservations, { cascade: true })\n  user!: User;\n\n  @ManyToOne(() => Restaurant, (restaurant) => restaurant.reservations, {\n    cascade: true,\n  })\n  restaurant!: Restaurant;\n\n  @OneToMany(\n    () => ReservationMenu,\n    (reservationMenu) => reservationMenu.reservation,\n  )\n  reservationMenus!: ReservationMenu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/ReservationMenu.html":{"url":"entities/ReservationMenu.html","title":"entity - ReservationMenu","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  ReservationMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/entities/reservation-menu.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                menu\n                            \n                            \n                                    \n                                    \n                                menuId\n                            \n                            \n                                    \n                                reservation\n                            \n                            \n                                    \n                                    \n                                reservationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/reservation-menu.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Menu\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, menu => menu.reservationMenus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/reservation-menu.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        menuId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/reservation-menu.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, reservation => reservation.reservationMenus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/reservation-menu.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/reservation-menu.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class ReservationMenu {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  menuId!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  reservationId!: number;\n\n  @ManyToOne(() => Reservation, (reservation) => reservation.reservationMenus, {\n    cascade: true,\n  })\n  reservation!: Reservation;\n\n  @ManyToOne(() => Menu, (menu) => menu.reservationMenus, { cascade: true })\n  menu!: Menu;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.controller.ts\n        \n\n            \n                접두어\n            \n            \n                reservations\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: Request, restaurantId: number, createReservationDto: CreateReservationDto | CreateReservationWithPhoneDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 예약 추가'})@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto | CreateReservationWithPhoneDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(restaurantId: number, page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 전체 예약 조회'})@Roles(['undefined'])@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 단건 예약 상세 조회'})@Roles(['undefined'])@Get(':id')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 예약 취소'})@Roles()@Delete(':id')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:80\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateReservationDto: UpdateReservationDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 예약 수정'})@Roles(['undefined'])@Patch(':id')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateReservationDto\n                                            \n                                                            UpdateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Roles } from '@auth/guard/roles.decorator';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Request } from 'express';\nimport {\n  CreateReservationDto,\n  CreateReservationWithPhoneDto,\n} from './dto/create-reservation.dto';\nimport { UpdateReservationDto } from './dto/update-reservation.dto';\nimport { ReservationsService } from './reservations.service';\n\n@Controller('reservations')\nexport class ReservationsController {\n  constructor(private readonly reservationsService: ReservationsService) {}\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 추가' })\n  @Roles([UserRole.Customer])\n  @Post()\n  create(\n    @Req() req: Request,\n    @Param('restaurantId') restaurantId: number,\n    @Body()\n    createReservationDto: CreateReservationDto | CreateReservationWithPhoneDto,\n  ) {\n    const user = req.user;\n    return this.reservationsService.create(\n      +user.id,\n      +restaurantId,\n      createReservationDto,\n    );\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 전체 예약 조회' })\n  @Roles([UserRole.Shopkeeper])\n  @Get()\n  findAll(\n    @Param('restaurantId') restaurantId: number,\n    @Query('page') page: number = 1,\n    @Query('perPage') perPage: number = 1,\n  ) {\n    return this.reservationsService.findAll(restaurantId, +page, +perPage);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 단건 예약 상세 조회' })\n  @Roles([UserRole.Shopkeeper])\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.reservationsService.findOne(+id);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 수정' })\n  @Roles([UserRole.Customer])\n  @Patch(':id')\n  update(\n    @Param('id') id: string,\n    @Body() updateReservationDto: UpdateReservationDto,\n  ) {\n    return this.reservationsService.update(+id, updateReservationDto);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 취소' })\n  @Roles()\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.reservationsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    모듈\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\n\nReservationsService\n\nReservationsService\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { Reservation } from './entities/reservation.entity';\nimport { ReservationsController } from './reservations.controller';\nimport { ReservationsService } from './reservations.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Reservation, User])],\n  controllers: [ReservationsController],\n  providers: [ReservationsService],\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/reservations/reservations.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: number, restaurantId: number, createReservationDto: CreateReservationDto | CreateReservationWithPhoneDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto | CreateReservationWithPhoneDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(restaurantId: number, page: number, perPage: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateReservationDto: UpdateReservationDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateReservationDto\n                                            \n                                                            UpdateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { Protocol } from '@util/protocol';\nimport {\n  searchPagination,\n  throwNoExistsEntityWithSelectBy,\n} from '@util/utilFunction';\nimport dayjs from 'dayjs';\nimport { Repository } from 'typeorm';\nimport {\n  CreateReservationDto,\n  CreateReservationWithPhoneDto,\n} from './dto/create-reservation.dto';\nimport { UpdateReservationDto } from './dto/update-reservation.dto';\nimport { Reservation } from './entities/reservation.entity';\n\n@Injectable()\nexport class ReservationsService {\n  constructor(\n    @InjectRepository(Reservation)\n    private readonly reservationRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /* \n  1. 예약자 존재 여부를 검증한다.\n  2. 예약자 전화번호 입력 없을 시 예약자 정보의 전화번호를 적용한다.\n  3. 예약 인원 음수 입력을 방지한다.\n  4. 예약 일자 과거 입력을 방지한다.\n  5. 예약 종료일자는 시작일자보다 과거일 수 없다.\n  */\n  // TODO: 메뉴(배열) 추가 로직\n  async create(\n    userId: number,\n    restaurantId: number,\n    createReservationDto: CreateReservationDto | CreateReservationWithPhoneDto,\n  ) {\n    const user = await throwNoExistsEntityWithSelectBy(this.userRepository, {\n      id: userId,\n    });\n\n    if (!('phone' in createReservationDto)) {\n      Object.assign(createReservationDto, { phone: user.phone });\n    }\n\n    if (createReservationDto.amount \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/ResponseFormat.html":{"url":"classes/ResponseFormat.html","title":"class - ResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                            CommonResponseFormat\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    선택적\n                                message\n                            \n                            \n                                method\n                            \n                            \n                                ok\n                            \n                            \n                                path\n                            \n                            \n                                payload\n                            \n                            \n                                status\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(status: HttpStatus, method: string, payload: any, path: string, message?: string)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/response.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            네\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            선택적\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         boolean\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     string | object\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     HttpStatus\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.payload = payload;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/repsonse.interceptor.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/repsonse.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/repsonse.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ResponseFormat } from '@util/response';\nimport { Request, Response } from 'express';\nimport { map, Observable, tap } from 'rxjs';\nimport { LoggerService } from '@logger/logger.service';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  constructor(private readonly logger: LoggerService) {\n    logger.setContext(this);\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const req = context.switchToHttp().getRequest();\n    const res = context.switchToHttp().getResponse();\n    const pathname = req.originalUrl;\n    const method = req.method;\n    const status = res.statusCode;\n    const start = Date.now();\n\n    return next.handle().pipe(\n      map((data) => new ResponseFormat(status, method, data, pathname)),\n      tap(() =>\n        this.logger.log(\n          `\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Restaurant.html":{"url":"entities/Restaurant.html","title":"entity - Restaurant","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Restaurant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/entities/restaurant.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                menus\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'chinese cuisine'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '2025-03-11 14:51:15'})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '서울시 00구 00동 000-0'})@Column({type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Menu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, menu => menu.restaurant)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '자금성'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.restaurant)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '2025-03-11 14:51:15'})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         User\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, user => user.restaurants, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { User } from '@users/entities/user.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Restaurant {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  userId!: number;\n\n  @ApiProperty({ type: String, example: 'chinese cuisine' })\n  @Column({ type: 'varchar', length: 50 })\n  category!: string;\n\n  @ApiProperty({ type: String, example: '자금성' })\n  @Column({ type: 'varchar', length: 50 })\n  name!: string;\n\n  @ApiProperty({ type: String, example: '서울시 00구 00동 000-0' })\n  @Column({ type: 'varchar', length: 200 })\n  location!: string;\n\n  @ApiProperty({ type: String, example: '2025-03-11 14:51:15' })\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @ApiProperty({ type: String, example: '2025-03-11 14:51:15' })\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @ApiProperty({ type: String, example: null })\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => User, (user) => user.restaurants, { cascade: true })\n  user!: User;\n\n  @OneToMany(() => Reservation, (reservation) => reservation.restaurant)\n  reservations!: Reservation[];\n\n  @OneToMany(() => Menu, (menu) => menu.restaurant)\n  menus!: Menu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/RestaurantExistsMiddleware.html":{"url":"injectables/RestaurantExistsMiddleware.html","title":"injectable - RestaurantExistsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantExistsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/middleware/restaurant-exists.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/middleware/restaurant-exists.middleware.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, _res, next: () => void)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/middleware/restaurant-exists.middleware.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                _res\n                                            \n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { throwNoExistsEntityWithSelectBy } from '@util/utilFunction';\nimport { Request } from 'express';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class RestaurantExistsMiddleware implements NestMiddleware {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly repository: Repository,\n  ) {}\n\n  async use(req: Request, _res, next: () => void) {\n    const restaurantId = req.params.restaurantId;\n\n    await throwNoExistsEntityWithSelectBy(this.repository, {\n      id: +restaurantId,\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/RestaurantsController.html":{"url":"controllers/RestaurantsController.html","title":"controller - RestaurantsController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  RestaurantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/restaurants.controller.ts\n        \n\n            \n                접두어\n            \n            \n                restaurants\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: Request, createRestaurantDto: CreateRestaurantDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({CreateRestaurantResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/restaurants'})@ApiBodyWithModel({CreateRestaurantDto: })@ApiBearerAuth()@ApiOperation({summary: '식당 정보 추가'})@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createRestaurantDto\n                                            \n                                                            CreateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseSearchModel({FindAllResponse: Restaurant}, '/restaurants', {page: 2, total: 3, prev: 1, next: 3})@ApiQuery({name: 'page', type: Number, example: 1})@ApiOperation({summary: '식당 전체 조회'})@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(restaurantId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({Restaurant: }, {ok: true, status: 200, method: 'GET', path: '/restaurants/:restaurantId'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiOperation({summary: '식당 상세 조회'})@Get(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(restaurantId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '식당 삭제'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@UseGuards(CheckOwnerGuard)@Roles(['undefined'])@Delete(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:111\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(restaurantId: string, updateRestaurantDto: UpdateRestaurantDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBodyWithModel({UpdateRestaurantDto: CreateRestaurantDto})@ApiBearerAuth()@ApiOperation({summary: '식당 정보 수정'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@UseGuards(CheckOwnerGuard)@Roles(['undefined'])@Patch(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateRestaurantDto\n                                            \n                                                            UpdateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Roles } from '@auth/guard/roles.decorator';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseSearchModel } from '@common/decorators/api.response.search.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Request } from 'express';\nimport { CreateRestaurantDto } from './dto/create-restaurant.dto';\nimport { UpdateRestaurantDto } from './dto/update-restaurant.dto';\nimport { Restaurant } from './entities/restaurant.entity';\nimport { CheckOwnerGuard } from './guard/check-owner.guard';\nimport { RestaurantsService } from './restaurants.service';\n\n@Controller('restaurants')\nexport class RestaurantsController {\n  constructor(private readonly restaurantsService: RestaurantsService) {}\n\n  @ApiResponseWithModel(\n    {\n      CreateRestaurantResponse: { id: 1 },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/restaurants',\n    },\n  )\n  @ApiBodyWithModel({ CreateRestaurantDto })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 정보 추가' })\n  @Roles([UserRole.Shopkeeper])\n  @Post()\n  create(\n    @Req() req: Request,\n    @Body() createRestaurantDto: CreateRestaurantDto,\n  ) {\n    return this.restaurantsService.create(req.user.id, createRestaurantDto);\n  }\n\n  @ApiResponseSearchModel({ FindAllResponse: Restaurant }, '/restaurants', {\n    page: 2,\n    total: 3,\n    prev: 1,\n    next: 3,\n  })\n  @ApiQuery({ name: 'page', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 전체 조회' })\n  @Get()\n  findAll(\n    @Query('page') page: number = 1,\n    @Query('perPage') perPage: number = 10,\n  ) {\n    return this.restaurantsService.findAll(+page, +perPage);\n  }\n\n  @ApiResponseWithModel(\n    { Restaurant },\n    {\n      ok: true,\n      status: 200,\n      method: 'GET',\n      path: '/restaurants/:restaurantId',\n    },\n  )\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 상세 조회' })\n  @Get(':restaurantId')\n  findOne(@Param('restaurantId') restaurantId: string) {\n    return this.restaurantsService.findOne(+restaurantId);\n  }\n\n  @ApiBodyWithModel({ UpdateRestaurantDto: CreateRestaurantDto })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 정보 수정' })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @UseGuards(CheckOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Patch(':restaurantId')\n  update(\n    @Param('restaurantId') restaurantId: string,\n    @Body() updateRestaurantDto: UpdateRestaurantDto,\n  ) {\n    return this.restaurantsService.update(+restaurantId, updateRestaurantDto);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 삭제' })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @UseGuards(CheckOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Delete(':restaurantId')\n  remove(@Param('restaurantId') restaurantId: string) {\n    return this.restaurantsService.remove(+restaurantId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/RestaurantsModule.html":{"url":"modules/RestaurantsModule.html","title":"module - RestaurantsModule","body":"\n                   \n\n\n\n\n    모듈\n    RestaurantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_RestaurantsModule_imports\n\n\n\ncluster_RestaurantsModule_exports\n\n\n\n\nMenusModule\n\nMenusModule\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nRestaurantsModule -->\n\nMenusModule->RestaurantsModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nRestaurantsModule -->\n\nReservationsModule->RestaurantsModule\n\n\n\n\n\nRestaurantsService \n\nRestaurantsService \n\nRestaurantsService  -->\n\nRestaurantsModule->RestaurantsService \n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/restaurants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            RestaurantsService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            RestaurantsController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            MenusModule\n                        \n                        \n                            ReservationsModule\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            RestaurantsService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.module.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { RouterModule } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Restaurant } from './entities/restaurant.entity';\nimport { MenusModule } from './menus/menus.module';\nimport { ReservationsModule } from './reservations/reservations.module';\nimport { RestaurantsController } from './restaurants.controller';\nimport { RestaurantsService } from './restaurants.service';\nimport { RestaurantExistsMiddleware } from './middleware/restaurant-exists.middleware';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Restaurant]),\n    RouterModule.register([\n      { path: 'restaurants/:restaurantId', module: MenusModule },\n      { path: 'restaurants/:restaurantId', module: ReservationsModule },\n    ]),\n    MenusModule,\n    ReservationsModule,\n  ],\n  controllers: [RestaurantsController],\n  providers: [RestaurantsService],\n  exports: [RestaurantsService],\n})\nexport class RestaurantsModule implements NestModule {\n  /* 식당 하위 도메인 예약, 메뉴 경로에서 식당 존재 여부를 검증 */\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(RestaurantExistsMiddleware)\n      .forRoutes('restaurants/:restaurantId/*api');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/RestaurantsService.html":{"url":"injectables/RestaurantsService.html","title":"injectable - RestaurantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/restaurants.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(restaurantRepository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/restaurants.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        restaurantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: number, createRestaurantDto: CreateRestaurantDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createRestaurantDto\n                                            \n                                                            CreateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(page: number, perPage: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateRestaurantDto: UpdateRestaurantDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateRestaurantDto\n                                            \n                                                            UpdateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Protocol } from '@util/protocol';\nimport { searchPagination } from '@util/utilFunction';\nimport { Repository } from 'typeorm';\nimport { CreateRestaurantDto } from './dto/create-restaurant.dto';\nimport { UpdateRestaurantDto } from './dto/update-restaurant.dto';\nimport { Restaurant } from './entities/restaurant.entity';\n\n@Injectable()\nexport class RestaurantsService {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly restaurantRepository: Repository,\n  ) {}\n\n  async create(userId: number, createRestaurantDto: CreateRestaurantDto) {\n    const restaurant = await this.restaurantRepository.save({\n      userId,\n      ...createRestaurantDto,\n    });\n    return { id: restaurant.id };\n  }\n\n  findAll(page: number = 1, perPage: number = 10) {\n    return searchPagination(\n      this.restaurantRepository,\n      '/restaurants',\n      {\n        take: perPage,\n        skip: (page - 1) * perPage,\n      },\n      page,\n    );\n  }\n\n  async findOne(id: number) {\n    const restaurant = await this.restaurantRepository.findOneBy({ id });\n    if (!restaurant) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol, {\n        cause: '식당 정보를 찾을 수 없습니다.',\n      });\n    }\n    return restaurant;\n  }\n\n  update(id: number, updateRestaurantDto: UpdateRestaurantDto) {\n    return this.restaurantRepository.update(id, updateRestaurantDto);\n  }\n\n  remove(id: number) {\n    return this.restaurantRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    가드\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            파일\n            \n            \n                src/auth/guard/role.guard.ts\n            \n\n\n\n\n\n\n                \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                    Private\n                                matchRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    생성자\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/auth/guard/role.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/guard/role.guard.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        matchRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    matchRoles(roles: UserRole[], userRole: UserRole)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/guard/role.guard.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                            UserRole[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            UserRole\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const roles =\n      this.reflector.get('roles', context.getHandler()) ||\n      this.reflector.get('roles', context.getClass());\n\n    if (typeof roles === 'undefined') {\n      return true;\n    }\n\n    if (!user) {\n      const errorProtocol = Protocol.RequiredLogin;\n      throw new UnauthorizedException(errorProtocol);\n    }\n\n    if (roles.length === 0) {\n      return true;\n    }\n\n    const isMatchRole = this.matchRoles(roles, user.role);\n    if (!isMatchRole) {\n      const errorProtocol = Protocol.NoMatchRoles;\n      throw new UnauthorizedException(errorProtocol);\n    }\n\n    return true;\n  }\n\n  private matchRoles(roles: UserRole[], userRole: UserRole) {\n    return roles.includes(userRole);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/TypeormService.html":{"url":"injectables/TypeormService.html","title":"injectable - TypeormService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypeormService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/database/typeorm.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(customConfig: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/database/typeorm.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        customConfig\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/database/typeorm.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :     TypeOrmModuleOptions\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { DatabaseOption } from '@common/variables/databaseConf';\nimport { Injectable } from '@nestjs/common';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TypeormService implements TypeOrmOptionsFactory {\n  constructor(private readonly customConfig: CommonService) {}\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return this.customConfig.getConfig('database');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateMenuDto.html":{"url":"classes/UpdateMenuDto.html","title":"class - UpdateMenuDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateMenuDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/dto/update-menu.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateMenuDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMenuDto } from './create-menu.dto';\n\nexport class UpdateMenuDto extends PartialType(CreateMenuDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from './create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateRestaurantDto.html":{"url":"classes/UpdateRestaurantDto.html","title":"class - UpdateRestaurantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateRestaurantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/dto/update-restaurant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRestaurantDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRestaurantDto } from './create-restaurant.dto';\n\nexport class UpdateRestaurantDto extends PartialType(CreateRestaurantDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CreateUserDto, ['role'])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends OmitType(CreateUserDto, ['role']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                restaurants\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'test1@example.com'})@Column({type: 'varchar', unique: true, length: 100})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'qweQQ!!1'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: () => String, example: '010-1234-5678'})@Column({type: 'varchar', unique: true, length: 13})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurants\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, restaurant => restaurant.user)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         UserRole\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: () => UserRole, enum: UserRole, example: 1})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'testuser1'})@Column({type: 'varchar', unique: true, length: 20})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '김윤호'})@Column({type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { UserRole } from '../../util/enums/UserRole';\n\n@Entity()\nexport class User {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: String, example: 'testuser1' })\n  @Column({ type: 'varchar', unique: true, length: 20 })\n  userId!: string;\n\n  @ApiProperty({ type: String, example: 'test1@example.com' })\n  @Column({ type: 'varchar', unique: true, length: 100 })\n  email!: string;\n\n  @ApiProperty({ type: String, example: '김윤호' })\n  @Column({ type: 'varchar', length: 20 })\n  username!: string;\n\n  @ApiProperty({ type: String, example: 'qweQQ!!1' })\n  @Column({ type: 'varchar', length: 50 })\n  password!: string;\n\n  @ApiProperty({ type: () => UserRole, enum: UserRole, example: 1 })\n  @Column({ type: 'int', unsigned: true })\n  role!: UserRole;\n\n  @ApiProperty({ type: () => String, example: '010-1234-5678' })\n  @Column({ type: 'varchar', unique: true, length: 13 })\n  phone!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @OneToMany(() => Restaurant, (restaurant) => restaurant.user)\n  restaurants!: Restaurant[];\n\n  @OneToMany(() => Reservation, (reservation) => reservation.user)\n  reservations!: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                접두어\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedPhoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getMe\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedEmail(emailDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidateEmailResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/email'})@ApiOperation({summary: '이메일 중복 검증'})@ApiBodyWithModel({EmailValidateDto: undefined})@Post('validate/email')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                emailDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedPhoneNumber(phoneDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidatePhoneResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/phone'})@ApiOperation({summary: '전화번호 중복 검증'})@ApiBodyWithModel({PhoneNumberValidateDto: undefined})@Post('validate/phone')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                phoneDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedUserId(userIdDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidateUserIdResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/userId'})@ApiOperation({summary: '사용자 아이디 중복 검증'})@ApiBodyWithModel({UserIdValidateDto: undefined})@Post('validate/user-id')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userIdDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({SignupResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users'})@ApiOperation({summary: '회원가입'})@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(req: Request)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '로그인 회원 정보 조회'})@Roles()@Get('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(req: Request)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '회원 탈퇴'})@Roles()@Delete('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(req: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiBearerAuth()@ApiOperation({summary: '회원 정보 수정'})@Roles()@Patch('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:102\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Roles } from '@auth/guard/roles.decorator';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation, PickType } from '@nestjs/swagger';\nimport { Request } from 'express';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiResponseWithModel(\n    { SignupResponse: PickType(User, ['id']) },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/users',\n    },\n  )\n  @ApiOperation({ summary: '회원가입' })\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiResponseWithModel(\n    { ValidateEmailResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/email',\n    },\n  )\n  @ApiOperation({ summary: '이메일 중복 검증' })\n  @ApiBodyWithModel({ EmailValidateDto: PickType(CreateUserDto, ['email']) })\n  @Post('validate/email')\n  checkDuplicatedEmail(@Body() emailDto: Pick) {\n    return this.usersService.isDuplicatedBy({ email: emailDto?.email });\n  }\n\n  @ApiResponseWithModel(\n    { ValidatePhoneResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/phone',\n    },\n  )\n  @ApiOperation({ summary: '전화번호 중복 검증' })\n  @ApiBodyWithModel({\n    PhoneNumberValidateDto: PickType(CreateUserDto, ['phone']),\n  })\n  @Post('validate/phone')\n  checkDuplicatedPhoneNumber(@Body() phoneDto: Pick) {\n    return this.usersService.isDuplicatedBy({ phone: phoneDto?.phone });\n  }\n\n  @ApiResponseWithModel(\n    { ValidateUserIdResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/userId',\n    },\n  )\n  @ApiOperation({ summary: '사용자 아이디 중복 검증' })\n  @ApiBodyWithModel({ UserIdValidateDto: PickType(CreateUserDto, ['userId']) })\n  @Post('validate/user-id')\n  checkDuplicatedUserId(@Body() userIdDto: Pick) {\n    return this.usersService.isDuplicatedBy({ userId: userIdDto?.userId });\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '로그인 회원 정보 조회' })\n  @Roles()\n  @Get('me')\n  async getMe(@Req() req: Request) {\n    return this.usersService.getMe(req.user);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '회원 정보 수정' })\n  @Roles()\n  @Patch('me')\n  async update(@Req() req: Request, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(req.user.id, updateUserDto);\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '회원 탈퇴' })\n  @Roles()\n  @Delete('me')\n  async remove(@Req() req: Request) {\n    return this.usersService.remove(req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    모듈\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                userSelectOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUserId\n                            \n                            \n                                    Async\n                                getMe\n                            \n                            \n                                    Async\n                                isDuplicatedBy\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(userRepository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/users/users.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(userId: string, inputPassword: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                inputPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(userTokenData: UserTokenData)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userTokenData\n                                            \n                                                            UserTokenData\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isDuplicatedBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDuplicatedBy(whereOption: T)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:50\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                whereOption\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:123\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        userSelectOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n    id: true,\n    userId: true,\n    email: true,\n    phone: true,\n    role: true,\n  }\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/users.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Protocol } from '@util/protocol';\nimport { UtilService } from '@util/util.service';\nimport { FindOptionsSelect, FindOptionsWhere, Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { throwNoExistsEntityWithSelectBy } from '@util/utilFunction';\n\n@Injectable()\nexport class UsersService {\n  userSelectOption = {\n    id: true,\n    userId: true,\n    email: true,\n    phone: true,\n    role: true,\n  };\n\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  /* user's util */\n  // async throwNoExistsUserWithSelectBy(\n  //   whereOption: FindOptionsWhere,\n  //   selectOption?: FindOptionsSelect,\n  // ) {\n  //   const user = await this.userRepository.findOne({\n  //     where: whereOption,\n  //     select: selectOption,\n  //   });\n\n  //   if (!user) {\n  //     const errorProtocol = Protocol.NoMatchUser;\n  //     throw new NotFoundException(errorProtocol);\n  //   }\n\n  //   return user;\n  // }\n\n  async isDuplicatedBy(whereOption: T) {\n    const count = await this.userRepository.countBy(whereOption);\n    const errorProtocol = Protocol.Conflict;\n    if (count > 0) {\n      throw new ConflictException(errorProtocol, 'email이 중복됩니다.');\n    }\n    return { result: true };\n  }\n\n  async comparePassword(userId: string, inputPassword: string) {\n    const user = await throwNoExistsEntityWithSelectBy(this.userRepository, {\n      userId,\n    });\n    const message = userId + inputPassword;\n    const hashedPassword = this.utilService.createHashedPassword(message);\n\n    if (user.password !== hashedPassword) {\n      const errorProtocol = Protocol.WrongLoginData;\n      throw new BadRequestException(errorProtocol);\n    }\n    return user;\n  }\n  /* user's util */\n\n  async create(createUserDto: CreateUserDto) {\n    await this.isDuplicatedBy({ email: createUserDto.email });\n    await this.isDuplicatedBy({ userId: createUserDto.userId });\n    await this.isDuplicatedBy({ phone: createUserDto.phone });\n\n    const hashedPassword = this.utilService.createHashedPassword(\n      createUserDto.userId + createUserDto.password,\n    );\n    createUserDto.password = hashedPassword;\n    const createdData = await this.userRepository.save(createUserDto);\n    return { id: createdData.id };\n  }\n\n  findAll() {\n    return this.userRepository.find();\n  }\n\n  async findOneByUserId(userId: string) {\n    const user = await throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      { userId },\n      this.userSelectOption,\n    );\n\n    return user;\n  }\n\n  async getMe(userTokenData: UserTokenData) {\n    const id = userTokenData.id;\n\n    const user = await throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      { id },\n      this.userSelectOption,\n    );\n\n    return user;\n  }\n\n  async findOne(id: number) {\n    const user = await throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      { id },\n      this.userSelectOption,\n    );\n\n    return user;\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    await throwNoExistsEntityWithSelectBy(this.userRepository, { id });\n\n    if (updateUserDto.email) {\n      await this.isDuplicatedBy({ email: updateUserDto.email });\n    }\n    if (updateUserDto.userId) {\n      await this.isDuplicatedBy({ userId: updateUserDto.userId });\n    }\n    if (updateUserDto.phone) {\n      await this.isDuplicatedBy({ phone: updateUserDto.phone });\n    }\n    return this.userRepository.update(id, updateUserDto);\n  }\n\n  async remove(id: number) {\n    await throwNoExistsEntityWithSelectBy(this.userRepository, { id });\n\n    return this.userRepository.softDelete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/UtilModule.html":{"url":"modules/UtilModule.html","title":"module - UtilModule","body":"\n                   \n\n\n\n\n    모듈\n    UtilModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UtilModule\n\n\n\ncluster_UtilModule_providers\n\n\n\ncluster_UtilModule_exports\n\n\n\n\nUtilService \n\nUtilService \n\n\n\nUtilModule\n\nUtilModule\n\nUtilService  -->\n\nUtilModule->UtilService \n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilModule -->\n\nUtilService->UtilModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/util/util.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            UtilService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { UtilService } from './util.service';\n\n@Global()\n@Module({\n  providers: [UtilService],\n  exports: [UtilService],\n})\nexport class UtilModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/util.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                secretConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                compareInputPasswordWith\n                            \n                            \n                                createHashedPassword\n                            \n                            \n                                createToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/util.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        compareInputPasswordWith\n                        \n                    \n                \n            \n            \n                \ncompareInputPasswordWith(message: string, userHashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                userHashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createHashedPassword\n                        \n                    \n                \n            \n            \n                \ncreateHashedPassword(message: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: Omit)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            Omit\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     { accessToken: any; refreshToken: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        secretConfig\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         ReturnType\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/util.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { SecretOption } from '@common/variables/secretConf';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport * as crypto from 'crypto';\nimport * as jwt from 'jsonwebtoken';\nimport { Protocol } from './protocol';\n\n/* 순환참조 우회를 위해 전역 모듈로 유틸 주입 활용 */\n@Injectable()\nexport class UtilService {\n  secretConfig: ReturnType;\n\n  constructor(private readonly commonService: CommonService) {\n    this.secretConfig = this.commonService.getConfig('secret');\n  }\n\n  /* message = userId + password 조합 */\n  createHashedPassword(message: string) {\n    return crypto\n      .createHmac('sha256', this.secretConfig.password)\n      .update(message)\n      .digest('base64');\n  }\n\n  compareInputPasswordWith(message: string, userHashedPassword: string) {\n    const hashedPassword = this.createHashedPassword(message);\n    return hashedPassword === userHashedPassword;\n  }\n\n  createToken({\n    id,\n    userId,\n    email,\n    role,\n    phone,\n  }: Omit) {\n    const userTokenData = { id, userId, email, role, phone };\n    const isExistsArgs = Object.keys(userTokenData).every((item) =>\n      ['id', 'userId', 'email', 'role', 'phone'].includes(item),\n    );\n\n    if (!isExistsArgs) {\n      const errorProtocol = Protocol.ArgsRequired;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    const accessToken = jwt.sign(\n      { id, userId, email, role, phone },\n      this.secretConfig.accessToken,\n      {\n        issuer: 'HitRestaurant',\n        algorithm: 'HS256',\n        expiresIn: '5m',\n      },\n    );\n    const refreshToken = jwt.sign(\n      { id, userId, email, role, phone },\n      this.secretConfig.refreshToken,\n      {\n        issuer: 'HitRestaurant',\n        algorithm: 'HS256',\n        expiresIn: '1d',\n        subject: 'refresh',\n      },\n    );\n\n    return { accessToken, refreshToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    문서 커버리지\n\n\n\n    \n\n\n\n    \n        \n            파일\n            타입\n            식별자\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guard/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/auth/guard/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/common.service.ts\n            \n            injectable\n            CommonService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.body.with.model.ts\n            \n            variable\n            ApiBodyWithModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.search.model.ts\n            \n            variable\n            ApiResponseSearchModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.with.case.model.ts\n            \n            variable\n            ApiResponseWithCaseModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.with.model.ts\n            \n            variable\n            ApiResponseWithModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/commonConf.ts\n            \n            type alias\n            CommonOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/databaseConf.ts\n            \n            type alias\n            DatabaseOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_HOST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_PASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_USER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            RUN_MODE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_ACCESS_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_HASH_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_REFRESH_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SWAGGER_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            VERSION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/secretConf.ts\n            \n            type alias\n            SecretOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/swaggerConf.ts\n            \n            type alias\n            SwaggerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/typeorm.service.ts\n            \n            injectable\n            TypeormService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/logger/logger.service.ts\n            \n            type alias\n            LogMethod\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/bearer-parser.middleware.ts\n            \n            injectable\n            BearerParserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/repsonse.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/dto/create-restaurant.dto.ts\n            \n            class\n            CreateRestaurantDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/dto/update-restaurant.dto.ts\n            \n            class\n            UpdateRestaurantDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/entities/reservation-menu.entity.ts\n            \n            entity\n            ReservationMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/entities/restaurant.entity.ts\n            \n            entity\n            Restaurant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/guard/check-owner.guard.ts\n            \n            guard\n            CheckOwnerGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/menus/dto/create-menu.dto.ts\n            \n            class\n            CreateMenuDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/dto/update-menu.dto.ts\n            \n            class\n            UpdateMenuDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/entities/menu.entity.ts\n            \n            entity\n            Menu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/menus.controller.ts\n            \n            controller\n            MenusController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/menus/menus.service.ts\n            \n            injectable\n            MenusService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/restaurants/menus/pipe/parse-array-or-one.pipe.ts\n            \n            injectable\n            ParseArrayOrOnePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/middleware/restaurant-exists.middleware.ts\n            \n            injectable\n            RestaurantExistsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationWithPhoneDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.controller.ts\n            \n            controller\n            RestaurantsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.service.ts\n            \n            injectable\n            RestaurantsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/util/common.ts\n            \n            variable\n            commonOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/enums/UserRole.ts\n            \n            variable\n            UserRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/enums/UserRole.ts\n            \n            type alias\n            UserRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            variable\n            Protocol\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            type alias\n            ErrorType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            type alias\n            Protocol\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            class\n            ExceptionResponseFormat\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            interface\n            CommonResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/util/secret.ts\n            \n            variable\n            secretOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/swagger.ts\n            \n            variable\n            swaggerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            isDev\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            isTest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            typeormOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            typeormSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/util.service.ts\n            \n            injectable\n            UtilService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/util/utilFunction.ts\n            \n            function\n            searchPagination\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/utilFunction.ts\n            \n            function\n            throwNoExistsEntityWithSelectBy\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        의존성\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.0.6\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            cookie-parser : ^1.4.7\n        \n            dayjs : ^1.11.13\n        \n            jsonwebtoken : ^9.0.2\n        \n            mysql2 : ^3.13.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.21\n        \n            typeorm-naming-strategies : ^4.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  함수\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            searchPagination   (src/.../utilFunction.ts)\n                        \n                        \n                            throwNoExistsEntityWithSelectBy   (src/.../utilFunction.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/util/utilFunction.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        searchPagination\n                        \n                    \n                \n            \n            \n                \nsearchPagination(orm: Orm, path: string, query: Query, page: number, perPage: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                orm\n                                            \n                                                        Orm\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                query\n                                            \n                                                        Query\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    1\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        throwNoExistsEntityWithSelectBy\n                        \n                    \n                \n            \n            \n                \nthrowNoExistsEntityWithSelectBy(orm: Repository, whereOption: FindOptionsWhere, selectOption?: FindOptionsSelect)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                orm\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                whereOption\n                                            \n                                                        FindOptionsWhere\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                selectOption\n                                            \n                                                        FindOptionsSelect\n                                            \n\n                                            \n                                                    네\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHIT Restaurant API\n에이치아이티 식당(가명)을 위한 API 제작\n\n개발 환경\n설치 및 실행\nAPI 개요\n\n개발 환경\n\nNode.js: v20.11.1\nNpm: v10.9.0\nWindows: 11 home\nMariaDB: 10.1.13\nVitest: v3.0.8\n\n설치 및 실행\n소스코드를 다운로드 하거나 git clone을 통해 내려받습니다.\n예시 :git clone https://github.com/kkn1125/hit-assignment.git프로젝트 폴더로 이동해서 의존을 설치합니다.\n예시 :npm ci\n# or\nnpm installMariaDB가 없으시다면 아래 명령을 참조해주세요. 도커를 사용하고 계시다면 도커를 권장드립니다.\n예시 :# Windows\ncurl -o- https://archive.mariadb.org/mariadb-10.3.13/winx64-packages/mariadb-10.3.13-winx64.msi\n# 또는\nchoco install mariadb --version=10.3.13\n# https://community.chocolatey.org/packages/mariadb/10.3.13 참조\n\n# Docker\ndocker run -it -d -p :3306 -e MYSQL_ROOT_PASSWORD= --name mariadb mariadb:10.3.13\n\n# Mac\nbrew install mariadbAPI 개요\nAPI 진입점\n\nAPI: http://:/api\n\nSwagger 문서\n\nSwagger Docs: http://:/docs\n\n로그인 방식\n\nBearer access token 사용한 인증\ncookie를 이용한 refresh token 발급\nrefresh 요청을 통한 로그인 연장 (access token 재발급)\n\n특이사항\nNotion 문서를 참조하시기 바랍니다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    모듈\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    사용할 수 있는 그래프가 없습니다.\n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        MenusModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurantsModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    개요\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_MenusModule\n\n\n\ncluster_MenusModule_providers\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_exports\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UtilModule\n\n\n\ncluster_UtilModule_exports\n\n\n\ncluster_UtilModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nCommonService \n\nCommonService \n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nRestaurantsService \n\nRestaurantsService \n\nRestaurantsService  -->\n\nRestaurantsModule->RestaurantsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUtilModule\n\nUtilModule\n\nAppModule -->\n\nUtilModule->AppModule\n\n\n\n\n\nUtilService \n\nUtilService \n\nUtilService  -->\n\nUtilModule->UtilService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\nAppModule -->\n\nLoggerService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\n\n\nMenusService\n\nMenusService\n\n\n\nMenusModule\n\nMenusModule\n\nMenusModule -->\n\nMenusService->MenusModule\n\n\n\nRestaurantsModule -->\n\nMenusModule->RestaurantsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\nRestaurantsModule -->\n\nReservationsModule->RestaurantsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilModule -->\n\nUtilService->UtilModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 모듈\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 컨트롤러\n                \n            \n        \n        \n            \n                \n                    \n                    5 엔티티\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 클래스\n                \n            \n        \n        \n            \n                \n                    \n                    2 가드\n                \n            \n        \n        \n            \n                \n                    \n                    1 인터페이스\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        속성\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  타입 별칭\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            CommonOption   (src/.../commonConf.ts)\n                        \n                        \n                            DatabaseOption   (src/.../databaseConf.ts)\n                        \n                        \n                            ErrorType   (src/.../protocol.ts)\n                        \n                        \n                            LogMethod   (src/.../logger.service.ts)\n                        \n                        \n                            Protocol   (src/.../protocol.ts)\n                        \n                        \n                            SecretOption   (src/.../secretConf.ts)\n                        \n                        \n                            SwaggerOption   (src/.../swaggerConf.ts)\n                        \n                        \n                            UserRole   (src/.../UserRole.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/variables/commonConf.ts\n    \n    \n        \n            \n                \n                    \n                    CommonOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/databaseConf.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/util/protocol.ts\n    \n    \n        \n            \n                \n                    \n                    ErrorType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Protocol\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/logger/logger.service.ts\n    \n    \n        \n            \n                \n                    \n                    LogMethod\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/secretConf.ts\n    \n    \n        \n            \n                \n                    \n                    SecretOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/swaggerConf.ts\n    \n    \n        \n            \n                \n                    \n                    SwaggerOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/util/enums/UserRole.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  변수\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            ApiBodyWithModel   (src/.../api.body.with.model.ts)\n                        \n                        \n                            ApiResponseSearchModel   (src/.../api.response.search.model.ts)\n                        \n                        \n                            ApiResponseWithCaseModel   (src/.../api.response.with.case.model.ts)\n                        \n                        \n                            ApiResponseWithModel   (src/.../api.response.with.model.ts)\n                        \n                        \n                            commonOption   (src/.../common.ts)\n                        \n                        \n                            DB_HOST   (src/.../environment.ts)\n                        \n                        \n                            DB_NAME   (src/.../environment.ts)\n                        \n                        \n                            DB_PASS   (src/.../environment.ts)\n                        \n                        \n                            DB_PORT   (src/.../environment.ts)\n                        \n                        \n                            DB_USER   (src/.../environment.ts)\n                        \n                        \n                            isDev   (src/.../typeorm.ts)\n                        \n                        \n                            isTest   (src/.../typeorm.ts)\n                        \n                        \n                            PORT   (src/.../environment.ts)\n                        \n                        \n                            Protocol   (src/.../protocol.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            RUN_MODE   (src/.../environment.ts)\n                        \n                        \n                            SECRET_ACCESS_TOKEN   (src/.../environment.ts)\n                        \n                        \n                            SECRET_HASH_PASSWORD   (src/.../environment.ts)\n                        \n                        \n                            SECRET_REFRESH_TOKEN   (src/.../environment.ts)\n                        \n                        \n                            secretOption   (src/.../secret.ts)\n                        \n                        \n                            SWAGGER_URL   (src/.../environment.ts)\n                        \n                        \n                            swaggerOption   (src/.../swagger.ts)\n                        \n                        \n                            typeormOption   (src/.../typeorm.ts)\n                        \n                        \n                            typeormSource   (src/.../typeorm.ts)\n                        \n                        \n                            UserRole   (src/.../UserRole.ts)\n                        \n                        \n                            VERSION   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/decorators/api.body.with.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiBodyWithModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(modelProps: {\n  [k: string]: Model;\n}) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n  const isClass =\n    model.constructor.toString().startsWith('class') ||\n    model.constructor.toString().match(/function (Function)/);\n\n  if (isClass) {\n    const extendsModel = model as Type;\n    const createClass = {\n      [modelName]: class extends extendsModel {},\n    }[modelName];\n    return applyDecorators(\n      ApiBody({\n        schema: { $ref: getSchemaPath(createClass) },\n      }),\n      ApiExtraModels(createClass),\n    );\n  }\n\n  return applyDecorators(\n    ApiBody({\n      schema: {\n        title: modelName,\n        properties: Object.fromEntries(\n          Object.entries(model).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        ),\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.search.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseSearchModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : >(\n  modelProps: {\n    [k: string]: Model;\n  },\n  path: string,\n  pagination: PaginationType,\n) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n\n  return applyDecorators(\n    ApiResponse({\n      status: HttpStatus.OK,\n      schema: {\n        anyOf: [\n          {\n            title: modelName,\n            properties: {\n              ok: {\n                type: 'boolean',\n                example: true,\n              },\n              status: {\n                type: 'number',\n                example: HttpStatus.OK,\n              },\n              path: {\n                type: 'string',\n                example: path,\n              },\n              payload: {\n                properties: {\n                  data: {\n                    type: 'array',\n                    items: {\n                      $ref: getSchemaPath(model),\n                    },\n                  },\n                  pagination: {\n                    required: ['page', 'total'],\n                    properties: {\n                      page: {\n                        type: 'number',\n                        example: pagination.page,\n                      },\n                      total: {\n                        type: 'number',\n                        example: pagination.total,\n                      },\n                      prev: {\n                        type: 'string',\n                        example: `${path}?page=${pagination.prev}`,\n                        description:\n                          '이전 페이지가 없을 시 prev는 응답에 포함되지 않습니다.',\n                      },\n                      next: {\n                        type: 'string',\n                        example: `${path}?page=${pagination.next}`,\n                        description:\n                          '다음 페이지가 없을 시 next는 응답에 포함되지 않습니다.',\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n          {\n            title: modelName,\n            properties: {\n              ok: {\n                type: 'boolean',\n                example: true,\n              },\n              status: {\n                type: 'number',\n                example: HttpStatus.OK,\n              },\n              path: {\n                type: 'string',\n                example: path,\n              },\n              payload: {\n                properties: {\n                  data: {\n                    type: 'array',\n                    items: {\n                      $ref: getSchemaPath(model),\n                    },\n                  },\n                  pagination: {\n                    required: ['page', 'total'],\n                    properties: {\n                      page: {\n                        type: 'number',\n                        example: pagination.page,\n                      },\n                      total: {\n                        type: 'number',\n                        example: pagination.total,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    }),\n    ApiExtraModels(model),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.with.case.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseWithCaseModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(\n  modelProps: {\n    [k: string]: {\n      [summary: string]: Model | Model[];\n    };\n  },\n  status: HttpStatus,\n  path: string,\n  method: string,\n) => {\n  const [modelName, models] = Object.entries(modelProps)[0];\n  const extraModels: Type[] = [];\n  const schema: SchemaObject = {\n    title: modelName,\n    oneOf: Object.entries(models).map(([summary, model]) => {\n      const isArray = Array.isArray(model);\n      const useModel = isArray ? model[0] : model;\n      const isClass = typeof useModel === 'function';\n\n      if (isClass) {\n        extraModels.push(useModel);\n        return {\n          title: summary,\n          type: 'object',\n          properties: {\n            ok: { type: 'boolean', example: [200, 201].includes(status) },\n            status: { type: 'number', example: status },\n            method: { type: 'string', example: method },\n            path: { type: 'string', example: path },\n            payload: isArray\n              ? {\n                  type: 'array',\n                  items: {\n                    $ref: getSchemaPath(useModel),\n                  },\n                }\n              : {\n                  type: 'object',\n                  $ref: getSchemaPath(useModel),\n                },\n            timestamp: { type: 'number', example: 1741672686205 },\n          },\n        };\n      }\n      return {\n        title: summary,\n        type: 'object',\n        properties: {\n          ok: { type: 'boolean', example: [200, 201].includes(status) },\n          status: { type: 'number', example: status },\n          method: { type: 'string', example: method },\n          path: { type: 'string', example: path },\n          payload: isArray\n            ? {\n                type: 'array',\n                items: {\n                  properties: Object.fromEntries(\n                    Object.entries(useModel).map(([k, v]) => [\n                      k,\n                      {\n                        type: typeof v,\n                        value: v,\n                      },\n                    ]),\n                  ),\n                },\n              }\n            : {\n                type: 'object',\n                properties: Object.fromEntries(\n                  Object.entries(useModel).map(([k, v]) => [\n                    k,\n                    {\n                      type: typeof v,\n                      value: v,\n                    },\n                  ]),\n                ),\n              },\n          timestamp: { type: 'number', example: 1741672686205 },\n        },\n      };\n    }),\n  };\n\n  const examples = Object.fromEntries(\n    Object.entries(models).map(([summary, model]) => [\n      summary,\n      {\n        summary,\n        value: {\n          ok: true,\n          status,\n          method,\n          path,\n          payload: model,\n          timestamp: 1741672686205,\n        },\n      },\n    ]),\n  );\n\n  if (extraModels.length > 0) {\n    return applyDecorators(\n      ApiResponse({ schema, examples }),\n      ApiExtraModels(...extraModels),\n    );\n  }\n  return applyDecorators(ApiResponse({ schema, examples }));\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.with.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseWithModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(\n  modelProps: { [k: string]: Model },\n  { ok, status, method, path, message }: ResponseProperty,\n  options?: Omit,\n) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n  const isArray = Array.isArray(model);\n  const properties: Record = {};\n  properties.ok = { type: 'boolean', example: ok };\n  properties.status = { type: 'number', example: status };\n  properties.method = { type: 'string', example: method };\n  properties.path = { type: 'string', example: path };\n  properties.payload = {};\n  if (message) {\n    properties.message = { type: 'string', example: message };\n  }\n  properties.timestamp = { type: 'number', example: 1741672686205 };\n\n  const pickModel = isArray ? model[0] : model;\n  const isClass =\n    pickModel.constructor.toString().startsWith('class') ||\n    pickModel.constructor.toString().match(/function (Function)/);\n\n  if (isClass) {\n    properties.payload = isArray\n      ? { type: 'array', items: { $ref: getSchemaPath(pickModel) } }\n      : {\n          $ref: getSchemaPath(pickModel),\n        };\n\n    return applyDecorators(\n      ApiResponse({\n        ...options,\n        status,\n        schema: { properties },\n      }),\n      ApiExtraModels(pickModel),\n    );\n  }\n\n  properties.payload = {\n    properties: isArray\n      ? Object.fromEntries(\n          Object.entries(model[0]).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        )\n      : Object.fromEntries(\n          Object.entries(model).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        ),\n  };\n\n  return applyDecorators(\n    ApiResponse({\n      ...options,\n      status,\n      schema: {\n        title: modelName,\n        properties,\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/util/common.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commonOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  version: VERSION,\n  port: PORT,\n  allowOrigins:\n    RUN_MODE === 'development'\n      ? ['localhost:8080']\n      : [\n          /* production host */\n        ],\n}\n                    \n                \n\n\n        \n    \n\n    src/common/variables/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_HOST\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_HOST as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_NAME as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_PASS\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_PASS as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_PORT\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : +(process.env.DB_PORT ?? 3306)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_USER\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_USER as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : +(process.env.PORT ?? 8080)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RUN_MODE\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.NODE_ENV ?? 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_ACCESS_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_ACCESS_TOKEN as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_HASH_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_HASH_PASSWORD as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_REFRESH_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_REFRESH_TOKEN as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_URL\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : 'http://localhost:8080'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        VERSION\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : pkg.version ?? '0.0.1'\n                    \n                \n\n\n        \n    \n\n    src/util/typeorm.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDev\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : RUN_MODE === 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTest\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : RUN_MODE === 'test'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeormOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  type: 'mysql',\n  synchronize: isTest || isDev,\n  namingStrategy: new SnakeNamingStrategy(),\n  entities: [User, Restaurant, Reservation, Menu, ReservationMenu],\n  username: DB_USER,\n  password: DB_PASS,\n  host: DB_HOST,\n  port: DB_PORT,\n  database: DB_NAME,\n  logging: isTest || isDev ? ['query', 'error'] : ['error'],\n  timezone: '+09:00',\n  dropSchema: isTest,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeormSource\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : new DataSource(typeormOption)\n                    \n                \n\n\n        \n    \n\n    src/util/protocol.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Protocol\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : {\n  /* common error */\n  BadRequest: { errorCode: 1000, message: '잘못된 요청입니다.' }, // 400\n  UnAuthorized: { errorCode: 1001, message: '인증이 필요합니다.' }, // 401\n  Forbidden: { errorCode: 1002, message: '접근 권한이 없습니다.' }, // 403\n  NotFound: { errorCode: 1003, message: '리소스를 찾을 수 없습니다.' }, // 404\n  Conflict: { errorCode: 1004, message: '리소스가 중복됩니다.' }, // 409\n  ServerError: { errorCode: 1005, message: '서버에 문제가 발생했습니다.' }, // 500\n\n  /* auth error */\n  RequiredLogin: { errorCode: 2000, message: '로그인이 필요합니다.' }, // 401\n  NoMatchRoles: { errorCode: 2001, message: '사용자 권한이 없습니다.' }, // 401\n  CookieWrongType: { errorCode: 2002, message: '잘못된 쿠키 정보입니다.' }, // 400\n  JwtWrongSignature: { errorCode: 2003, message: '잘못된 서명입니다.' }, // 401\n  JwtExpired: { errorCode: 2004, message: '토큰이 만료되었습니다.' }, // 401\n  JwtMalFormed: { errorCode: 2005, message: '잘못된 토큰 형태입니다.' }, // 401\n  JwtCreate: { errorCode: 2006, message: '토큰 발급에 문제가 발생했습니다.' }, // 400\n  JwtServerException: {\n    errorCode: 2007,\n    message: '토큰 인증에 문제가 발생했습니다.',\n  }, // 401\n  NoRefreshCookie: {\n    errorCode: 2008,\n    message: '잘못된 접근입니다.',\n  }, // 401\n  NoMatchUser: {\n    errorCode: 2009,\n    message: '사용자 정보를 찾지 못했습니다.',\n  }, // 404\n  WrongLoginData: {\n    errorCode: 2010,\n    message: '입력 정보를 다시 확인해주세요.',\n  }, // 400\n\n  /* guard, controller */\n  ArgsRequired: {\n    errorCode: 3000,\n    message: '데이터를 확인해주세요.',\n  }, // 400\n  WrongParamType: {\n    errorCode: 3001,\n    message: '파라미터를 확인해주세요.',\n  }, // 400\n  NoMatchOwnRestaurant: {\n    errorCode: 3002,\n    message: '해당 식당의 점주만 이용 가능합니다.',\n  }, // 400\n\n  /* type check */\n  MustPositive: {\n    errorCode: 4000,\n    message: '음수 값은 허용되지 않습니다.',\n  },\n  NotAllowedPastTime: {\n    errorCode: 4001,\n    message: '현재 시간보다 과거 시간을 설정 할 수 없습니다.',\n  },\n  InvalidTimeRange: {\n    errorCode: 4002,\n    message: '종료시간이 시작 시간보다 과거일 수 없습니다.',\n  },\n} as const\n                    \n                \n\n\n        \n    \n\n    src/auth/guard/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : (args: UserRole[] = []) => {\n  return applyDecorators(SetMetadata('roles', args), UseGuards(RoleGuard));\n}\n                    \n                \n\n\n        \n    \n\n    src/util/secret.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        secretOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  password: SECRET_HASH_PASSWORD,\n  accessToken: SECRET_ACCESS_TOKEN,\n  refreshToken: SECRET_REFRESH_TOKEN,\n}\n                    \n                \n\n\n        \n    \n\n    src/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  serverUrl: SWAGGER_URL,\n}\n                    \n                \n\n\n        \n    \n\n    src/util/enums/UserRole.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserRole\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : {\n  Customer: 1, // 고객\n  Shopkeeper: 2, // 식당 주인\n} as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"}}
}
