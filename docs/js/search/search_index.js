var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.528,1,2.72]],["body/controllers/AppController.html",[0,2.5,1,4.451,2,0.017,3,0.212,4,0.212,5,4.371,6,6.179,7,5.056,8,2.887,9,3.038,10,1.626,11,2.748,12,2.62,13,2.094,14,5.056,15,6.282,16,5.056,17,0.266,18,3.391,19,3.089,20,2.324,21,0.635,22,4.175,23,4.371,24,3.838,25,1.615,26,0.212,27,0.147,28,2.013,29,1.365,30,5.056,31,4.116,32,3.919,33,3.089,34,2.897,35,1.255,36,5.056]],["title/modules/AppModule.html",[37,1.127,38,2.72]],["body/modules/AppModule.html",[1,4.259,2,0.017,3,0.163,4,0.163,10,1.004,17,0.29,21,0.487,22,4.258,23,3.353,26,0.163,27,0.113,37,1.765,38,5.609,39,1.782,40,1.876,41,1.876,42,1.697,43,2.556,44,1.876,45,3.353,46,3.353,47,3.353,48,4.567,49,4.567,50,4.823,51,4.567,52,4.567,53,3.556,54,4.567,55,3.556,56,3.879,57,3.353,58,4.569,59,5.58,60,3.879,61,3.353,62,2.093,63,2.748,64,3.879,65,3.879,66,5.285,67,3.007,68,5.285,69,3.879,70,4.569,71,3.879,72,3.007,73,3.879,74,3.879,75,3.879,76,5.285,77,3.353,78,5.285,79,3.353,80,3.879,81,3.879,82,3.007,83,2.748,84,3.879,85,3.879,86,2.541,87,3.879,88,2.222,89,3.879,90,3.879,91,3.879,92,2.37,93,1.293,94,3.879,95,3.879]],["title/injectables/AppService.html",[22,2.346,96,0.616]],["body/injectables/AppService.html",[2,0.017,3,0.221,4,0.221,6,6.267,17,0.259,21,0.661,22,3.935,26,0.221,27,0.153,28,2.096,29,1.421,31,4.22,35,1.307,77,4.552,96,1.034,97,1.833,98,4.552,99,4.082,100,3.861,101,5.266,102,5.266,103,3.731,104,3.731,105,1.307,106,5.266,107,5.266,108,5.266]],["title/controllers/AuthController.html",[0,1.528,109,2.72]],["body/controllers/AuthController.html",[0,1.398,2,0.017,3,0.147,4,0.147,8,3.106,9,3.269,10,1.91,11,2.956,12,2.818,13,2.253,17,0.268,18,3.339,19,2.146,20,1.614,21,0.441,24,3.78,25,1.122,26,0.147,27,0.102,28,1.398,29,0.948,34,3.268,35,1.416,109,3.496,110,3.036,111,2.722,112,4.265,113,4.265,114,3.825,115,3.512,116,5.171,117,4.643,118,3.512,119,4.549,120,3.512,121,3.036,122,4.934,123,3.512,124,5.228,125,3.036,126,3.512,127,3.512,128,4.934,129,3.512,130,4.422,131,1.896,132,3.512,133,2.463,134,3.512,135,3.512,136,3.512,137,3.512,138,2.759,139,2.518,140,2.301,141,2.827,142,2.301,143,3.233,144,3.738,145,1.336,146,3.485,147,3.036,148,3.036,149,4.422,150,2.146,151,3.512,152,3.512,153,3.233,154,3.738,155,4.934,156,3.512,157,5.704,158,3.512,159,3.512,160,3.512,161,3.512,162,3.512,163,3.512,164,3.512,165,3.512,166,3.512]],["title/modules/AuthModule.html",[37,1.127,48,2.516]],["body/modules/AuthModule.html",[2,0.017,3,0.213,4,0.213,17,0.283,21,0.639,26,0.213,27,0.148,37,2.012,39,2.338,40,2.461,41,2.461,42,2.226,43,3.05,44,2.461,48,5.037,53,3.829,86,3.334,88,2.915,92,3.108,109,4.856,146,4.585,147,4.398,167,4.398,168,5.088,169,4.398,170,5.088,171,3.108,172,1.935,173,2.399,174,2.915,175,1.696,176,3.108,177,5.088,178,4.398]],["title/injectables/AuthService.html",[96,0.616,146,2.346]],["body/injectables/AuthService.html",[2,0.017,3,0.149,4,0.149,17,0.269,21,0.446,26,0.149,27,0.103,29,1.549,35,1.235,62,1.918,96,0.798,97,1.237,105,1.764,112,4.3,113,4.3,116,5.183,117,4.289,124,4.935,125,4.3,133,2.475,138,1.719,145,1.352,146,3.039,148,3.072,153,4.075,172,1.352,175,1.914,176,2.171,179,3.072,180,2.7,181,5.259,182,3.553,183,3.357,184,3.759,185,3.201,186,3.553,187,4.3,188,4.975,189,3.553,190,2.286,191,3.553,192,4.975,193,3.553,194,1.633,195,2.517,196,2.754,197,2.036,198,3.072,199,1.237,200,1.482,201,2.171,202,1.352,203,1.554,204,3.072,205,2.776,206,2.73,207,2.776,208,2.754,209,3.072,210,1.482,211,4.975,212,3.553,213,3.553,214,3.072,215,4.975,216,4.975,217,4.975,218,2.754,219,1.918,220,2.285,221,3.553,222,1.914,223,1.633,224,3.553,225,3.072,226,3.553,227,2.754,228,2.517,229,4.975,230,3.072,231,2.517,232,2.517]],["title/injectables/BearerParserMiddleware.html",[63,2.72,96,0.616]],["body/injectables/BearerParserMiddleware.html",[2,0.017,3,0.166,4,0.166,10,1.026,17,0.261,21,0.497,26,0.166,27,0.115,28,1.577,29,1.069,62,2.138,63,3.798,67,3.071,93,1.321,96,0.86,97,1.379,99,3.071,100,3.579,103,2.807,105,1.781,133,2.592,138,1.916,145,1.507,153,3.513,194,1.82,196,3.071,199,1.379,200,1.652,206,2.716,214,3.424,218,3.071,219,2.138,220,2.592,222,2.171,223,1.82,225,3.424,227,4.711,228,2.807,233,5.253,234,3.424,235,4.156,236,3.961,237,4.156,238,5.253,239,3.978,240,6.512,241,3.961,242,3.513,243,4.156,244,4.711,245,3.071,246,4.635,247,4.635,248,5.253,249,3.961,250,6.077,251,2.138,252,3.961,253,3.961,254,3.961,255,3.424,256,3.961,257,5.361,258,3.961,259,3.961,260,3.961,261,2.807,262,3.961,263,3.961,264,6.077,265,3.961,266,3.961,267,3.961,268,3.961,269,3.961,270,3.961,271,3.961,272,3.961,273,3.961]],["title/modules/CommonModule.html",[37,1.127,49,2.516]],["body/modules/CommonModule.html",[2,0.017,3,0.227,4,0.227,17,0.244,21,0.68,26,0.227,27,0.157,37,2.068,39,2.49,40,2.621,41,2.621,42,2.371,43,3.17,44,3.17,49,5.051,100,4.052,274,4.685,275,4.685,276,4.685,277,5.419,278,5.081,279,5.419]],["title/interfaces/CommonResponseFormat.html",[280,2.516,281,2.516]],["body/interfaces/CommonResponseFormat.html",[2,0.017,3,0.172,4,0.172,9,3.429,11,3.292,12,3.138,13,2.509,17,0.204,20,3.38,21,0.516,26,0.23,27,0.16,93,1.832,131,3.719,190,2.525,203,2.404,280,2.693,281,4.331,282,2.912,283,4.645,284,2.331,285,3.149,286,2.511,287,4.387,288,2.804,289,3.019,290,4.26,291,3.601,292,3.894,293,4.26,294,4.26,295,4.26,296,3.186,297,3.894,298,4.26,299,4.26,300,4.26,301,4.26,302,4.26,303,2.511,304,4.8,305,1.683,306,4.683,307,3.186,308,3.186]],["title/injectables/CommonService.html",[96,0.616,100,1.959]],["body/injectables/CommonService.html",[2,0.017,3,0.208,4,0.208,10,1.285,17,0.231,21,0.623,26,0.208,27,0.144,28,1.975,29,1.34,35,1.232,72,3.847,96,0.996,97,1.728,100,3.168,309,4.29,310,6.776,311,4.963,312,7.458,313,4.963,314,4.963,315,5.253,316,5.253,317,5.858,318,6.776,319,4.963,320,3.516,321,6.209,322,7.101,323,4.963,324,4.963]],["title/classes/CreateMenuDto.html",[27,0.111,325,2.2]],["body/classes/CreateMenuDto.html",[2,0.017,3,0.239,4,0.239,17,0.251,25,1.821,26,0.239,27,0.166,325,3.871,326,4.928,327,4.419,328,3.268,329,6.756,330,4.128,331,2.817,332,4.787,333,5.841,334,3.735,335,2.269,336,4.039]],["title/classes/CreateReservationDto.html",[27,0.111,337,2.2]],["body/classes/CreateReservationDto.html",[2,0.017,3,0.201,4,0.201,17,0.261,25,1.535,26,0.201,27,0.194,173,1.827,289,2.784,305,2.217,328,2.943,334,3.148,335,2.658,337,3.486,338,5.259,339,3.724,340,6.084,341,4.31,342,4.31,343,2.796,344,3.717,345,2.753,346,2.661,347,4.805,348,6.084,349,4.805,350,4.805,351,3.486,352,2.539,353,3.724,354,4.805,355,5.259,356,4.153,357,3.724,358,4.153,359,4.805,360,3.148,361,3.724,362,4.805,363,2.208,364,3.404,365,1.673,366,2.324,367,2.753]],["title/classes/CreateRestaurantDto.html",[27,0.111,368,2.346]],["body/classes/CreateRestaurantDto.html",[2,0.017,3,0.24,4,0.24,17,0.252,25,1.83,26,0.24,27,0.166,328,3.277,330,4.139,331,2.825,334,3.753,368,4.139,369,4.951,370,4.44,371,6.775,372,4.8,373,1.91,374,3.092]],["title/classes/CreateUserDto.html",[27,0.111,375,2.346]],["body/classes/CreateUserDto.html",[2,0.017,3,0.237,4,0.237,17,0.25,25,1.804,26,0.237,27,0.164,175,1.883,176,3.45,210,2.802,328,3.25,334,3.7,343,3.088,375,4.105,376,4.882,377,4.378,378,5.808,379,4.402,380,4.105,381,4.402,382,4.105]],["title/modules/DatabaseModule.html",[37,1.127,50,2.516]],["body/modules/DatabaseModule.html",[2,0.017,3,0.241,4,0.241,17,0.269,21,0.721,26,0.241,27,0.167,37,1.992,50,4.446,88,3.29,171,3.508,172,2.184,383,5.741,384,4.807,385,5.741,386,5.741,387,5.741]],["title/classes/ExceptionResponseFormat.html",[27,0.111,303,2.346]],["body/classes/ExceptionResponseFormat.html",[2,0.017,3,0.155,4,0.155,9,3.21,11,3.225,12,3.105,13,2.483,17,0.19,20,3.347,21,0.463,26,0.214,27,0.148,93,1.702,131,3.411,190,2.347,203,2.234,280,2.417,281,4.141,282,2.614,283,4.348,284,2.318,285,2.926,286,2.254,287,4.149,288,2.988,289,3.105,290,3.958,291,3.346,292,3.618,293,3.958,294,3.958,295,3.958,296,2.86,297,3.618,298,3.958,299,3.958,300,3.958,301,3.958,302,3.958,303,3.12,304,5.455,305,2.032,306,5.082,307,2.86,308,2.86,388,3.189,389,5.106,390,3.689,391,3.689,392,3.689,393,3.689,394,3.689,395,3.689,396,3.689]],["title/classes/GlobalExceptionFilter.html",[27,0.111,397,2.976]],["body/classes/GlobalExceptionFilter.html",[2,0.017,3,0.176,4,0.176,11,2.437,12,2.609,13,2.086,17,0.258,20,1.928,21,0.527,26,0.176,27,0.122,28,1.67,29,1.132,35,1.042,55,3.401,62,2.264,82,3.252,93,1.399,105,1.891,116,3.947,133,2.218,145,1.596,199,1.461,200,1.749,218,5.166,220,1.67,222,1.858,289,2.323,303,3.822,306,3.947,320,4.432,397,4.319,398,5.408,399,3.627,400,6.256,401,3.252,402,4.195,403,3.947,404,5.572,405,5.408,406,6.665,407,4.195,408,5.572,409,6.256,410,4.319,411,3.627,412,4.195,413,4.195,414,4.195,415,4.195,416,4.195,417,4.195,418,4.195,419,4.195,420,4.816,421,4.195,422,4.195,423,5.572,424,4.195,425,4.195,426,4.195,427,4.195,428,4.195,429,4.195,430,4.195,431,4.195]],["title/classes/IsAfterStartTimeConstraint.html",[27,0.111,432,2.976]],["body/classes/IsAfterStartTimeConstraint.html",[2,0.017,3,0.201,4,0.201,17,0.248,26,0.201,27,0.176,93,1.599,105,1.656,180,1.909,251,2.588,284,1.958,285,3.481,288,2.447,331,2,337,3.481,363,2.204,432,4.71,433,4.969,434,3.717,435,5.171,436,5.766,437,4.71,438,4.305,439,4.795,440,3.717,441,5.731,442,4.795,443,4.969,444,6.076,445,3.822,446,4.795,447,4.795,448,3.717,449,3.397,450,4.71,451,2.319,452,3.397,453,3.397,454,4.795,455,6.076,456,4.795,457,4.795,458,4.795]],["title/classes/IsDateTimeAfterNowConstraint.html",[27,0.111,459,2.976]],["body/classes/IsDateTimeAfterNowConstraint.html",[2,0.017,3,0.182,4,0.182,17,0.212,26,0.239,27,0.165,35,1.579,93,1.447,105,1.414,131,2.342,180,1.727,251,2.342,284,2.059,285,3.264,288,2.907,289,1.809,331,1.809,363,2.618,435,4.93,436,5.498,437,4.416,438,4.036,440,4.416,441,5.437,443,4.785,445,3.644,448,4.416,449,4.506,450,4.416,459,4.93,460,3.363,461,4.338,462,4.338,463,5.696,464,4.338,465,3.75,466,3.074,467,6.36,468,4.338,469,3.075,470,2.098,471,6.36,472,4.338,473,4.338,474,6.36,475,3.264,476,3.75,477,4.924,478,3.75,479,3.75,480,3.074,481,3.75]],["title/classes/IsPhoneNumberFormatConstraint.html",[27,0.111,482,2.976]],["body/classes/IsPhoneNumberFormatConstraint.html",[2,0.017,3,0.19,4,0.19,10,1.172,17,0.168,26,0.245,27,0.17,35,1.765,93,1.509,105,1.124,131,2.443,180,1.801,251,3.504,284,2.087,288,2.988,331,1.887,343,2.691,363,2.691,435,5.032,437,4.539,438,4.148,440,4.539,441,5.745,443,4.863,448,4.539,449,4.599,450,4.539,475,3.355,477,5.062,478,3.912,479,3.912,480,3.206,481,3.912,482,5.032,483,3.508,484,4.525,485,5.855,486,4.525,487,2.965,488,4.525,489,4.525,490,6.491,491,5.855,492,4.525,493,4.525,494,4.525,495,3.912]],["title/injectables/LoggerMiddleware.html",[83,2.72,96,0.616]],["body/injectables/LoggerMiddleware.html",[2,0.017,3,0.207,4,0.207,12,2.583,17,0.252,21,0.62,26,0.207,27,0.144,28,1.967,29,1.334,55,3.618,62,3.651,83,4.388,93,1.648,96,0.994,97,1.721,105,1.538,124,4.792,133,2.822,138,2.391,145,1.88,235,4.801,237,4.801,239,4.332,243,4.801,401,3.831,403,4.388,475,2.832,496,4.272,497,4.942,498,4.942,499,4.942,500,4.272,501,6.193,502,3.019,503,4.942]],["title/modules/LoggerModule.html",[37,1.127,51,2.516]],["body/modules/LoggerModule.html",[2,0.017,3,0.233,4,0.233,17,0.247,21,0.697,26,0.233,27,0.161,37,2.091,39,2.553,40,2.688,41,2.688,42,2.431,43,3.218,44,2.688,51,5.021,55,3.91,278,5.158,504,5.556,505,5.556,506,5.556,507,5.556]],["title/injectables/LoggerService.html",[55,1.959,96,0.616]],["body/injectables/LoggerService.html",[2,0.017,3,0.286,4,0.151,10,0.934,17,0.215,21,0.453,26,0.151,27,0.105,29,0.973,35,1.554,55,2.565,62,3.123,96,0.807,97,1.256,105,1.736,150,2.203,203,2.199,205,3.587,219,3.552,283,3.791,284,1.698,285,2.88,297,2.555,320,4.434,352,1.372,508,2.796,509,4.829,510,6.581,511,5.786,512,5.786,513,6.581,514,6.581,515,5.026,516,3.194,517,5.026,518,5.026,519,3.606,520,3.606,521,5.026,522,3.606,523,5.8,524,3.606,525,3.606,526,3.606,527,3.606,528,3.606,529,3.606,530,3.606,531,3.606,532,3.896,533,3.896,534,3.118,535,3.606,536,3.118,537,5.026,538,2.363,539,5.026,540,3.606,541,5.026,542,3.606,543,4.345,544,3.606,545,5.026,546,3.606,547,3.606,548,3.606,549,3.606,550,3.606,551,3.606,552,3.606]],["title/classes/LoginDto.html",[27,0.111,117,2.516]],["body/classes/LoginDto.html",[2,0.017,3,0.225,4,0.225,17,0.2,25,1.716,26,0.225,27,0.156,117,4.272,210,2.927,284,2.279,345,3.735,346,3.193,351,4.022,352,2.48,381,4.599,553,4.643,554,5.054,555,5.371,556,5.636,557,5.371]],["title/entities/Menu.html",[335,1.528,558,1.679]],["body/entities/Menu.html",[2,0.017,3,0.122,4,0.122,10,1.471,17,0.225,25,0.933,26,0.122,27,0.125,202,1.111,284,2.056,289,2.998,305,2.201,330,3.141,331,2.144,332,3.643,333,4.444,335,1.72,345,3.474,346,3.064,351,3.637,352,2.664,357,3.349,360,3.722,361,2.265,363,1.343,365,1.017,366,2.09,373,2.296,374,1.577,445,3.637,470,2.748,558,1.89,559,2.525,560,3.141,561,3.643,562,1.79,563,3.643,564,2.487,565,3.643,566,2.921,567,3.985,568,4.025,569,4.497,570,4.497,571,4.404,572,2.921,573,3.643,574,2.921,575,3.643,576,2.921,577,4.32,578,4.32,579,4.32,580,4.32,581,4.32,582,2.921,583,3.369,584,2.921,585,4.32,586,2.921,587,2.921,588,2.921,589,4.32,590,3.722,591,3.349,592,2.921,593,3.637,594,2.07,595,3.735,596,2.921,597,2.07,598,4.32,599,3.061,600,2.921,601,2.07,602,2.921,603,3.643,604,2.921,605,2.265,606,2.265,607,5.241,608,2.525,609,4.159,610,3.061,611,3.061,612,2.921,613,2.921]],["title/injectables/MenuDataParsePipe.html",[96,0.616,614,2.72]],["body/injectables/MenuDataParsePipe.html",[2,0.017,3,0.179,4,0.179,10,1.103,17,0.259,21,0.535,26,0.179,27,0.183,35,1.565,93,1.421,96,0.904,97,1.484,105,1.778,180,2.67,190,1.959,194,1.959,199,1.484,200,1.777,205,3.049,206,1.777,207,3.049,220,1.696,222,1.421,223,1.959,288,2.175,325,3.843,335,2.241,353,3.304,363,1.959,438,3.02,451,2.061,470,2.061,534,4.867,614,3.989,615,5.45,616,3.852,617,3.304,618,4.867,619,4.867,620,4.867,621,5.797,622,4.262,623,4.867,624,4.867,625,4.887,626,5.797,627,4.262,628,5.199,629,4.867,630,4.262,631,3.02,632,3.684,633,4.262,634,4.262,635,4.262,636,3.684,637,4.262,638,4.262,639,2.604,640,2.3,641,3.684,642,4.262,643,4.262,644,4.262,645,3.684,646,3.684,647,3.684]],["title/controllers/MenusController.html",[0,1.528,648,2.72]],["body/controllers/MenusController.html",[0,0.887,2,0.017,3,0.093,4,0.093,8,2.268,9,2.387,10,1.477,11,2.159,12,2.058,13,1.645,17,0.268,18,2.347,19,1.361,20,1.024,21,0.28,24,3.485,25,0.712,26,0.093,27,0.065,28,0.887,29,0.602,33,1.361,34,3.077,35,1.416,105,0.872,119,2.302,133,1.964,138,2.387,139,1.137,140,1.46,141,2.013,142,1.46,143,1.46,144,3.234,145,0.848,150,1.361,154,2.849,194,1.024,199,0.776,200,0.929,206,1.465,219,1.896,220,1.398,222,1.645,223,1.614,251,1.896,284,1.869,305,2.34,325,4.06,331,2.718,335,2.271,336,1.579,346,3.193,352,2.776,365,2.314,366,1.699,367,1.277,451,1.078,469,1.896,502,1.361,516,2.219,562,1.514,564,3.428,614,1.579,616,1.361,631,2.489,639,2.146,640,1.896,648,2.489,649,1.926,650,1.727,651,1.902,652,2.491,653,2.013,654,1.896,655,1.926,656,2.228,657,4.935,658,2.228,659,2.228,660,3.759,661,2.228,662,2.228,663,1.727,664,3.08,665,3.047,666,2.228,667,2.013,668,2.146,669,1.579,670,3.281,671,3.234,672,1.579,673,3.281,674,1.926,675,3.037,676,2.228,677,1.926,678,2.228,679,2.228,680,3.759,681,5.24,682,3.513,683,2.228,684,1.926,685,2.723,686,2.228,687,2.228,688,1.926,689,4.172,690,2.228,691,3.081,692,2.228,693,2.228,694,2.228,695,2.723,696,2.228,697,2.146,698,1.579,699,2.723,700,2.228,701,1.579,702,1.727,703,3.081,704,2.656,705,1.727,706,4.511,707,3.081,708,1.361,709,1.926,710,1.727,711,1.137,712,1.361,713,1.203,714,1.926,715,2.656,716,1.926,717,2.228,718,2.228,719,3.371,720,3.371,721,2.723,722,3.513,723,2.228,724,2.228,725,2.228,726,3.513,727,2.489,728,2.489,729,2.228,730,3.513,731,2.228,732,2.228,733,2.228,734,2.228,735,2.228,736,2.228,737,2.228,738,2.228,739,2.228]],["title/modules/MenusModule.html",[37,1.127,740,2.516]],["body/modules/MenusModule.html",[2,0.017,3,0.213,4,0.213,17,0.283,21,0.639,26,0.213,27,0.148,37,2.012,39,2.338,40,2.461,41,2.461,42,2.226,43,3.05,44,2.461,53,3.829,86,3.334,88,2.915,92,3.108,171,3.108,172,1.935,335,2.025,336,3.605,373,2.103,374,2.746,648,4.856,715,4.585,716,4.398,740,5.037,741,4.398,742,5.088,743,4.398,744,5.088,745,5.088,746,5.088]],["title/injectables/MenusService.html",[96,0.616,715,2.346]],["body/injectables/MenusService.html",[2,0.017,3,0.141,4,0.141,13,1.598,17,0.255,21,0.423,26,0.141,27,0.098,29,1.294,35,1.656,96,0.769,97,1.173,105,1.19,172,1.282,180,2.84,183,3.278,185,3.153,190,2.563,197,1.931,201,2.059,202,1.282,203,1.474,205,2.318,207,2.697,284,1.637,305,2.393,325,4.302,335,2.22,336,2.388,365,1.173,451,1.63,516,2.445,562,2.234,564,3.391,631,3.395,651,2.096,652,2.746,653,2.746,654,2.587,655,4.143,664,3.104,665,3.403,677,4.143,681,4.974,684,4.143,688,4.143,689,4.594,713,1.819,715,2.928,747,2.913,748,4.792,749,2.913,750,3.37,751,4.143,752,3.37,753,4.792,754,3.37,755,3.715,756,3.37,757,3.37,758,3.37,759,3.37,760,2.913,761,3.37,762,4.792,763,3.37,764,3.37,765,2.913,766,2.388,767,2.913,768,2.388,769,2.388,770,3.37,771,3.37,772,3.37]],["title/entities/Reservation.html",[173,1.46,558,1.679]],["body/entities/Reservation.html",[2,0.017,3,0.119,4,0.119,10,1.625,17,0.254,25,0.906,26,0.119,27,0.123,173,1.921,175,2.278,176,1.732,202,1.079,210,2.107,284,1.643,289,2.787,305,2.232,341,3.579,342,3.579,343,2.322,344,3.086,345,3.727,346,3.189,351,3.83,352,2.747,356,4.367,357,4.34,358,3.653,360,2.769,361,2.198,363,1.303,365,1.759,373,2.278,374,1.531,445,4.241,453,2.994,465,4.84,466,3.579,470,2.044,487,2.769,558,1.849,560,3.086,561,3.579,562,1.759,563,3.579,564,2.443,565,3.579,568,3.579,569,2.994,570,2.994,573,3.579,575,3.579,583,2.769,590,4.114,591,3.276,593,3.597,594,2.009,595,3.653,597,2.994,599,3.967,603,3.579,605,2.198,606,2.198,609,4.262,610,3.579,611,2.994,773,2.451,774,2.836,775,4.226,776,2.836,777,2.836,778,2.836,779,2.009,780,2.836,781,3.276,782,3.276,783,2.836,784,2.836,785,3.653,786,2.836,787,2.836,788,3.967,789,3.967,790,2.836,791,2.836,792,2.836,793,2.836,794,2.836,795,2.836,796,4.226,797,2.836,798,4.226,799,2.836,800,2.836,801,4.226,802,2.836,803,2.836,804,2.451,805,2.836,806,2.836,807,2.836,808,2.836,809,2.451,810,2.009]],["title/injectables/ReservationAmountParsePipe.html",[96,0.616,811,2.72]],["body/injectables/ReservationAmountParsePipe.html",[2,0.017,3,0.198,4,0.198,8,2.173,17,0.224,21,0.594,26,0.198,27,0.137,35,1.645,93,1.577,96,0.967,97,1.647,105,1.495,194,2.173,199,1.647,200,1.972,206,2.512,220,2.398,222,2.008,223,2.768,305,2.256,344,4.049,433,4.267,538,3.099,617,3.666,619,5.207,624,5.207,625,5.138,626,6.032,628,5.409,629,5.207,632,4.088,640,3.251,641,4.088,811,4.267,812,4.729,813,6.023,814,4.729,815,4.729,816,4.729]],["title/entities/ReservationMenu.html",[558,1.679,593,2.2]],["body/entities/ReservationMenu.html",[2,0.017,3,0.179,4,0.179,10,1.736,17,0.249,25,1.361,26,0.179,27,0.124,173,2.854,174,2.442,202,1.621,305,2.353,328,2.061,335,2.987,345,3.612,346,3.133,351,3.843,352,2.652,365,2.195,558,2.463,562,2.195,583,3.689,590,4.394,593,3.226,597,3.989,599,4.752,601,3.989,609,4.131,610,4.467,681,4.887,779,3.02,817,6.192,818,3.684,819,5.45,820,4.262,821,5.63,822,4.262,823,4.262,824,5.63,825,4.262,826,4.262,827,3.02,828,5.63]],["title/controllers/ReservationsController.html",[0,1.528,829,2.72]],["body/controllers/ReservationsController.html",[0,0.786,2,0.017,3,0.083,4,0.083,8,2.616,9,2.616,10,1.695,11,2.366,12,2.256,13,1.803,17,0.257,18,2.487,19,1.207,20,0.908,21,0.248,24,3.304,25,0.631,26,0.083,27,0.057,28,0.786,29,0.533,33,1.207,34,2.898,35,1.256,105,1.144,119,2.09,133,2.266,138,2.753,139,1.008,140,1.294,141,2.3,142,1.294,143,2.63,144,3.544,145,0.751,150,1.207,154,2.09,173,2.057,175,1.064,194,0.908,199,0.688,200,0.824,206,1.33,219,1.722,220,1.27,222,1.803,223,1.466,228,1.399,251,2.919,284,1.981,305,2.332,331,2.815,337,3.505,341,3.832,342,3.832,343,2.486,344,3.477,346,3.255,352,2.831,364,1.399,365,2.237,366,1.543,367,1.828,445,3.6,451,0.955,452,2.26,469,1.722,502,1.207,516,2.048,562,1.111,564,3.406,636,2.758,639,1.949,640,1.722,651,1.756,652,2.3,653,1.828,654,1.722,660,4.372,663,1.531,664,2.959,665,2.904,667,1.828,668,1.949,669,1.399,670,3.09,671,4.29,672,3.583,673,3.09,674,1.707,680,3.469,685,3.111,691,2.843,697,1.949,698,1.399,701,1.399,702,1.531,703,2.843,704,2.452,705,1.531,706,4.334,707,4.032,708,1.207,709,1.707,710,1.531,711,1.008,712,1.207,713,1.066,714,1.707,719,2.473,720,2.473,721,2.473,727,2.26,728,2.26,781,2.473,782,2.473,788,3.265,789,3.265,811,2.26,819,5.753,829,2.26,830,1.707,831,1.399,832,1.707,833,1.975,834,1.975,835,1.707,836,1.975,837,1.975,838,3.19,839,3.19,840,3.19,841,1.975,842,1.975,843,1.975,844,1.975,845,1.975,846,1.975,847,1.975,848,1.975,849,1.975,850,1.975,851,1.975,852,4.009,853,1.975,854,1.975,855,1.975,856,1.975,857,1.975,858,4.013,859,2.452,860,1.707,861,1.975,862,1.975,863,4.013,864,3.469,865,3.19,866,3.19,867,1.975,868,1.975,869,1.975,870,1.975,871,1.975,872,1.975,873,2.09,874,1.975,875,1.975,876,1.975,877,1.975,878,1.975,879,1.975,880,1.975,881,1.975,882,1.975,883,1.975,884,1.975,885,1.975]],["title/modules/ReservationsModule.html",[37,1.127,886,2.516]],["body/modules/ReservationsModule.html",[2,0.017,3,0.207,4,0.207,17,0.287,21,0.62,26,0.207,27,0.144,37,1.985,39,2.271,40,2.391,41,2.391,42,2.162,43,2.996,44,2.391,53,3.801,86,3.238,88,2.832,92,3.019,171,3.019,172,1.88,173,1.88,175,2.065,176,3.019,335,2.465,364,3.502,373,2.065,374,2.668,827,3.502,829,4.792,859,4.552,860,4.272,886,5.009,887,4.272,888,4.942,889,4.272,890,4.942,891,4.942,892,4.942]],["title/injectables/ReservationsService.html",[96,0.616,859,2.346]],["body/injectables/ReservationsService.html",[2,0.017,3,0.116,4,0.116,8,2.542,10,1.67,13,1.66,17,0.252,21,0.347,26,0.116,27,0.08,29,1.344,35,1.471,96,0.666,97,0.963,105,1.545,172,1.053,173,1.578,175,1.844,180,2.477,183,3.482,185,2.965,190,1.907,197,1.586,201,1.691,202,1.053,203,1.211,205,2.408,207,2.675,208,2.145,210,1.73,222,0.923,261,3.527,284,1.461,305,2.318,335,2.202,337,3.888,341,1.961,342,1.961,343,2.723,344,1.691,364,1.961,365,1.445,366,1.339,367,1.586,373,0.923,380,1.691,451,1.339,452,2.94,516,2.117,560,1.691,562,2.363,563,1.961,564,3.21,593,2.853,605,2.145,606,2.145,651,2.178,652,2.853,653,2.378,654,2.24,664,2.866,665,3.175,713,1.494,749,2.392,751,3.587,755,2.145,760,2.392,765,2.392,766,1.961,767,2.392,768,1.961,769,1.961,810,1.961,827,1.961,852,4.348,859,2.535,873,4.228,893,2.392,894,4.304,895,2.767,896,2.767,897,2.767,898,2.767,899,3.217,900,2.767,901,3.217,902,2.767,903,3.217,904,2.767,905,2.767,906,2.767,907,2.767,908,2.392,909,2.767,910,2.767,911,2.767,912,4.15,913,2.767,914,2.767,915,2.767,916,2.767,917,2.767,918,4.15,919,2.767,920,2.392,921,4.15,922,2.767,923,2.767,924,2.767,925,2.767,926,2.767,927,2.767,928,2.767,929,1.961,930,1.961,931,2.145,932,2.392,933,2.767,934,2.767,935,2.767]],["title/classes/ResponseFormat.html",[27,0.111,286,2.346]],["body/classes/ResponseFormat.html",[2,0.017,3,0.157,4,0.157,9,3.224,11,3.233,12,3.112,13,2.489,17,0.191,20,3.356,21,0.469,26,0.216,27,0.15,93,1.717,131,3.429,190,2.367,203,2.253,280,2.447,281,4.163,282,2.646,283,4.367,284,2.332,285,2.951,286,3.146,287,5.003,288,3.008,289,3.112,290,3.992,291,3.374,292,3.649,293,3.992,294,3.992,295,3.992,296,2.895,297,3.649,298,3.992,299,3.992,300,3.992,301,3.992,302,3.992,303,2.282,304,4.569,305,1.577,306,4.501,307,2.895,308,2.895,388,3.228,936,5.15,937,3.735,938,3.735,939,3.735,940,3.735,941,3.735,942,3.735]],["title/injectables/ResponseInterceptor.html",[96,0.616,943,2.976]],["body/injectables/ResponseInterceptor.html",[2,0.017,3,0.194,4,0.194,11,2.029,12,2.481,17,0.266,21,0.582,26,0.194,27,0.135,28,1.846,29,1.252,35,1.152,55,3.535,82,3.596,93,1.547,96,0.955,97,1.615,105,1.82,116,3.286,124,3.286,133,1.846,138,2.244,145,1.764,222,1.547,239,4.012,286,2.834,401,3.596,403,4.215,411,4.01,500,4.01,502,2.834,509,3.286,616,2.834,943,4.612,944,4.01,945,5.949,946,4.638,947,5.949,948,5.37,949,6.928,950,4.638,951,6.567,952,5.949,953,4.638,954,5.949,955,4.01,956,4.638,957,3.596,958,4.638,959,5.949,960,4.638,961,4.638,962,4.638,963,4.638,964,4.638,965,4.638,966,4.638]],["title/entities/Restaurant.html",[373,1.28,558,1.679]],["body/entities/Restaurant.html",[2,0.017,3,0.117,4,0.117,10,1.08,17,0.232,25,0.89,26,0.117,27,0.121,173,2.373,174,1.597,175,2.267,176,1.702,202,1.06,210,2.085,284,2.193,289,3.055,291,3.637,305,2.036,330,3.054,331,2.085,335,2.483,345,3.81,346,3.228,351,3.896,352,2.708,360,3.637,363,1.281,365,2.315,372,3.542,373,1.391,445,3.574,470,1.348,558,1.825,560,3.054,561,3.542,562,1.741,565,3.542,567,2.16,568,3.542,569,4.419,570,4.419,571,5.155,573,2.955,575,2.955,583,2.733,590,2.733,594,2.955,597,1.974,599,2.955,601,1.974,603,2.955,608,2.409,609,3.894,610,2.955,611,3.542,650,3.875,779,1.974,788,3.932,789,3.932,827,1.974,831,3.542,967,2.409,968,4.171,969,2.787,970,6.238,971,5.55,972,2.787,973,4.798,974,2.787,975,2.787,976,2.787,977,2.787,978,2.787,979,5.55,980,4.171,981,2.787,982,4.171,983,2.787,984,4.171,985,2.787,986,2.787,987,4.171,988,2.787,989,2.787,990,2.787,991,4.171,992,2.787,993,2.787,994,2.787,995,2.787,996,4.171,997,2.787]],["title/injectables/RestaurantExistsMiddleware.html",[96,0.616,998,2.72]],["body/injectables/RestaurantExistsMiddleware.html",[2,0.017,3,0.194,4,0.194,17,0.273,21,0.582,26,0.194,27,0.135,29,1.606,62,3.211,93,1.547,96,0.955,97,1.615,105,1.152,133,2.758,138,2.244,145,1.764,172,1.764,180,2.614,183,3.956,185,3.425,197,2.658,201,2.834,202,1.764,203,2.029,205,2.877,207,2.244,235,4.612,237,4.612,238,5.677,239,4.232,243,4.612,373,1.547,374,2.504,475,2.658,562,1.615,564,2.877,998,4.215,999,5.677,1000,4.01,1001,4.638,1002,4.638,1003,4.638,1004,3.596,1005,4.638,1006,4.638]],["title/guards/RestaurantOwnerGuard.html",[708,2.346,1007,2.72]],["body/guards/RestaurantOwnerGuard.html",[2,0.017,3,0.187,4,0.187,10,1.152,17,0.27,21,0.559,26,0.187,27,0.129,29,1.201,35,1.105,93,1.484,96,0.93,105,1.833,133,2.306,145,1.693,172,1.693,180,2.563,183,3.681,194,2.045,195,3.153,197,2.55,199,1.549,200,1.856,202,1.693,203,1.947,205,2.153,206,2.685,207,2.153,210,2.415,220,2.563,222,2.147,223,2.662,231,3.153,232,3.153,373,2.147,374,2.402,509,3.153,562,1.549,564,2.802,708,3.539,948,5.287,957,3.45,1004,3.45,1008,5.566,1009,3.847,1010,5.896,1011,3.847,1012,4.45,1013,5.007,1014,5.007,1015,4.45,1016,4.49,1017,4.45,1018,4.45,1019,4.45,1020,4.45,1021,4.45,1022,4.45,1023,4.45]],["title/controllers/RestaurantsController.html",[0,1.528,1024,2.72]],["body/controllers/RestaurantsController.html",[0,0.89,2,0.017,3,0.094,4,0.094,8,2.747,9,2.996,10,1.689,11,2.709,12,2.583,13,2.065,17,0.261,18,2.902,19,1.365,20,1.027,21,0.281,24,3.489,25,0.714,26,0.094,27,0.065,28,0.89,29,0.603,33,1.365,34,3.081,35,1.335,105,1.081,119,3.239,133,2.379,138,2.891,139,1.14,140,1.464,141,2.496,142,1.464,143,2.854,144,3.239,145,0.85,150,1.365,154,2.854,194,1.027,199,0.778,200,0.932,206,1.468,219,1.9,220,1.401,222,1.648,223,1.618,251,2.902,284,2.187,305,2.171,330,3.489,331,2.897,346,3.102,352,2.697,365,1.989,366,1.703,367,1.28,368,3.985,372,4.047,373,1.904,451,1.081,469,1.9,502,1.365,516,2.223,562,1.517,564,3.272,639,2.151,640,1.9,651,1.905,652,2.496,653,2.017,654,1.9,663,1.732,664,3.082,665,3.05,667,2.017,668,2.151,669,1.583,670,3.285,671,4.275,672,3.502,673,3.285,675,1.932,685,2.729,691,3.086,697,2.151,698,1.583,701,3.086,702,1.732,703,3.086,704,2.661,705,1.732,706,3.502,707,4.047,708,1.365,710,1.732,711,1.14,712,1.365,713,1.206,719,2.729,720,3.377,721,1.732,727,2.494,728,2.494,832,1.932,835,1.932,873,2.307,1024,2.494,1025,1.932,1026,3.831,1027,2.235,1028,2.235,1029,2.235,1030,2.235,1031,2.235,1032,3.521,1033,2.235,1034,2.235,1035,2.235,1036,2.235,1037,2.235,1038,3.521,1039,2.235,1040,2.235,1041,2.235,1042,2.235,1043,2.235,1044,2.235,1045,2.235,1046,4.176,1047,2.235,1048,2.235,1049,2.235,1050,2.235,1051,2.235,1052,2.729,1053,1.732,1054,2.661,1055,1.932,1056,2.235,1057,2.235,1058,2.235,1059,2.235,1060,2.235,1061,2.235,1062,2.235,1063,2.235,1064,2.235,1065,3.766,1066,2.235,1067,2.235,1068,2.235,1069,2.235,1070,2.235,1071,2.235,1072,2.235,1073,2.235,1074,2.235]],["title/modules/RestaurantsModule.html",[37,1.127,52,2.516]],["body/modules/RestaurantsModule.html",[2,0.017,3,0.176,4,0.176,13,1.86,17,0.281,21,0.528,26,0.176,27,0.122,37,2.037,39,1.931,40,2.033,41,2.033,42,1.838,43,2.698,44,2.698,52,5.055,53,3.64,57,3.633,58,4.822,59,5.765,61,4.822,62,2.268,70,4.822,86,2.754,88,2.408,92,2.568,93,1.401,171,2.568,172,1.598,373,1.401,740,4.77,886,4.77,998,2.978,1024,4.436,1053,3.258,1054,4.686,1055,3.633,1065,4.822,1075,3.633,1076,4.203,1077,3.633,1078,3.633,1079,4.203,1080,4.203,1081,4.203,1082,3.258,1083,4.203,1084,4.203,1085,4.203,1086,4.203,1087,4.203,1088,4.203,1089,4.203,1090,4.203,1091,4.203]],["title/injectables/RestaurantsService.html",[96,0.616,1054,2.346]],["body/injectables/RestaurantsService.html",[2,0.017,3,0.132,4,0.132,8,2.471,10,1.846,13,1.793,17,0.256,21,0.396,26,0.132,27,0.092,29,1.235,35,1.554,96,0.734,97,1.1,105,1.335,172,1.201,175,1.966,180,2.796,183,3.182,185,3.092,190,2.471,195,2.238,197,1.81,199,1.1,200,1.317,201,1.929,202,1.201,203,1.382,205,2.213,206,1.317,207,2.601,210,2.459,220,1.257,222,1.053,231,2.238,232,2.238,284,1.579,305,2.328,330,1.929,331,1.317,365,1.1,368,4.21,372,2.238,373,2.086,380,2.795,451,1.528,516,2.334,562,2.399,640,1.705,650,3.546,651,2.001,652,3.081,653,2.621,654,2.469,664,3.027,665,3.329,713,1.705,755,2.448,766,2.238,768,2.238,769,2.238,873,4.409,899,3.546,901,3.546,903,3.546,929,3.241,930,3.241,1004,2.448,1011,2.73,1013,3.954,1046,4.516,1052,3.546,1053,2.448,1054,2.795,1092,2.73,1093,3.158,1094,4.574,1095,3.158,1096,3.158,1097,3.158,1098,3.158,1099,3.158,1100,3.158,1101,3.158,1102,3.158,1103,4.574,1104,4.574,1105,4.574,1106,3.158,1107,3.158,1108,3.158]],["title/guards/RoleGuard.html",[1007,2.72,1109,2.976]],["body/guards/RoleGuard.html",[2,0.017,3,0.17,4,0.17,8,1.863,10,1.592,17,0.263,21,0.509,26,0.17,27,0.118,29,1.47,35,1.632,93,1.352,96,0.874,105,1.753,133,2.168,139,3.138,145,1.542,175,1.816,180,2.448,184,3.812,196,3.143,198,3.505,199,1.412,200,1.691,203,1.774,205,3.317,206,2.564,207,1.961,220,2.168,222,1.816,227,4.222,230,3.505,470,1.961,509,2.873,538,2.657,711,3.83,712,2.477,948,5.096,957,3.143,1010,5.683,1014,4.708,1016,4.222,1082,3.143,1109,4.222,1110,3.505,1111,5.446,1112,4.054,1113,7.214,1114,4.054,1115,4.054,1116,5.446,1117,4.054,1118,4.054,1119,4.054,1120,5.446,1121,4.054,1122,4.054,1123,4.054,1124,4.054,1125,5.446,1126,4.054,1127,4.054,1128,4.054,1129,4.054]],["title/injectables/TypeormService.html",[96,0.616,384,2.72]],["body/injectables/TypeormService.html",[2,0.017,3,0.221,4,0.221,17,0.27,21,0.661,26,0.221,27,0.153,28,2.096,29,1.421,35,1.307,79,4.552,93,1.756,96,1.034,97,1.833,100,3.699,103,3.731,172,2.003,384,4.563,1130,4.552,1131,7.25,1132,5.266,1133,5.266,1134,6.441,1135,5.266,1136,6.959,1137,4.082,1138,6.441,1139,5.266]],["title/classes/UpdateMenuDto.html",[27,0.111,689,2.516]],["body/classes/UpdateMenuDto.html",[2,0.017,3,0.245,4,0.245,17,0.255,25,1.87,26,0.245,27,0.17,325,3.353,327,4.537,328,3.319,631,4.147,651,2.56,689,4.496,1140,5.059,1141,6.862,1142,4.537]],["title/classes/UpdateReservationDto.html",[27,0.111,852,2.516]],["body/classes/UpdateReservationDto.html",[2,0.017,3,0.245,4,0.245,17,0.255,25,1.87,26,0.245,27,0.17,328,3.319,337,3.353,339,4.537,452,4.147,651,2.56,852,4.496,1142,4.537,1143,5.059,1144,6.862]],["title/classes/UpdateRestaurantDto.html",[27,0.111,1046,2.516]],["body/classes/UpdateRestaurantDto.html",[2,0.017,3,0.245,4,0.245,17,0.255,26,0.245,27,0.17,328,3.314,368,3.567,370,4.526,651,2.554,1046,4.49,1052,4.526,1142,4.526,1145,5.047,1146,6.852,1147,4.526,1148,4.137]],["title/classes/UpdateUserDto.html",[27,0.111,1149,2.516]],["body/classes/UpdateUserDto.html",[2,0.017,3,0.244,4,0.244,17,0.254,26,0.244,27,0.169,328,3.305,375,3.55,377,4.504,382,4.174,651,2.542,1147,4.504,1148,4.117,1149,4.477,1150,5.023,1151,6.833,1152,5.81,1153,4.504]],["title/entities/User.html",[175,1.28,558,1.679]],["body/entities/User.html",[2,0.017,3,0.129,4,0.129,10,1.771,17,0.248,25,0.983,26,0.129,27,0.13,173,2.459,174,1.763,175,1.497,202,1.171,210,2.21,284,2.244,289,1.283,305,1.783,343,2.435,345,3.825,346,3.236,351,3.921,352,2.79,360,2.942,363,1.414,365,1.563,373,2.156,374,1.661,379,3.472,380,3.237,381,3.472,382,3.237,445,3.705,487,2.942,554,2.386,556,2.661,558,1.964,560,3.237,561,3.755,562,1.845,565,3.755,567,2.386,568,2.181,569,5.024,570,5.024,571,3.48,573,3.755,575,3.755,583,2.942,590,2.942,591,3.48,594,3.181,601,2.181,603,3.755,607,3.881,609,4.375,611,3.755,711,3.406,712,1.88,779,2.181,781,3.48,782,3.48,785,3.881,804,2.661,809,2.661,831,3.755,1026,4.108,1154,2.661,1155,3.078,1156,3.078,1157,3.078,1158,6.466,1159,4.489,1160,3.078,1161,3.078,1162,3.078,1163,3.078,1164,3.078,1165,3.078,1166,4.489,1167,3.078,1168,4.489,1169,3.078,1170,4.489,1171,3.078,1172,3.078,1173,3.078,1174,5.825,1175,3.078,1176,3.078,1177,4.489,1178,3.078]],["title/controllers/UsersController.html",[0,1.528,1179,2.72]],["body/controllers/UsersController.html",[0,0.81,2,0.017,3,0.085,4,0.085,8,3.082,9,3.288,10,1.848,11,2.974,12,2.835,13,2.267,17,0.256,18,3.233,19,1.243,20,0.935,21,0.255,24,3.776,25,0.65,26,0.085,27,0.059,28,0.81,29,0.549,33,2.864,34,3.432,35,1.487,105,0.811,119,4.246,121,2.825,130,3.174,133,2.669,138,3.068,139,2.392,140,1.333,141,3.141,142,1.333,143,2.141,144,3.364,145,0.774,150,1.243,154,2.683,173,1.558,174,1.166,175,1.365,180,2.627,184,2.21,190,2.155,194,0.935,199,0.709,200,0.849,206,1.363,210,1.363,219,1.764,220,1.301,222,1.563,223,1.502,228,1.442,251,1.764,305,1.942,331,1.363,334,1.333,343,1.502,346,2.051,352,1.783,365,1.138,366,1.581,367,1.166,375,3.52,378,1.759,379,2.141,451,0.984,469,1.764,502,1.243,516,1.668,562,1.909,639,1.997,640,1.764,651,1.43,654,1.764,664,2.989,665,2.94,667,1.872,668,1.997,669,1.442,670,3.137,671,3.072,672,1.442,673,3.137,691,2.901,697,1.997,698,1.442,701,2.901,703,2.901,704,2.502,706,1.442,707,2.901,711,1.038,712,1.243,713,1.098,727,2.315,728,2.315,864,1.759,1149,4.05,1153,2.533,1179,2.315,1180,1.759,1181,2.825,1182,3.268,1183,3.268,1184,3.268,1185,2.825,1186,3.54,1187,2.035,1188,6.18,1189,2.035,1190,2.035,1191,4.095,1192,3.268,1193,2.035,1194,3.268,1195,2.035,1196,2.035,1197,2.035,1198,3.268,1199,2.035,1200,3.268,1201,2.035,1202,2.035,1203,3.268,1204,2.035,1205,3.268,1206,2.035,1207,3.268,1208,1.759,1209,2.035,1210,2.035,1211,2.035,1212,2.035,1213,2.035,1214,2.035,1215,2.035,1216,2.035,1217,2.035,1218,2.035,1219,3.268,1220,2.035,1221,2.035,1222,2.035,1223,2.035,1224,2.035,1225,2.035,1226,2.035,1227,2.035,1228,2.035,1229,2.035,1230,2.035,1231,2.035,1232,2.035,1233,1.578,1234,1.759,1235,2.035,1236,2.035,1237,2.035,1238,2.035,1239,2.035,1240,2.035,1241,2.035,1242,4.095,1243,2.035,1244,4.095,1245,2.035,1246,2.035,1247,2.035,1248,2.035,1249,2.035,1250,2.035,1251,2.035,1252,2.035,1253,2.035,1254,2.035,1255,2.035,1256,2.035,1257,2.035,1258,2.035,1259,2.035,1260,2.035,1261,2.035,1262,2.035,1263,2.035,1264,3.268,1265,2.035,1266,2.035,1267,2.035,1268,2.035,1269,2.035,1270,2.035,1271,2.035]],["title/modules/UsersModule.html",[37,1.127,53,1.959]],["body/modules/UsersModule.html",[2,0.017,3,0.215,4,0.215,17,0.28,21,0.644,26,0.215,27,0.149,37,2.019,39,2.358,40,2.482,41,2.482,42,2.245,43,3.066,44,3.066,53,3.889,88,2.94,92,3.135,171,3.135,172,1.952,173,2.411,174,2.94,175,1.711,178,4.436,184,4.257,1179,4.874,1233,3.978,1234,4.436,1272,4.436,1273,4.436,1274,4.436,1275,5.131,1276,5.131]],["title/injectables/UsersService.html",[96,0.616,184,2.072]],["body/injectables/UsersService.html",[2,0.017,3,0.094,4,0.094,10,1.8,13,1.456,17,0.237,21,0.282,26,0.094,27,0.065,29,1.179,35,1.621,96,0.567,97,0.781,105,1.777,130,1.739,172,0.853,173,0.853,174,1.285,175,2.257,180,3.001,183,3.231,184,1.906,185,2.751,187,3.775,190,2.932,194,1.031,197,1.285,199,0.781,200,0.935,201,1.37,202,0.853,203,0.981,204,1.939,205,2.112,206,1.472,207,3.462,208,4.176,209,4.656,210,2.777,220,1.405,222,1.177,223,1.031,261,4.627,284,1.987,288,1.144,289,1.472,305,2.152,320,3.509,343,2.276,365,0.781,373,0.748,375,3.291,379,3.53,382,2.157,451,1.085,470,1.085,516,1.802,560,1.37,562,2.318,563,1.589,651,1.545,652,2.838,653,2.023,654,1.906,664,2.605,665,2.919,667,2.023,713,1.211,766,1.589,768,1.589,769,1.589,831,2.502,894,3.052,899,2.737,901,2.737,903,2.737,908,1.939,920,1.939,929,3.509,930,1.589,931,1.739,932,1.939,1149,4.063,1153,2.737,1185,3.052,1186,3.775,1208,3.052,1233,1.739,1277,1.939,1278,4.367,1279,3.531,1280,3.531,1281,3.531,1282,2.243,1283,2.243,1284,3.531,1285,4.953,1286,2.243,1287,2.243,1288,2.243,1289,2.243,1290,3.531,1291,2.243,1292,3.531,1293,2.243,1294,2.243,1295,2.243,1296,3.531,1297,2.243,1298,2.243,1299,2.243,1300,2.243,1301,2.243,1302,2.243,1303,2.243,1304,2.243,1305,2.243,1306,3.531,1307,2.243,1308,2.243,1309,2.243,1310,2.243,1311,1.939,1312,5.721,1313,2.243,1314,3.531,1315,2.243,1316,4.281,1317,3.531,1318,3.531,1319,2.243,1320,2.243,1321,2.243,1322,2.243,1323,4.953,1324,3.531,1325,3.531,1326,3.531,1327,3.531,1328,4.367,1329,2.243,1330,2.243,1331,3.531,1332,2.243,1333,2.243]],["title/modules/UtilModule.html",[37,1.127,54,2.516]],["body/modules/UtilModule.html",[2,0.017,3,0.227,4,0.227,17,0.244,21,0.68,26,0.227,27,0.157,37,2.068,39,2.49,40,2.621,41,2.621,42,2.371,43,3.17,44,3.17,54,5.051,185,3.649,278,5.081,1334,4.685,1335,4.685,1336,4.685,1337,5.419,1338,5.419]],["title/injectables/UtilService.html",[96,0.616,185,1.764]],["body/injectables/UtilService.html",[2,0.017,3,0.098,4,0.098,8,2.061,10,0.944,13,1.496,17,0.24,21,0.294,26,0.098,27,0.106,28,0.931,29,0.631,35,1.51,67,1.813,96,0.585,97,0.814,99,1.813,100,2.971,103,1.657,105,1.804,114,1.813,131,1.969,145,0.889,153,2.939,180,2.317,181,3.477,183,3.282,185,1.677,190,1.075,194,1.075,195,1.657,199,1.27,202,0.889,206,1.521,207,2.17,210,2.428,220,1.452,222,1.496,223,1.075,231,1.657,232,1.657,239,2.74,242,1.532,244,1.813,245,1.813,255,2.022,261,1.657,284,2.008,289,1.871,305,1.782,343,2.329,363,1.075,365,2.027,379,3.6,381,1.532,382,3.357,470,2.17,480,1.657,538,1.532,558,1.962,562,1.913,616,1.429,618,3.154,620,3.154,621,4.38,623,2.022,639,1.429,640,1.262,645,2.022,646,2.022,647,2.022,664,2.816,665,2.971,667,1.34,668,2.229,704,2.74,873,3.815,929,1.657,930,1.657,931,1.813,1016,2.828,1316,3.154,1339,2.022,1340,5.822,1341,4.485,1342,3.648,1343,3.648,1344,4.485,1345,3.648,1346,4.485,1347,4.485,1348,2.339,1349,3.648,1350,5.067,1351,2.339,1352,3.648,1353,2.339,1354,2.339,1355,3.878,1356,2.339,1357,2.339,1358,3.648,1359,5.494,1360,2.339,1361,2.339,1362,5.067,1363,2.339,1364,3.648,1365,5.067,1366,2.339,1367,4.485,1368,5.067,1369,2.339,1370,3.648,1371,3.648,1372,3.648,1373,3.648,1374,3.648,1375,5.067,1376,3.154,1377,2.339,1378,3.648,1379,2.339,1380,4.485,1381,2.339,1382,2.339,1383,2.339,1384,2.339,1385,2.339,1386,2.339,1387,2.339,1388,3.648,1389,2.339,1390,2.339,1391,3.648,1392,2.339,1393,3.648,1394,3.648,1395,3.648,1396,3.648,1397,3.648,1398,2.339,1399,2.339,1400,2.339,1401,2.339,1402,2.022,1403,2.339,1404,2.339,1405,2.022,1406,3.154,1407,2.339,1408,2.339,1409,3.648,1410,2.339,1411,2.339,1412,2.339,1413,2.339,1414,3.878,1415,3.648,1416,2.339,1417,2.339,1418,2.339,1419,3.648,1420,3.648,1421,2.339,1422,2.339,1423,2.022,1424,2.339,1425,3.648,1426,2.339,1427,2.339,1428,3.648,1429,2.339,1430,2.339,1431,2.339,1432,2.339]],["title/coverage.html",[1433,5.248]],["body/coverage.html",[0,2.39,1,1.789,2,0.017,5,2.182,18,1.363,22,1.542,27,0.209,31,1.654,42,1.104,55,1.288,63,1.789,83,1.789,96,1.164,98,2.182,100,1.288,104,2.742,109,1.789,110,2.182,117,1.654,139,1.288,141,1.446,146,1.542,149,1.957,173,0.96,175,0.842,179,2.182,184,1.363,185,1.16,199,1.348,222,0.842,233,2.182,234,2.182,242,2.536,280,1.654,281,1.654,282,3.335,286,1.542,303,1.542,309,2.182,325,1.446,326,2.182,327,3,335,1.005,337,1.446,338,2.182,339,3,344,1.542,352,2.453,368,1.542,369,2.182,370,3,373,0.842,375,1.542,376,2.182,377,3,384,1.789,397,1.957,398,2.182,399,2.182,410,1.957,432,1.957,433,3.335,434,3,453,1.789,459,1.957,460,3,466,1.789,470,3.91,475,3.024,482,1.957,483,3,487,1.654,496,2.182,508,3,523,1.957,532,1.957,533,1.957,553,2.182,558,2.49,559,2.182,593,1.446,614,1.789,615,2.182,616,1.542,617,3,648,1.789,649,2.182,670,1.542,673,1.542,689,1.654,695,1.957,697,1.542,699,1.957,708,1.542,711,1.975,715,1.542,747,2.182,773,2.182,811,1.789,817,2.182,818,2.182,829,1.789,830,2.182,852,1.654,859,1.542,893,2.182,943,1.957,944,2.182,967,2.182,998,1.789,999,2.182,1000,2.182,1007,2.742,1008,2.182,1009,2.182,1024,1.789,1025,2.182,1046,1.654,1054,1.542,1092,2.182,1109,1.957,1110,2.182,1130,2.182,1137,1.957,1140,2.182,1143,2.182,1145,2.182,1149,1.654,1150,2.182,1154,2.182,1179,1.789,1180,2.182,1277,2.182,1339,2.182,1434,2.524,1435,4.707,1436,6.965,1437,5.277,1438,2.524,1439,7.967,1440,2.182,1441,7.739,1442,2.182,1443,2.182,1444,2.182,1445,2.182,1446,2.182,1447,6.45,1448,2.182,1449,6.319,1450,2.182,1451,2.182,1452,2.182,1453,2.182,1454,2.182,1455,2.182,1456,2.182,1457,2.182,1458,2.182,1459,2.182,1460,2.182,1461,2.182,1462,2.182,1463,3,1464,2.524,1465,2.182,1466,2.182,1467,5.277,1468,2.524,1469,3.87,1470,3.87,1471,2.524,1472,2.182,1473,3,1474,3.649,1475,2.524,1476,2.182,1477,2.182,1478,4.562,1479,2.182,1480,2.182,1481,2.182,1482,2.182,1483,2.524,1484,2.524,1485,2.524]],["title/dependencies.html",[39,2.123,1486,2.482]],["body/dependencies.html",[2,0.017,21,0.67,25,1.704,27,0.189,72,4.136,145,2.029,172,2.029,202,2.47,245,4.136,285,3.057,353,4.136,363,2.452,625,4.136,955,4.612,1082,4.136,1147,4.136,1148,3.78,1487,6.999,1488,5.335,1489,5.335,1490,5.335,1491,5.335,1492,5.335,1493,5.335,1494,5.335,1495,5.335,1496,5.335,1497,5.335,1498,4.612,1499,5.335,1500,5.335,1501,5.335,1502,5.335,1503,5.335,1504,5.335,1505,5.335,1506,5.335,1507,5.335,1508,5.335,1509,5.335,1510,5.335,1511,5.335]],["title/miscellaneous/functions.html",[1512,2.482,1513,4.62]],["body/miscellaneous/functions.html",[2,0.017,42,3.104,433,3.901,434,5.13,449,5.562,453,4.688,460,4.268,466,4.688,476,4.759,483,4.268,487,4.336,495,4.759,1465,4.759,1514,5.506,1515,5.506,1516,5.506,1517,5.506,1518,5.506]],["title/index.html",[543,2.768,1519,3.202,1520,3.202]],["body/index.html",[2,0.017,13,0.613,17,0.164,21,0.231,111,1.425,114,2.333,133,0.732,139,0.938,175,0.613,202,0.699,210,1.255,244,4.055,246,3.817,247,4.211,248,3.817,315,1.425,316,1.425,317,3.303,331,0.767,343,0.845,366,1.456,367,1.053,373,0.613,380,1.123,382,1.123,403,1.302,469,0.992,554,1.425,562,0.64,564,1.456,973,1.589,1026,1.425,1148,1.302,1181,1.589,1311,1.589,1486,1.425,1498,1.589,1521,1.838,1522,4.522,1523,1.838,1524,1.838,1525,5.522,1526,1.838,1527,3.009,1528,1.838,1529,3.817,1530,1.838,1531,3.009,1532,1.838,1533,1.838,1534,1.838,1535,1.838,1536,1.838,1537,1.838,1538,1.838,1539,1.838,1540,1.838,1541,1.838,1542,1.838,1543,1.838,1544,1.838,1545,3.009,1546,1.838,1547,4.871,1548,1.589,1549,1.838,1550,1.838,1551,1.838,1552,1.838,1553,1.838,1554,3.821,1555,1.838,1556,1.838,1557,1.838,1558,1.838,1559,3.821,1560,1.838,1561,1.838,1562,1.838,1563,1.838,1564,1.838,1565,1.838,1566,1.838,1567,3.009,1568,1.838,1569,1.838,1570,3.009,1571,1.838,1572,1.838,1573,1.838,1574,1.838,1575,1.838,1576,1.838,1577,1.838,1578,1.838,1579,1.838,1580,1.838,1581,1.838,1582,1.838,1583,3.009,1584,1.838,1585,1.838,1586,3.009,1587,4.416,1588,1.838,1589,1.838,1590,1.589,1591,1.838,1592,1.838,1593,1.838,1594,1.838,1595,1.838,1596,1.838,1597,1.838,1598,1.838,1599,1.838,1600,1.838,1601,3.821,1602,1.838,1603,1.838,1604,1.838,1605,1.838,1606,1.838,1607,3.009,1608,3.009,1609,3.009,1610,1.838,1611,1.838,1612,1.838,1613,1.838,1614,1.838,1615,1.838,1616,1.838,1617,1.838,1618,1.838,1619,2.602,1620,1.589,1621,1.838,1622,1.589,1623,3.009,1624,1.838,1625,1.838]],["title/modules.html",[1626,5.248]],["body/modules.html",[2,0.017,38,3.814,48,3.527,49,3.527,50,3.527,51,3.527,52,3.527,53,2.747,54,3.527,740,3.527,886,3.527,1627,7.822]],["title/overview.html",[1628,5.248]],["body/overview.html",[2,0.017,22,3.773,37,1.2,38,5.612,39,1.879,40,1.978,41,1.978,42,1.789,43,1.978,44,1.978,45,3.535,46,3.535,47,3.535,48,4.738,49,4.639,50,4.322,51,4.507,52,5.005,53,3.836,54,4.639,55,3.366,97,1.424,100,3.689,146,3.773,167,3.535,169,3.535,184,3.902,185,3.323,274,3.535,275,3.535,276,3.535,365,1.424,366,1.978,469,2.207,715,3.773,740,4.738,741,3.535,743,3.535,810,2.897,859,3.773,886,4.738,887,3.535,889,3.535,1054,4.417,1075,3.535,1077,3.535,1078,3.535,1272,3.535,1273,3.535,1274,3.535,1334,3.535,1335,3.535,1336,3.535,1629,4.089,1630,4.089,1631,4.089]],["title/properties.html",[1486,2.482,1632,3.994]],["body/properties.html",[2,0.017,31,3.98,32,4.708,332,4.303,1633,6.073,1634,6.073,1635,6.073]],["title/miscellaneous/typealiases.html",[1512,2.482,1636,4.62]],["body/miscellaneous/typealiases.html",[2,0.016,104,4.754,199,2.336,242,4.396,352,2.143,410,5.201,475,4.341,508,4.367,523,5.201,711,3.423,1137,5.201,1446,4.87,1448,4.87,1461,4.87,1462,4.87,1463,5.201,1473,4.367,1474,4.367,1637,5.634,1638,5.634,1639,5.8,1640,5.634,1641,5.634,1642,5.634,1643,4.87,1644,5.634]],["title/miscellaneous/variables.html",[1512,2.482,1645,4.62]],["body/miscellaneous/variables.html",[0,0.485,2,0.017,9,2.191,10,0.731,11,2.507,12,2.003,13,1.954,18,1.146,20,0.559,27,0.035,31,2.215,32,0.944,33,1.725,34,3.005,35,1.455,104,1.504,105,1.67,111,0.944,131,2.07,139,1.083,141,1.216,149,1.646,153,0.798,173,0.463,175,0.406,181,0.944,199,0.739,219,1.825,222,0.708,239,1.297,242,1.391,283,1.85,284,2.079,287,2.717,288,2.85,289,2.863,291,1.391,292,1.504,305,1.754,315,0.944,316,0.944,328,0.589,332,1.504,335,0.485,346,3.084,352,2.852,355,4.829,365,1.177,366,0.589,373,0.406,380,0.744,381,1.391,405,1.835,420,5.816,443,1.504,469,0.657,470,1.027,475,1.937,480,2,532,1.646,533,2.973,536,1.835,538,3.302,593,0.698,616,1.297,628,2.973,664,1.635,667,1.216,668,2.065,670,1.297,671,1.391,673,1.297,695,1.646,697,1.297,699,1.646,704,0.744,711,1.441,788,2.395,789,2.395,810,0.863,1007,0.863,1355,1.052,1376,1.052,1402,4.152,1405,4.829,1406,5.614,1414,1.835,1423,2.441,1440,1.052,1442,1.052,1443,1.052,1444,1.052,1445,1.052,1449,1.052,1450,4.533,1451,2.441,1452,2.441,1453,2.441,1454,2.441,1455,2.441,1456,3.315,1457,2.441,1458,2.441,1459,2.441,1460,2.441,1463,1.646,1466,1.052,1472,1.052,1473,0.944,1474,0.944,1476,1.052,1477,1.052,1478,1.052,1479,2.441,1480,3.315,1481,1.835,1482,1.835,1522,1.052,1529,1.052,1548,1.052,1590,1.052,1619,2.922,1620,1.835,1622,3.641,1632,5.342,1639,1.052,1643,1.052,1646,6.179,1647,1.217,1648,1.217,1649,1.217,1650,1.217,1651,1.217,1652,1.217,1653,3.381,1654,1.217,1655,1.217,1656,1.217,1657,1.217,1658,1.217,1659,1.217,1660,1.217,1661,1.217,1662,1.217,1663,1.217,1664,1.217,1665,1.217,1666,1.217,1667,1.217,1668,1.217,1669,1.217,1670,1.217,1671,1.217,1672,3.381,1673,6.268,1674,5.73,1675,2.123,1676,3.835,1677,2.123,1678,5.425,1679,2.123,1680,5.586,1681,2.123,1682,2.823,1683,2.823,1684,3.381,1685,2.823,1686,4.803,1687,2.123,1688,4.531,1689,4.531,1690,5.038,1691,3.381,1692,3.381,1693,2.123,1694,2.123,1695,2.123,1696,1.217,1697,1.217,1698,1.217,1699,2.123,1700,1.217,1701,1.217,1702,1.217,1703,2.123,1704,1.217,1705,1.217,1706,2.123,1707,2.123,1708,2.123,1709,2.123,1710,2.123,1711,1.217,1712,3.381,1713,3.381,1714,2.823,1715,1.217,1716,1.217,1717,1.217,1718,1.217,1719,1.217,1720,1.217,1721,1.217,1722,2.823,1723,1.217,1724,1.217,1725,1.217,1726,1.217,1727,1.217,1728,2.123,1729,1.217,1730,1.217,1731,1.217,1732,2.123,1733,1.217,1734,1.217,1735,1.217,1736,1.217,1737,1.217,1738,1.217,1739,1.217,1740,1.217,1741,1.217,1742,1.217,1743,1.217,1744,1.217,1745,4.531,1746,1.217,1747,1.217,1748,4.803,1749,1.217,1750,1.217,1751,1.217,1752,1.217,1753,1.217,1754,2.123,1755,1.217,1756,1.217,1757,1.217,1758,1.217,1759,1.217,1760,1.217,1761,1.217,1762,1.217,1763,1.217,1764,1.217,1765,1.217,1766,1.217,1767,1.217,1768,1.217,1769,1.217,1770,1.217,1771,1.217,1772,1.217,1773,1.217,1774,1.217,1775,1.217,1776,1.217,1777,1.217,1778,1.217,1779,1.217,1780,1.217,1781,1.217,1782,1.217,1783,1.217,1784,1.217,1785,1.217,1786,1.217,1787,1.217,1788,1.217,1789,1.217,1790,1.217,1791,1.217,1792,1.217,1793,1.217,1794,1.217,1795,1.217,1796,1.217,1797,1.217,1798,1.217,1799,1.217,1800,1.217,1801,1.217,1802,1.217,1803,1.217,1804,1.217]]],"invertedIndex":[["",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":470,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0'})@isstring({message",{"_index":981,"title":{},"body":{"entities/Restaurant.html":{}}}],["0.0.1",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0.14.1",{"_index":1495,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":1506,"title":{},"body":{"dependencies.html":{}}}],["0.3.21",{"_index":1508,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1494,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1439,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1475,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1483,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1464,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1471,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1435,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1436,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1437,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1438,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1467,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1469,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1468,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1470,"title":{},"body":{"coverage.html":{}}}],["00",{"_index":979,"title":{},"body":{"entities/Restaurant.html":{}}}],["000",{"_index":980,"title":{},"body":{"entities/Restaurant.html":{}}}],["010",{"_index":781,"title":{},"body":{"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/User.html":{}}}],["03",{"_index":789,"title":{},"body":{"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":365,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.11.13",{"_index":1501,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":1500,"title":{},"body":{"dependencies.html":{}}}],["1.8.0",{"_index":1497,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":469,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["10.1.13",{"_index":1530,"title":{},"body":{"index.html":{}}}],["10.3.13",{"_index":1580,"title":{},"body":{"index.html":{}}}],["10.3.13/winx64",{"_index":1578,"title":{},"body":{"index.html":{}}}],["100",{"_index":1159,"title":{},"body":{"entities/User.html":{}}}],["1000",{"_index":1376,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["100000})@isnotempty({message",{"_index":587,"title":{},"body":{"entities/Menu.html":{}}}],["1001",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1002",{"_index":1750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1003",{"_index":1753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1004",{"_index":1756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1005",{"_index":1759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["100_000",{"_index":613,"title":{},"body":{"entities/Menu.html":{}}}],["11",{"_index":973,"title":{},"body":{"entities/Restaurant.html":{},"index.html":{}}}],["11.0.0",{"_index":1491,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":1487,"title":{},"body":{"dependencies.html":{}}}],["11.0.6",{"_index":1490,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":782,"title":{},"body":{"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/User.html":{}}}],["13",{"_index":785,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["13t13:00",{"_index":807,"title":{},"body":{"entities/Reservation.html":{}}}],["13t13:00'})@isdate({message",{"_index":793,"title":{},"body":{"entities/Reservation.html":{}}}],["13t15:00",{"_index":808,"title":{},"body":{"entities/Reservation.html":{}}}],["13t15:00'})@isdate({message",{"_index":790,"title":{},"body":{"entities/Reservation.html":{}}}],["14",{"_index":1712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14:51:15",{"_index":996,"title":{},"body":{"entities/Restaurant.html":{}}}],["14:51:15'})@createdatecolumn",{"_index":974,"title":{},"body":{"entities/Restaurant.html":{}}}],["14:51:15'})@updatedatecolumn",{"_index":989,"title":{},"body":{"entities/Restaurant.html":{}}}],["15",{"_index":1631,"title":{},"body":{"overview.html":{}}}],["15t17:30",{"_index":840,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["16",{"_index":1630,"title":{},"body":{"overview.html":{}}}],["16t16:00",{"_index":839,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["1d",{"_index":1400,"title":{},"body":{"injectables/UtilService.html":{}}}],["1}${isnotemptyparam",{"_index":1422,"title":{},"body":{"injectables/UtilService.html":{}}}],["1})@apibearerauth()@apioperation({summary",{"_index":660,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{}}}],["1})@apioperation({summary",{"_index":675,"title":{},"body":{"controllers/MenusController.html":{},"controllers/RestaurantsController.html":{}}}],["1})@apiparam({name",{"_index":680,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{}}}],["1})@column({type",{"_index":601,"title":{},"body":{"entities/Menu.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["1})@isint({message",{"_index":798,"title":{},"body":{"entities/Reservation.html":{}}}],["1})@primarygeneratedcolumn",{"_index":779,"title":{},"body":{"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["1})@useguards(restaurantownerguard)@roles(['undefined'])@delete(':restaurantid",{"_index":1043,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["1})@useguards(restaurantownerguard)@roles(['undefined'])@patch(':restaurantid",{"_index":1050,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["2",{"_index":366,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["20",{"_index":1174,"title":{},"body":{"entities/User.html":{}}}],["200",{"_index":291,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"miscellaneous/variables.html":{}}}],["2000",{"_index":1762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2001",{"_index":1764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2002",{"_index":1766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2003",{"_index":1768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2004",{"_index":1770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2005",{"_index":1772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2006",{"_index":1774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2007",{"_index":1776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2008",{"_index":1778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2009",{"_index":1780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2010",{"_index":1782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["201].includes(status",{"_index":292,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["2025",{"_index":788,"title":{},"body":{"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"miscellaneous/variables.html":{}}}],["21:28:30.718",{"_index":1713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["24",{"_index":1374,"title":{},"body":{"injectables/UtilService.html":{}}}],["255",{"_index":581,"title":{},"body":{"entities/Menu.html":{}}}],["3",{"_index":367,"title":{},"body":{"classes/CreateReservationDto.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["3.13.0",{"_index":1504,"title":{},"body":{"dependencies.html":{}}}],["3000",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3001",{"_index":1786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3002",{"_index":1788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3306",{"_index":1590,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["3})@apiquery({name",{"_index":669,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["4",{"_index":909,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["4.0.1",{"_index":1488,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1511,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4000",{"_index":1791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4001",{"_index":1793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4002",{"_index":1795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4003",{"_index":1797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4004",{"_index":1799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["401",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["403",{"_index":1751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["404",{"_index":1754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["409",{"_index":1757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":810,"title":{},"body":{"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5.1.1",{"_index":1493,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":571,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["500",{"_index":1760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5678",{"_index":809,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["5678'})@isoptional()@isstring({message",{"_index":783,"title":{},"body":{"entities/Reservation.html":{}}}],["5678'})@isphonenumberformat()@column({type",{"_index":1164,"title":{},"body":{"entities/User.html":{}}}],["5m",{"_index":1398,"title":{},"body":{"injectables/UtilService.html":{}}}],["5})@isint({message",{"_index":774,"title":{},"body":{"entities/Reservation.html":{}}}],["6",{"_index":1629,"title":{},"body":{"overview.html":{}}}],["60",{"_index":1375,"title":{},"body":{"injectables/UtilService.html":{}}}],["7.8.1",{"_index":1507,"title":{},"body":{"dependencies.html":{}}}],["8080",{"_index":1665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9.0.2",{"_index":1502,"title":{},"body":{"dependencies.html":{}}}],["_res",{"_index":238,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["access",{"_index":1601,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1395,"title":{},"body":{"injectables/UtilService.html":{}}}],["alias",{"_index":1447,"title":{},"body":{"coverage.html":{}}}],["alloworigins",{"_index":1731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amount",{"_index":344,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"coverage.html":{}}}],["anyof",{"_index":1705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1522,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["api_path",{"_index":1450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apibearerauth",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth()@apioperation({summary",{"_index":1029,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apibody",{"_index":1620,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apibodywithcasemodel",{"_index":695,"title":{},"body":{"controllers/MenusController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apibodywithmodel",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiextramodels(...extramodels",{"_index":1695,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(createclass",{"_index":1702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(model",{"_index":1711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apiextramodels(pickmodel",{"_index":1729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apioperation",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":706,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apiparam({name",{"_index":685,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["apiproperty",{"_index":351,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["apiproperty({type",{"_index":345,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["apiquery",{"_index":707,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1619,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["apiresponsesearchmodel",{"_index":697,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsesearchmodel({searchmenuresponse",{"_index":666,"title":{},"body":{"controllers/MenusController.html":{}}}],["apiresponsesearchmodel({searchreservationresponse",{"_index":837,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["apiresponsesearchmodel({searchrestaurantresponse",{"_index":1031,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsesearchmodel({searchuserreservationresponse",{"_index":1218,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithcasemodel",{"_index":699,"title":{},"body":{"controllers/MenusController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsewithcasemodel({createmenudto",{"_index":656,"title":{},"body":{"controllers/MenusController.html":{}}}],["apiresponsewithmodel",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["apiresponsewithmodel({createreservationresponse",{"_index":833,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["apiresponsewithmodel({createrestaurantresponse",{"_index":1027,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({deleterestaurantresponse",{"_index":1041,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({deleteuserresponse",{"_index":1224,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({findonereservationresponse",{"_index":844,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["apiresponsewithmodel({findonerestaurantresponse",{"_index":1036,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({getmeresponse",{"_index":1213,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({loginresponse",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({logoutresponse",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({patchmenuresponse",{"_index":690,"title":{},"body":{"controllers/MenusController.html":{}}}],["apiresponsewithmodel({patchreservationresponse",{"_index":853,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["apiresponsewithmodel({patchuserresponse",{"_index":1229,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({refreshresponse",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiresponsewithmodel({searchmenuresponse",{"_index":678,"title":{},"body":{"controllers/MenusController.html":{}}}],["apiresponsewithmodel({signupresponse",{"_index":1209,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({updaterestaurantresponse",{"_index":1047,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["apiresponsewithmodel({validateemailresponse",{"_index":1189,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({validatephoneresponse",{"_index":1196,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({validateuseridresponse",{"_index":1202,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponsewithmodel({versionresponse",{"_index":7,"title":{},"body":{"controllers/AppController.html":{}}}],["app.controller",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller.ts",{"_index":1541,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":1542,"title":{},"body":{"index.html":{}}}],["app.service",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.service.ts",{"_index":1543,"title":{},"body":{"index.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply(restaurantexistsmiddleware",{"_index":1090,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["applydecorators",{"_index":1622,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["applydecorators(apibody",{"_index":1694,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(apiresponse",{"_index":1715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(setmetadata('roles",{"_index":1800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":38,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":22,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":443,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"miscellaneous/variables.html":{}}}],["args.object",{"_index":454,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["args.value",{"_index":494,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["argsrequired",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argumentmetadata",{"_index":626,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["argumentshost",{"_index":406,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["array",{"_index":1688,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(createmenudto",{"_index":723,"title":{},"body":{"controllers/MenusController.html":{}}}],["array.isarray(model",{"_index":1683,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":641,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["arrayminsize",{"_index":354,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["arrayminsize(1",{"_index":348,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["assignment.git",{"_index":1572,"title":{},"body":{"index.html":{}}}],["async",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["auth",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["auth.controller",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/login",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login'})@apibearerauth()@apioperation({summary",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/login'})@apibodywithmodel({logindto",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/logout'].some((ex",{"_index":253,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["auth/logout'})@apibearerauth()@apioperation({summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/refresh",{"_index":252,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["authcontroller",{"_index":109,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":48,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1635,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":248,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"index.html":{}}}],["authorization.replace(/^bearer\\s/i",{"_index":256,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["authservice",{"_index":146,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["b(\\d{3",{"_index":489,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["bad",{"_index":425,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["badrequest",{"_index":1744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["badrequestexception(errorprotocol",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["baseentity",{"_index":828,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["bcrypt",{"_index":1492,"title":{},"body":{"dependencies.html":{}}}],["bearer",{"_index":246,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"index.html":{}}}],["bearerparsermiddleware",{"_index":63,"title":{"injectables/BearerParserMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["bearerparsermiddleware).forroutes('*api",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["between",{"_index":905,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["between(+searchoption.amount[0",{"_index":927,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["blanc",{"_index":578,"title":{},"body":{"entities/Menu.html":{}}}],["body",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["body(menudataparsepipe",{"_index":722,"title":{},"body":{"controllers/MenusController.html":{}}}],["boolean",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"classes/ResponseFormat.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["brew",{"_index":1595,"title":{},"body":{"index.html":{}}}],["build",{"_index":1597,"title":{},"body":{"index.html":{}}}],["bulkmenus",{"_index":761,"title":{},"body":{"injectables/MenusService.html":{}}}],["bulkmenus.map",{"_index":764,"title":{},"body":{"injectables/MenusService.html":{}}}],["callhandler",{"_index":949,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["canactivate",{"_index":1010,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["canactivate(context",{"_index":1014,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["cascade",{"_index":599,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["case",{"_index":264,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["catch",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{}}}],["catch(exception",{"_index":404,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["category",{"_index":330,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["cause",{"_index":640,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{}}}],["check",{"_index":1789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["checkduplicatedemail",{"_index":1182,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedemail(@body",{"_index":1243,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedemail(emaildto",{"_index":1187,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber",{"_index":1183,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber(@body",{"_index":1249,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicatedphonenumber(phonedto",{"_index":1195,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid",{"_index":1184,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid(@body",{"_index":1253,"title":{},"body":{"controllers/UsersController.html":{}}}],["checkduplicateduserid(useriddto",{"_index":1201,"title":{},"body":{"controllers/UsersController.html":{}}}],["chinese",{"_index":968,"title":{},"body":{"entities/Restaurant.html":{}}}],["choco",{"_index":1582,"title":{},"body":{"index.html":{}}}],["ci",{"_index":1573,"title":{},"body":{"index.html":{}}}],["class",{"_index":27,"title":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"classes/LoginDto.html":{},"classes/ResponseFormat.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cli",{"_index":1562,"title":{},"body":{"index.html":{}}}],["cli.json",{"_index":1560,"title":{},"body":{"index.html":{}}}],["clone",{"_index":1570,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":274,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":275,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_providers",{"_index":276,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_loggermodule",{"_index":504,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_loggermodule_providers",{"_index":505,"title":{},"body":{"modules/LoggerModule.html":{}}}],["cluster_menusmodule",{"_index":741,"title":{},"body":{"modules/MenusModule.html":{},"overview.html":{}}}],["cluster_menusmodule_imports",{"_index":742,"title":{},"body":{"modules/MenusModule.html":{}}}],["cluster_menusmodule_providers",{"_index":743,"title":{},"body":{"modules/MenusModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule",{"_index":887,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_reservationsmodule_imports",{"_index":888,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["cluster_reservationsmodule_providers",{"_index":889,"title":{},"body":{"modules/ReservationsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule",{"_index":1075,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_exports",{"_index":1077,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_imports",{"_index":1076,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["cluster_restaurantsmodule_providers",{"_index":1078,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1272,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1273,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1274,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_utilmodule",{"_index":1334,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["cluster_utilmodule_exports",{"_index":1335,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["cluster_utilmodule_providers",{"_index":1336,"title":{},"body":{"modules/UtilModule.html":{},"overview.html":{}}}],["code",{"_index":304,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["column",{"_index":609,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["column({type",{"_index":568,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["common",{"_index":315,"title":{},"body":{"injectables/CommonService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["common.service",{"_index":279,"title":{},"body":{"modules/CommonModule.html":{}}}],["common/common.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["common/common.service",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/TypeormService.html":{},"injectables/UtilService.html":{}}}],["common/datetime.validate",{"_index":806,"title":{},"body":{"entities/Reservation.html":{}}}],["common/decorators/api.body.with.case.model",{"_index":696,"title":{},"body":{"controllers/MenusController.html":{}}}],["common/decorators/api.body.with.model",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/decorators/api.response.search.model",{"_index":698,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/decorators/api.response.with.case.model",{"_index":700,"title":{},"body":{"controllers/MenusController.html":{}}}],["common/decorators/api.response.with.model",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/phone.validate",{"_index":804,"title":{},"body":{"entities/Reservation.html":{},"entities/User.html":{}}}],["common/variables/commonconf",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{}}}],["common/variables/databaseconf",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/TypeormService.html":{}}}],["common/variables/environment",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["common/variables/secretconf",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["common/variables/swaggerconf",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["commonconf",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["commonconfig",{"_index":106,"title":{},"body":{"injectables/AppService.html":{}}}],["commonconfig.version",{"_index":108,"title":{},"body":{"injectables/AppService.html":{}}}],["commonmodule",{"_index":49,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["commonoption",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["commonresponseformat",{"_index":281,"title":{"interfaces/CommonResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["commonservice",{"_index":100,"title":{"injectables/CommonService.html":{}},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"injectables/CommonService.html":{},"injectables/TypeormService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["compareinputpasswordwith",{"_index":1342,"title":{},"body":{"injectables/UtilService.html":{}}}],["compareinputpasswordwith(message",{"_index":1349,"title":{},"body":{"injectables/UtilService.html":{}}}],["comparepassword",{"_index":1279,"title":{},"body":{"injectables/UsersService.html":{}}}],["comparepassword(userid",{"_index":1284,"title":{},"body":{"injectables/UsersService.html":{}}}],["compression",{"_index":1496,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["configname",{"_index":321,"title":{},"body":{"injectables/CommonService.html":{}}}],["configservice",{"_index":312,"title":{},"body":{"injectables/CommonService.html":{}}}],["configtype",{"_index":322,"title":{},"body":{"injectables/CommonService.html":{}}}],["configurable",{"_index":551,"title":{},"body":{"injectables/LoggerService.html":{}}}],["configure",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["configure(consumer",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["conflict",{"_index":1755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":1302,"title":{},"body":{"injectables/UsersService.html":{}}}],["conflictexception(errorprotocol",{"_index":1305,"title":{},"body":{"injectables/UsersService.html":{}}}],["console[level].bind",{"_index":549,"title":{},"body":{"injectables/LoggerService.html":{}}}],["const",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":481,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["constructor",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{}}}],["constructor(commonservice",{"_index":99,"title":{},"body":{"injectables/AppService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["constructor(configservice",{"_index":311,"title":{},"body":{"injectables/CommonService.html":{}}}],["constructor(customconfig",{"_index":1132,"title":{},"body":{"injectables/TypeormService.html":{}}}],["constructor(logger",{"_index":401,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["constructor(menurepository",{"_index":749,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{}}}],["constructor(private",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{}}}],["constructor(repository",{"_index":1001,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["constructor(reservationrepository",{"_index":1282,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(restaurantrepository",{"_index":1011,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["constructor(status",{"_index":388,"title":{},"body":{"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["constructor(userrepository",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservice",{"_index":1112,"title":{},"body":{"guards/RoleGuard.html":{}}}],["consumer",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["consumer.apply(loggermiddleware",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["context",{"_index":509,"title":{},"body":{"injectables/LoggerService.html":{},"injectables/ResponseInterceptor.html":{},"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["context.constructor.name",{"_index":540,"title":{},"body":{"injectables/LoggerService.html":{}}}],["context.getclass",{"_index":1122,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.gethandler",{"_index":1121,"title":{},"body":{"guards/RoleGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":957,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["context.switchtohttp().getresponse",{"_index":958,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('menus",{"_index":717,"title":{},"body":{"controllers/MenusController.html":{}}}],["controller('reservations",{"_index":861,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["controller('restaurants",{"_index":1056,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["controller('users",{"_index":1235,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["cookie",{"_index":1498,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookieoptions",{"_index":1340,"title":{},"body":{"injectables/UtilService.html":{}}}],["cookiewrongtype",{"_index":1765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cost",{"_index":1624,"title":{},"body":{"index.html":{}}}],["count",{"_index":667,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":1433,"title":{"coverage.html":{}},"body":{}}],["create",{"_index":651,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":1237,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1208,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":832,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["create(restaurantid",{"_index":655,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["create(user",{"_index":896,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["create(userid",{"_index":1094,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["createbulk",{"_index":748,"title":{},"body":{"injectables/MenusService.html":{}}}],["createbulk(restaurantid",{"_index":753,"title":{},"body":{"injectables/MenusService.html":{}}}],["createclass",{"_index":1700,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":560,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["createdatecolumn",{"_index":573,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["createddata",{"_index":1319,"title":{},"body":{"injectables/UsersService.html":{}}}],["createddata.id",{"_index":1321,"title":{},"body":{"injectables/UsersService.html":{}}}],["createhashedpassword",{"_index":1343,"title":{},"body":{"injectables/UtilService.html":{}}}],["createhashedpassword(message",{"_index":1352,"title":{},"body":{"injectables/UtilService.html":{}}}],["createhmac('sha256",{"_index":1383,"title":{},"body":{"injectables/UtilService.html":{}}}],["createmenudto",{"_index":325,"title":{"classes/CreateMenuDto.html":{}},"body":{"classes/CreateMenuDto.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["createmenudto.map((menu",{"_index":763,"title":{},"body":{"injectables/MenusService.html":{}}}],["createreservationdto",{"_index":337,"title":{"classes/CreateReservationDto.html":{}},"body":{"classes/CreateReservationDto.html":{},"classes/IsAfterStartTimeConstraint.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["createreservationresponse",{"_index":862,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["createrestaurantdto",{"_index":368,"title":{"classes/CreateRestaurantDto.html":{}},"body":{"classes/CreateRestaurantDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["createrestaurantdto})@apibearerauth()@apioperation({summary",{"_index":1049,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["createrestaurantresponse",{"_index":1057,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["createtoken",{"_index":1344,"title":{},"body":{"injectables/UtilService.html":{}}}],["createtoken(undefined",{"_index":1354,"title":{},"body":{"injectables/UtilService.html":{}}}],["createtypeormoptions",{"_index":1131,"title":{},"body":{"injectables/TypeormService.html":{}}}],["createuserdto",{"_index":375,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":1313,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.password",{"_index":1318,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":1315,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.userid",{"_index":1314,"title":{},"body":{"injectables/UsersService.html":{}}}],["cruiser.js",{"_index":1550,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":1380,"title":{},"body":{"injectables/UtilService.html":{}}}],["ctx",{"_index":412,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":415,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":414,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["cuisine",{"_index":995,"title":{},"body":{"entities/Restaurant.html":{}}}],["cuisine'})@isstring({message",{"_index":969,"title":{},"body":{"entities/Restaurant.html":{}}}],["curl",{"_index":1575,"title":{},"body":{"index.html":{}}}],["customconfig",{"_index":1134,"title":{},"body":{"injectables/TypeormService.html":{}}}],["customer",{"_index":1803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["d",{"_index":1588,"title":{},"body":{"index.html":{}}}],["data",{"_index":616,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data.sql",{"_index":1612,"title":{},"body":{"index.html":{}}}],["database",{"_index":316,"title":{},"body":{"injectables/CommonService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconf",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":50,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseoption",{"_index":1137,"title":{},"body":{"injectables/TypeormService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["datalist",{"_index":1409,"title":{},"body":{"injectables/UtilService.html":{}}}],["datalist.length",{"_index":1424,"title":{},"body":{"injectables/UtilService.html":{}}}],["datasource(typeormoption",{"_index":1743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":1734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":445,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["date.now",{"_index":962,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["date.validate",{"_index":805,"title":{},"body":{"entities/Reservation.html":{}}}],["date.validate.ts",{"_index":434,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["date.validate.ts:15",{"_index":439,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["date.validate.ts:17",{"_index":446,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["date.validate.ts:42",{"_index":442,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["datetime",{"_index":465,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"entities/Reservation.html":{}}}],["dayjs",{"_index":285,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"injectables/LoggerService.html":{},"classes/ResponseFormat.html":{},"dependencies.html":{}}}],["dayjs().format('hh:mm.ss.sss",{"_index":552,"title":{},"body":{"injectables/LoggerService.html":{}}}],["dayjs().format('yyyy",{"_index":298,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["dayjs().issame(datetime",{"_index":472,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["dayjs(datetime).isbefore",{"_index":473,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["dayjs(datetime).minute",{"_index":468,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["dayjs(endtime).diff(object.reservestartat",{"_index":456,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["db_host",{"_index":1451,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_name",{"_index":1452,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_pass",{"_index":1453,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1454,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["db_user",{"_index":1455,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dd",{"_index":300,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["debug",{"_index":510,"title":{},"body":{"injectables/LoggerService.html":{}}}],["declarations",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["default",{"_index":272,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["default_page",{"_index":670,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":437,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["defaultmessage(args",{"_index":440,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["delete",{"_index":701,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["delete(':menuid",{"_index":737,"title":{},"body":{"controllers/MenusController.html":{}}}],["delete(':reservationid",{"_index":883,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["delete(':restaurantid",{"_index":1072,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["delete('me",{"_index":1269,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedat",{"_index":561,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["deletedatecolumn",{"_index":575,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["deleterestaurantresponse",{"_index":1071,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["deleteuserresponse",{"_index":1268,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":39,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["dependency",{"_index":1549,"title":{},"body":{"index.html":{}}}],["desc",{"_index":932,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["description",{"_index":332,"title":{},"body":{"classes/CreateMenuDto.html":{},"entities/Menu.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["detail",{"_index":306,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{}}}],["development",{"_index":1732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["diffminute",{"_index":455,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["digest('base64",{"_index":1386,"title":{},"body":{"injectables/UtilService.html":{}}}],["docker",{"_index":1586,"title":{},"body":{"index.html":{}}}],["docs",{"_index":1545,"title":{},"body":{"index.html":{}}}],["domain",{"_index":1364,"title":{},"body":{"injectables/UtilService.html":{}}}],["domainname",{"_index":1425,"title":{},"body":{"injectables/UtilService.html":{}}}],["dotenv",{"_index":1623,"title":{},"body":{"index.html":{}}}],["dropschema",{"_index":1742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dto",{"_index":1621,"title":{},"body":{"index.html":{}}}],["dto/create",{"_index":451,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":713,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtodata",{"_index":912,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["dump",{"_index":1608,"title":{},"body":{"index.html":{}}}],["d{3,4",{"_index":492,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["d{4",{"_index":490,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["d{4}|\\d{2",{"_index":491,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["e",{"_index":1591,"title":{},"body":{"index.html":{}}}],["email",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["emaildto",{"_index":1194,"title":{},"body":{"controllers/UsersController.html":{}}}],["emaildto?.email",{"_index":1245,"title":{},"body":{"controllers/UsersController.html":{}}}],["emailvalidatedto",{"_index":1241,"title":{},"body":{"controllers/UsersController.html":{}}}],["enableimplicitconversion",{"_index":866,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["endtime",{"_index":447,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["entities",{"_index":1738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entities/menu.entity",{"_index":336,"title":{},"body":{"classes/CreateMenuDto.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{}}}],["entities/reservation.entity",{"_index":364,"title":{},"body":{"classes/CreateReservationDto.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{}}}],["entities/restaurant.entity",{"_index":1053,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{}}}],["entities/user.entity",{"_index":1233,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":558,"title":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["enum",{"_index":1170,"title":{},"body":{"entities/User.html":{}}}],["env",{"_index":1551,"title":{},"body":{"index.html":{}}}],["env.test",{"_index":1552,"title":{},"body":{"index.html":{}}}],["error",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["error.message",{"_index":263,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["errorcode",{"_index":420,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["errormessage",{"_index":436,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{}}}],["errorprotocol",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["errorprotocol.errorcode",{"_index":429,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["errorprotocol.message",{"_index":430,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["errors",{"_index":623,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["errors.length",{"_index":637,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["errors.map((err",{"_index":645,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["errortype",{"_index":410,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["eslint",{"_index":1558,"title":{},"body":{"index.html":{}}}],["eslint.config.mjs",{"_index":1557,"title":{},"body":{"index.html":{}}}],["example",{"_index":346,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["example_jwt",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["examples",{"_index":1714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":408,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.cause",{"_index":422,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts",{"_index":399,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:16",{"_index":402,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.filter.ts:19",{"_index":407,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getresponse",{"_index":421,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exception.getstatus",{"_index":419,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionfactory(error",{"_index":727,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["exceptionfilter",{"_index":400,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionformat",{"_index":423,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["exceptionresponseformat",{"_index":303,"title":{"classes/ExceptionResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["executioncontext",{"_index":948,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}}}],["exists.middleware",{"_index":1085,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["exists.middleware.ts",{"_index":1000,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{}}}],["exists.middleware.ts:16",{"_index":1003,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["exists.middleware.ts:9",{"_index":1002,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["expired",{"_index":268,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["expiresin",{"_index":1397,"title":{},"body":{"injectables/UtilService.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["exports",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["express",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{},"dependencies.html":{}}}],["extends",{"_index":328,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"entities/ReservationMenu.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["extendsmodel",{"_index":1699,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels",{"_index":1677,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels.length",{"_index":1693,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extramodels.push(usemodel",{"_index":1687,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9.eyjpzci6mswidxnlcklkijoidgvzdhvzzxixiiwizw1hawwioij0zxn0dxnlcjfazxhhbxbszs5jb20ilcjyb2xlijoxlcjwag9uzsi6ijaxmc0ymtm0lte1mzqilcjpyxqioje3nde5mjaznjqsimv4cci6mtc0mtkymdy2ncwiaxnzijoisgl0umvzdgf1cmfudcj9.sclkeqa5nszs3fae69wwicmoe0v96fg2gzrougoy6ai",{"_index":1662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":251,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["false})@apibearerauth()@apioperation({summary",{"_index":1220,"title":{},"body":{"controllers/UsersController.html":{}}}],["false})@apioperation({summary",{"_index":1033,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["false})@apiparam({name",{"_index":674,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{}}}],["false})@apiquery({name",{"_index":672,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["filter",{"_index":1404,"title":{},"body":{"injectables/UtilService.html":{}}}],["findall",{"_index":652,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findall(path",{"_index":755,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{}}}],["findall(req",{"_index":663,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["findmanyoptions",{"_index":1362,"title":{},"body":{"injectables/UtilService.html":{}}}],["findone",{"_index":653,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findone(@param('menuid",{"_index":731,"title":{},"body":{"controllers/MenusController.html":{}}}],["findone(@param('reservationid",{"_index":877,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findone(@param('restaurantid",{"_index":1066,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findone(id",{"_index":899,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["findone(menuid",{"_index":677,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["findone(reservationid",{"_index":843,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findone(restaurantid",{"_index":1035,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findonebyuserid",{"_index":1280,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyuserid(userid",{"_index":1290,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoneoptions",{"_index":1368,"title":{},"body":{"injectables/UtilService.html":{}}}],["findonereservationresponse",{"_index":875,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["findonerestaurantresponse",{"_index":1064,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["findoption",{"_index":1367,"title":{},"body":{"injectables/UtilService.html":{}}}],["findoption.order",{"_index":1430,"title":{},"body":{"injectables/UtilService.html":{}}}],["findoption.relations",{"_index":1431,"title":{},"body":{"injectables/UtilService.html":{}}}],["findoption.select",{"_index":1429,"title":{},"body":{"injectables/UtilService.html":{}}}],["findoption.where",{"_index":1428,"title":{},"body":{"injectables/UtilService.html":{}}}],["fine%20dining",{"_index":1032,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["flat",{"_index":647,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["forbidden",{"_index":1749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forroutes('restaurants/:restaurantid/*api",{"_index":1091,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["founduser",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":475,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1513,"title":{"miscellaneous/functions.html":{}},"body":{}}],["get(':menuid",{"_index":682,"title":{},"body":{"controllers/MenusController.html":{}}}],["get(':reservationid",{"_index":876,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["get(':restaurantid",{"_index":1038,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["get('me",{"_index":1260,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('me/reservations",{"_index":1256,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('version",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["getconfig",{"_index":310,"title":{},"body":{"injectables/CommonService.html":{}}}],["getconfig(configname",{"_index":314,"title":{},"body":{"injectables/CommonService.html":{}}}],["getflaterrorconstraints",{"_index":618,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["getflaterrorconstraints(errors",{"_index":620,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["getme",{"_index":1185,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getme(@req",{"_index":1261,"title":{},"body":{"controllers/UsersController.html":{}}}],["getme(req",{"_index":1212,"title":{},"body":{"controllers/UsersController.html":{}}}],["getme(usertokendata",{"_index":1292,"title":{},"body":{"injectables/UsersService.html":{}}}],["getmeresponse",{"_index":1258,"title":{},"body":{"controllers/UsersController.html":{}}}],["getmeresrvations",{"_index":1186,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getmeresrvations(path",{"_index":1294,"title":{},"body":{"injectables/UsersService.html":{}}}],["getmeresrvations(req",{"_index":1217,"title":{},"body":{"controllers/UsersController.html":{}}}],["getschemapath(createclass",{"_index":1701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(model",{"_index":1706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(pickmodel",{"_index":1728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getschemapath(usemodel",{"_index":1691,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getserverversion",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["gettimestamp",{"_index":530,"title":{},"body":{"injectables/LoggerService.html":{}}}],["getting",{"_index":1519,"title":{"index.html":{}},"body":{}}],["git",{"_index":1554,"title":{},"body":{"index.html":{}}}],["gitignore",{"_index":1553,"title":{},"body":{"index.html":{}}}],["global",{"_index":278,"title":{},"body":{"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/UtilModule.html":{}}}],["globalexceptionfilter",{"_index":397,"title":{"classes/GlobalExceptionFilter.html":{}},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["guard",{"_index":1007,"title":{"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashedpassword",{"_index":1316,"title":{},"body":{"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["hh:mm:ss.sss",{"_index":301,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["hit",{"_index":1521,"title":{},"body":{"index.html":{}}}],["hit_restaurant",{"_index":1609,"title":{},"body":{"index.html":{}}}],["hitrestaurant",{"_index":1394,"title":{},"body":{"injectables/UtilService.html":{}}}],["home",{"_index":1528,"title":{},"body":{"index.html":{}}}],["host",{"_index":405,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"miscellaneous/variables.html":{}}}],["host.switchtohttp",{"_index":413,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["hs256",{"_index":1396,"title":{},"body":{"injectables/UtilService.html":{}}}],["http://:/api",{"_index":1599,"title":{},"body":{"index.html":{}}}],["http://:/docs",{"_index":1600,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":1670,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpexception",{"_index":409,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["httponly",{"_index":1370,"title":{},"body":{"injectables/UtilService.html":{}}}],["https://archive.mariadb.org/mariadb",{"_index":1577,"title":{},"body":{"index.html":{}}}],["https://community.chocolatey.org/packages/mariadb/10.3.13",{"_index":1585,"title":{},"body":{"index.html":{}}}],["https://github.com/kkn1125/hit",{"_index":1571,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["httpstatus.bad_request",{"_index":428,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["httpstatus.created",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["icon",{"_index":545,"title":{},"body":{"injectables/LoggerService.html":{}}}],["icons",{"_index":511,"title":{},"body":{"injectables/LoggerService.html":{}}}],["id",{"_index":562,"title":{},"body":{"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["id'})@apibodywithmodel({useridvalidatedto",{"_index":1204,"title":{},"body":{"controllers/UsersController.html":{}}}],["imfinedining",{"_index":1606,"title":{},"body":{"index.html":{}}}],["implements",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"injectables/BearerParserMiddleware.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"modules/RestaurantsModule.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{}}}],["import",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["imports",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":543,"title":{"index.html":{}},"body":{"injectables/LoggerService.html":{}}}],["infer",{"_index":324,"title":{},"body":{"injectables/CommonService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["inject",{"_index":1118,"title":{},"body":{"guards/RoleGuard.html":{}}}],["injectable",{"_index":96,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{}}}],["injectables",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"overview.html":{}}}],["injectrepository",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(menu",{"_index":760,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{}}}],["injectrepository(reservation",{"_index":908,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(restaurant",{"_index":1004,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["injectrepository(user",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inlcude",{"_index":1610,"title":{},"body":{"index.html":{}}}],["inputpassword",{"_index":1285,"title":{},"body":{"injectables/UsersService.html":{}}}],["insert",{"_index":1607,"title":{},"body":{"index.html":{}}}],["install",{"_index":1583,"title":{},"body":{"index.html":{}}}],["installmariadb",{"_index":1574,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":418,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["int",{"_index":590,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["intercept",{"_index":945,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["intercept(context",{"_index":947,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["interface",{"_index":280,"title":{"interfaces/CommonResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["invalid",{"_index":265,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["invalidtimerange",{"_index":1794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isafterstarttime",{"_index":453,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"entities/Reservation.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isafterstarttime()@isdatetimeafternow()@column({type",{"_index":791,"title":{},"body":{"entities/Reservation.html":{}}}],["isafterstarttime(validationoptions",{"_index":1518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isafterstarttimeconstraint",{"_index":432,"title":{"classes/IsAfterStartTimeConstraint.html":{}},"body":{"classes/IsAfterStartTimeConstraint.html":{},"coverage.html":{}}}],["isarray",{"_index":355,"title":{},"body":{"classes/CreateReservationDto.html":{},"miscellaneous/variables.html":{}}}],["isclass",{"_index":1686,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdate",{"_index":356,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["isdatetimeafternow",{"_index":466,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"entities/Reservation.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdatetimeafternow()@column({type",{"_index":794,"title":{},"body":{"entities/Reservation.html":{}}}],["isdatetimeafternow(validationoptions",{"_index":476,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"miscellaneous/functions.html":{}}}],["isdatetimeafternowconstraint",{"_index":459,"title":{"classes/IsDateTimeAfterNowConstraint.html":{}},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"coverage.html":{}}}],["isdev",{"_index":1479,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdivtenminute",{"_index":467,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["isduplicatedby",{"_index":1281,"title":{},"body":{"injectables/UsersService.html":{}}}],["isduplicatedby(whereoption",{"_index":1296,"title":{},"body":{"injectables/UsersService.html":{}}}],["isemail",{"_index":1177,"title":{},"body":{"entities/User.html":{}}}],["isemptyobject",{"_index":1345,"title":{},"body":{"injectables/UtilService.html":{}}}],["isemptyobject(obj",{"_index":1358,"title":{},"body":{"injectables/UtilService.html":{}}}],["isexistsargs",{"_index":1388,"title":{},"body":{"injectables/UtilService.html":{}}}],["isglobal",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":357,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{}}}],["isint({message",{"_index":588,"title":{},"body":{"entities/Menu.html":{}}}],["ismatchrole",{"_index":1125,"title":{},"body":{"guards/RoleGuard.html":{}}}],["isminutesmall",{"_index":458,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["isnotempty",{"_index":607,"title":{},"body":{"entities/Menu.html":{},"entities/User.html":{}}}],["isnotempty({message",{"_index":579,"title":{},"body":{"entities/Menu.html":{}}}],["isnotemptyparam",{"_index":1418,"title":{},"body":{"injectables/UtilService.html":{}}}],["isoptional",{"_index":358,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{}}}],["isoutput",{"_index":535,"title":{},"body":{"injectables/LoggerService.html":{}}}],["ispast",{"_index":471,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["isphonenumber",{"_index":359,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["isphonenumberformat",{"_index":487,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{},"entities/Reservation.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isphonenumberformat()@column({type",{"_index":784,"title":{},"body":{"entities/Reservation.html":{}}}],["isphonenumberformat(validationoptions",{"_index":495,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{},"miscellaneous/functions.html":{}}}],["isphonenumberformatconstraint",{"_index":482,"title":{"classes/IsPhoneNumberFormatConstraint.html":{}},"body":{"classes/IsPhoneNumberFormatConstraint.html":{},"coverage.html":{}}}],["isrefresh",{"_index":250,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["issamepassword",{"_index":1306,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":360,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["isstring({message",{"_index":567,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["issuer",{"_index":1393,"title":{},"body":{"injectables/UtilService.html":{}}}],["istest",{"_index":1480,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":642,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["items",{"_index":1689,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":1614,"title":{},"body":{"index.html":{}}}],["jsonwebtoken",{"_index":245,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"dependencies.html":{}}}],["jwt",{"_index":244,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["jwt.sign",{"_index":1391,"title":{},"body":{"injectables/UtilService.html":{}}}],["jwt.verify",{"_index":258,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["jwtcreate",{"_index":1773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtexpired",{"_index":1769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtmalformed",{"_index":1771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtserverexception",{"_index":1775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtwrongsignature",{"_index":1767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["k",{"_index":1405,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["length",{"_index":570,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["lessthanorequal",{"_index":906,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["lessthanorequal(searchoption.reserveendat",{"_index":925,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["level",{"_index":541,"title":{},"body":{"injectables/LoggerService.html":{}}}],["level.touppercase",{"_index":550,"title":{},"body":{"injectables/LoggerService.html":{}}}],["levels",{"_index":512,"title":{},"body":{"injectables/LoggerService.html":{}}}],["lib",{"_index":1546,"title":{},"body":{"index.html":{}}}],["license",{"_index":1633,"title":{},"body":{"properties.html":{}}}],["literal",{"_index":1644,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:8080",{"_index":1733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["location",{"_index":372,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["lock.json",{"_index":1563,"title":{},"body":{"index.html":{}}}],["log",{"_index":513,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log_level",{"_index":532,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":403,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{},"index.html":{}}}],["logger.service",{"_index":507,"title":{},"body":{"modules/LoggerModule.html":{}}}],["logger.setcontext(this",{"_index":956,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["logger/logger.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["logger/logger.service",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["loggermiddleware",{"_index":83,"title":{"injectables/LoggerMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["loggermodule",{"_index":51,"title":{"modules/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LoggerModule.html":{},"modules.html":{},"overview.html":{}}}],["loggerservice",{"_index":55,"title":{"injectables/LoggerService.html":{}},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{},"overview.html":{}}}],["logging",{"_index":1739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@res",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(logindto",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(res",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":117,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logindto.password",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.userid",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginresponse",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["logmethod",{"_index":523,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["logout",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@res",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logoutresponse",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["lunch",{"_index":585,"title":{},"body":{"entities/Menu.html":{}}}],["mac",{"_index":1594,"title":{},"body":{"index.html":{}}}],["main",{"_index":612,"title":{},"body":{"entities/Menu.html":{}}}],["main'})@isnotempty({message",{"_index":566,"title":{},"body":{"entities/Menu.html":{}}}],["main.ts",{"_index":1544,"title":{},"body":{"index.html":{}}}],["malformed",{"_index":270,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["manytoone",{"_index":610,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["manytoone(undefined",{"_index":597,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{}}}],["map",{"_index":953,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["map((data",{"_index":964,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["mariadb",{"_index":1529,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["mariadb:10.3.13",{"_index":1593,"title":{},"body":{"index.html":{}}}],["matchroles",{"_index":1111,"title":{},"body":{"guards/RoleGuard.html":{}}}],["matchroles(roles",{"_index":1116,"title":{},"body":{"guards/RoleGuard.html":{}}}],["math.ceil(totalamount",{"_index":1413,"title":{},"body":{"injectables/UtilService.html":{}}}],["matjung1221",{"_index":1603,"title":{},"body":{"index.html":{}}}],["maxage",{"_index":1373,"title":{},"body":{"injectables/UtilService.html":{}}}],["maxlength",{"_index":994,"title":{},"body":{"entities/Restaurant.html":{}}}],["maxlength(200",{"_index":982,"title":{},"body":{"entities/Restaurant.html":{}}}],["maxlength(50",{"_index":971,"title":{},"body":{"entities/Restaurant.html":{}}}],["menu",{"_index":335,"title":{"entities/Menu.html":{}},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/ReservationMenu.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["menu.dto",{"_index":631,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{}}}],["menu.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["menu.entity",{"_index":606,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{}}}],["menu.entity.ts",{"_index":818,"title":{},"body":{"entities/ReservationMenu.html":{},"coverage.html":{}}}],["menu.entity.ts:16",{"_index":820,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:20",{"_index":823,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:24",{"_index":826,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:29",{"_index":825,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.entity.ts:32",{"_index":822,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.id",{"_index":765,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{}}}],["menu.reservationmenus",{"_index":821,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["menu.restaurant",{"_index":984,"title":{},"body":{"entities/Restaurant.html":{}}}],["menudataparsepipe",{"_index":614,"title":{"injectables/MenuDataParsePipe.html":{}},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"coverage.html":{}}}],["menuid",{"_index":681,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/ReservationMenu.html":{}}}],["menurepository",{"_index":751,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{}}}],["menus",{"_index":650,"title":{},"body":{"controllers/MenusController.html":{},"entities/Restaurant.html":{},"injectables/RestaurantsService.html":{}}}],["menus.controller",{"_index":745,"title":{},"body":{"modules/MenusModule.html":{}}}],["menus.service",{"_index":716,"title":{},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{}}}],["menus/menus.module",{"_index":1083,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["menuscontroller",{"_index":648,"title":{"controllers/MenusController.html":{}},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{},"coverage.html":{}}}],["menusmodule",{"_index":740,"title":{"modules/MenusModule.html":{}},"body":{"modules/MenusModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["menusservice",{"_index":715,"title":{"injectables/MenusService.html":{}},"body":{"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"coverage.html":{},"overview.html":{}}}],["menuvalidate",{"_index":633,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["menuvalidate(item",{"_index":643,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["menuvalidate(value",{"_index":644,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["message",{"_index":289,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/CreateReservationDto.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"entities/Menu.html":{},"entities/Reservation.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":534,"title":{},"body":{"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{}}}],["metadata",{"_index":625,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{},"dependencies.html":{}}}],["metadata.metatype",{"_index":632,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["method",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":1535,"title":{},"body":{"index.html":{}}}],["middleware/bearer",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/logger.middleware",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["middleware/restaurant",{"_index":1084,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["middleware/roles.decorator",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["middlewareconsumer",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["migration1741439368275",{"_index":1741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations",{"_index":1740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":361,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Menu.html":{},"entities/Reservation.html":{}}}],["min(0",{"_index":589,"title":{},"body":{"entities/Menu.html":{}}}],["min(1",{"_index":775,"title":{},"body":{"entities/Reservation.html":{}}}],["minlength",{"_index":608,"title":{},"body":{"entities/Menu.html":{},"entities/Restaurant.html":{}}}],["minlength(1",{"_index":970,"title":{},"body":{"entities/Restaurant.html":{}}}],["minlength(2",{"_index":580,"title":{},"body":{"entities/Menu.html":{}}}],["minute",{"_index":457,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["miscellaneous",{"_index":1512,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{}}],["mm",{"_index":299,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["model",{"_index":1673,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model.constructor.tostring().match(/function",{"_index":1698,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model.constructor.tostring().startswith('class",{"_index":1697,"title":{},"body":{"miscellaneous/variables.html":{}}}],["model[0",{"_index":1685,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modelname",{"_index":1674,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modelprops",{"_index":1672,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models",{"_index":1675,"title":{},"body":{"miscellaneous/variables.html":{}}}],["module",{"_index":37,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["modules",{"_index":1626,"title":{"modules.html":{}},"body":{}}],["morethanorequal",{"_index":907,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["morethanorequal(searchoption.reservestartat",{"_index":923,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["mustpositive",{"_index":1790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":1503,"title":{},"body":{"dependencies.html":{}}}],["mysql_root_password",{"_index":1592,"title":{},"body":{"index.html":{}}}],["name",{"_index":331,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["naming",{"_index":1509,"title":{},"body":{"dependencies.html":{}}}],["namingstrategy",{"_index":1736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1559,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":952,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nestjs",{"_index":1561,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/config",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/CommonService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1082,"title":{},"body":{"modules/RestaurantsModule.html":{},"guards/RoleGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1147,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1489,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"injectables/TypeormService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":243,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["nestmodule",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{}}}],["new",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":239,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["next.handle().pipe",{"_index":963,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["nextfunction",{"_index":240,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["nextquery",{"_index":1420,"title":{},"body":{"injectables/UtilService.html":{}}}],["node.js",{"_index":1523,"title":{},"body":{"index.html":{}}}],["nomatchownrestaurant",{"_index":1787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nomatchroles",{"_index":1763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nomatchuser",{"_index":1779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["norefreshcookie",{"_index":1777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notallowedpasttime",{"_index":1792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfound",{"_index":1752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UtilService.html":{}}}],["notfoundexception(errorprotocol",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UtilService.html":{}}}],["npm",{"_index":1525,"title":{},"body":{"index.html":{}}}],["null",{"_index":997,"title":{},"body":{"entities/Restaurant.html":{}}}],["number",{"_index":305,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/CreateReservationDto.html":{},"classes/ExceptionResponseFormat.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["number.isnan(+item",{"_index":815,"title":{},"body":{"injectables/ReservationAmountParsePipe.html":{}}}],["number.isnan(restaurantid",{"_index":1019,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["o",{"_index":1576,"title":{},"body":{"index.html":{}}}],["obj",{"_index":1359,"title":{},"body":{"injectables/UtilService.html":{}}}],["object",{"_index":288,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/MenuDataParsePipe.html":{},"classes/ResponseFormat.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object.assign(createreservationdto",{"_index":910,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["object.constructor",{"_index":479,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["object.defineproperty(this",{"_index":547,"title":{},"body":{"injectables/LoggerService.html":{}}}],["object.entries(model).map(([k",{"_index":1703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(model[0]).map(([k",{"_index":1730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(modelprops)[0",{"_index":1676,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(models).map(([summary",{"_index":1682,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.entries(searchoption",{"_index":1403,"title":{},"body":{"injectables/UtilService.html":{}}}],["object.entries(usemodel).map(([k",{"_index":1692,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object.fromentries",{"_index":1402,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(obj).length",{"_index":1432,"title":{},"body":{"injectables/UtilService.html":{}}}],["object.keys(usertokendata).every((item",{"_index":1389,"title":{},"body":{"injectables/UtilService.html":{}}}],["object.values(err.constraints",{"_index":646,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["object>(modelprops",{"_index":1696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objectliteral",{"_index":1381,"title":{},"body":{"injectables/UtilService.html":{}}}],["observable",{"_index":951,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["ok",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["omit",{"_index":1355,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["omittype",{"_index":1152,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["omittype(createuserdto",{"_index":1151,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["oneof",{"_index":1681,"title":{},"body":{"miscellaneous/variables.html":{}}}],["onetomany",{"_index":611,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":594,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["optional",{"_index":728,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":480,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":931,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["orm",{"_index":1365,"title":{},"body":{"injectables/UtilService.html":{}}}],["orm.countby(query.where",{"_index":1412,"title":{},"body":{"injectables/UtilService.html":{}}}],["orm.create().constructor.name",{"_index":1426,"title":{},"body":{"injectables/UtilService.html":{}}}],["orm.find(query",{"_index":1410,"title":{},"body":{"injectables/UtilService.html":{}}}],["orm.findone",{"_index":1427,"title":{},"body":{"injectables/UtilService.html":{}}}],["overview",{"_index":1628,"title":{"overview.html":{}},"body":{}}],["owner.guard",{"_index":710,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["owner.guard.ts",{"_index":1009,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"coverage.html":{}}}],["owner.guard.ts:15",{"_index":1012,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["owner.guard.ts:21",{"_index":1015,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["p",{"_index":1589,"title":{},"body":{"index.html":{}}}],["package",{"_index":1486,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["package.json",{"_index":1564,"title":{},"body":{"index.html":{}}}],["packages/mariadb",{"_index":1579,"title":{},"body":{"index.html":{}}}],["page",{"_index":664,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["page=${page",{"_index":1417,"title":{},"body":{"injectables/UtilService.html":{}}}],["pageover",{"_index":1796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pagination",{"_index":1423,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["pagination.count",{"_index":1708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pagination.page",{"_index":1707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pagination.total",{"_index":1709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["paginationtype",{"_index":1704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["param",{"_index":702,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["param('menuid",{"_index":735,"title":{},"body":{"controllers/MenusController.html":{}}}],["param('reservationid",{"_index":881,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["param('restaurantid",{"_index":721,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["parameter",{"_index":1625,"title":{},"body":{"index.html":{}}}],["parse.pipe",{"_index":714,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{}}}],["parse.pipe.ts",{"_index":617,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{},"coverage.html":{}}}],["parse.pipe.ts:11",{"_index":812,"title":{},"body":{"injectables/ReservationAmountParsePipe.html":{}}}],["parse.pipe.ts:14",{"_index":627,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["parse.pipe.ts:40",{"_index":622,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["parsearraypipe",{"_index":857,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["parseintpipe",{"_index":703,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["parser",{"_index":1499,"title":{},"body":{"dependencies.html":{}}}],["parser.middleware",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["parser.middleware.ts",{"_index":234,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["parser.middleware.ts:14",{"_index":236,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["parser.middleware.ts:17",{"_index":241,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["partialtype",{"_index":1142,"title":{},"body":{"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{}}}],["partialtype(createmenudto",{"_index":1141,"title":{},"body":{"classes/UpdateMenuDto.html":{}}}],["partialtype(createreservationdto",{"_index":1144,"title":{},"body":{"classes/UpdateReservationDto.html":{}}}],["partialtype(createrestaurantdto",{"_index":1146,"title":{},"body":{"classes/UpdateRestaurantDto.html":{}}}],["passthrough",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/User.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":691,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["patch(':menuid",{"_index":734,"title":{},"body":{"controllers/MenusController.html":{}}}],["patch(':reservationid",{"_index":880,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["patch(':restaurantid",{"_index":1069,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["patch('me",{"_index":1265,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchmenuresponse",{"_index":733,"title":{},"body":{"controllers/MenusController.html":{}}}],["patchreservationresponse",{"_index":879,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["patchuserresponse",{"_index":1263,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["pathname",{"_index":959,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["path}${page",{"_index":1416,"title":{},"body":{"injectables/UtilService.html":{}}}],["path}?page=${page",{"_index":1421,"title":{},"body":{"injectables/UtilService.html":{}}}],["path}?page=${pagination.page",{"_index":1710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":287,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["per_page",{"_index":673,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["perpage",{"_index":665,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["phone",{"_index":343,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/CreateUserDto.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["phone'].includes(item",{"_index":1390,"title":{},"body":{"injectables/UtilService.html":{}}}],["phone.match(phonenumberformat",{"_index":493,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["phonedto",{"_index":1200,"title":{},"body":{"controllers/UsersController.html":{}}}],["phonedto?.phone",{"_index":1250,"title":{},"body":{"controllers/UsersController.html":{}}}],["phonenumberformat",{"_index":488,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["phonenumbervalidatedto",{"_index":1248,"title":{},"body":{"controllers/UsersController.html":{}}}],["pick",{"_index":1188,"title":{},"body":{"controllers/UsersController.html":{}}}],["pickmodel",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pickmodel.constructor.tostring().match(/function",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pickmodel.constructor.tostring().startswith('class",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["picktype",{"_index":334,"title":{},"body":{"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["picktype(createuserdto",{"_index":1242,"title":{},"body":{"controllers/UsersController.html":{}}}],["picktype(menu",{"_index":329,"title":{},"body":{"classes/CreateMenuDto.html":{}}}],["picktype(reservation",{"_index":340,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["picktype(restaurant",{"_index":371,"title":{},"body":{"classes/CreateRestaurantDto.html":{}}}],["picktype(user",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["pipetransform",{"_index":629,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["pkg.version",{"_index":1671,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plaintoinstance",{"_index":630,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["plaintoinstance(createmenudto",{"_index":634,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["port",{"_index":1456,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["pos",{"_index":718,"title":{},"body":{"controllers/MenusController.html":{}}}],["pos')@apibodywithcasemodel({createmenudto",{"_index":658,"title":{},"body":{"controllers/MenusController.html":{}}}],["post",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('validate/email",{"_index":1192,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('validate/phone",{"_index":1198,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('validate/user",{"_index":1205,"title":{},"body":{"controllers/UsersController.html":{}}}],["prettier",{"_index":1556,"title":{},"body":{"index.html":{}}}],["prettierrc",{"_index":1555,"title":{},"body":{"index.html":{}}}],["prev",{"_index":1414,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["prevquery",{"_index":1415,"title":{},"body":{"injectables/UtilService.html":{}}}],["price",{"_index":333,"title":{},"body":{"classes/CreateMenuDto.html":{},"entities/Menu.html":{}}}],["primarygeneratedcolumn",{"_index":583,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["private",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/UsersService.html":{}}}],["process.env.db_host",{"_index":1657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_name",{"_index":1658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_pass",{"_index":1659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_port",{"_index":1660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_user",{"_index":1661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.log_level",{"_index":1663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.port",{"_index":1664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_access_token",{"_index":1667,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_hash_password",{"_index":1668,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.secret_refresh_token",{"_index":1669,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":536,"title":{},"body":{"injectables/LoggerService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":1016,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"guards/RoleGuard.html":{},"injectables/UtilService.html":{}}}],["properties",{"_index":1632,"title":{"properties.html":{}},"body":{"miscellaneous/variables.html":{}}}],["properties.message",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.method",{"_index":1720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.ok",{"_index":1718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.path",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.payload",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.status",{"_index":1719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties.timestamp",{"_index":1724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propertyname",{"_index":477,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["protocol",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["protocol.argsrequired",{"_index":639,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{}}}],["protocol.badrequest",{"_index":427,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["protocol.conflict",{"_index":1304,"title":{},"body":{"injectables/UsersService.html":{}}}],["protocol.jwtcreate",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["protocol.jwtexpired",{"_index":269,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtmalformed",{"_index":271,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtserverexception",{"_index":273,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.jwtwrongsignature",{"_index":267,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["protocol.nomatchownrestaurant",{"_index":1023,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["protocol.nomatchroles",{"_index":1128,"title":{},"body":{"guards/RoleGuard.html":{}}}],["protocol.norefreshcookie",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["protocol.notfound",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UtilService.html":{}}}],["protocol.requiredlogin",{"_index":1123,"title":{},"body":{"guards/RoleGuard.html":{}}}],["protocol.typecheck",{"_index":813,"title":{},"body":{"injectables/ReservationAmountParsePipe.html":{}}}],["protocol.wronglogindata",{"_index":1309,"title":{},"body":{"injectables/UsersService.html":{}}}],["protocol.wrongparamtype",{"_index":1020,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/LoggerModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules/UtilModule.html":{},"overview.html":{}}}],["query",{"_index":704,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["query('amount",{"_index":872,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["query('category",{"_index":1060,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["query('location",{"_index":1062,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["query('name",{"_index":1061,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["query('phone",{"_index":871,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["query('reserveendat",{"_index":870,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["query('reservestartat",{"_index":869,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["qweqq!!1",{"_index":554,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{},"index.html":{}}}],["qweqq!!1'})@column({type",{"_index":1162,"title":{},"body":{"entities/User.html":{}}}],["readme.md",{"_index":1565,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["recoil",{"_index":1617,"title":{},"body":{"index.html":{}}}],["record",{"_index":1717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["redux",{"_index":1616,"title":{},"body":{"index.html":{}}}],["ref",{"_index":1690,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reflect",{"_index":1505,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1113,"title":{},"body":{"guards/RoleGuard.html":{}}}],["refresh",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["refresh(@req",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(req",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshresponse",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["refreshtoken",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["refreshtoken(req",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerdecorator",{"_index":448,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["relations",{"_index":930,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["remove",{"_index":654,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('menuid",{"_index":738,"title":{},"body":{"controllers/MenusController.html":{}}}],["remove(@param('reservationid",{"_index":884,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["remove(@param('restaurantid",{"_index":1073,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["remove(@req",{"_index":1270,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":901,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["remove(menuid",{"_index":684,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["remove(req",{"_index":1223,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(reservationid",{"_index":848,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["remove(restaurantid",{"_index":1040,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["repository",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["req",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["req.cookies.refresh",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{}}}],["req.headers?.authorization",{"_index":249,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["req.method",{"_index":500,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["req.originalurl",{"_index":502,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{}}}],["req.originalurl.endswith(ex",{"_index":254,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["req.params.restaurantid",{"_index":1005,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["req.user",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"injectables/ResponseInterceptor.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["request(400",{"_index":426,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.method",{"_index":416,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.originalurl",{"_index":417,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["request.params.restaurantid",{"_index":1018,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["request.user",{"_index":1119,"title":{},"body":{"guards/RoleGuard.html":{}}}],["request.user.id",{"_index":1017,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["required",{"_index":671,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["requiredlogin",{"_index":1761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoggerMiddleware.html":{},"injectables/ResponseInterceptor.html":{}}}],["res.clearcookie('refresh",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.cookie('refresh",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["res.statuscode",{"_index":960,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["reservation",{"_index":173,"title":{"entities/Reservation.html":{}},"body":{"modules/AuthModule.html":{},"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservation.dto",{"_index":452,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{}}}],["reservation.dto.ts",{"_index":339,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["reservation.dto.ts:28",{"_index":350,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["reservation.id",{"_index":918,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservation.reservationmenus",{"_index":824,"title":{},"body":{"entities/ReservationMenu.html":{}}}],["reservation.restaurant",{"_index":987,"title":{},"body":{"entities/Restaurant.html":{}}}],["reservation.user",{"_index":1166,"title":{},"body":{"entities/User.html":{}}}],["reservationamountparsepipe",{"_index":811,"title":{"injectables/ReservationAmountParsePipe.html":{}},"body":{"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"coverage.html":{}}}],["reservationid",{"_index":819,"title":{},"body":{"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{}}}],["reservationmenu",{"_index":593,"title":{"entities/ReservationMenu.html":{}},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reservationmenu.menuid",{"_index":916,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationmenu.reservation",{"_index":595,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{}}}],["reservationmenu.reservationid",{"_index":917,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["reservationmenus",{"_index":563,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["reservationrepository",{"_index":894,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["reservations",{"_index":831,"title":{},"body":{"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["reservations.controller",{"_index":891,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["reservations.service",{"_index":860,"title":{},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{}}}],["reservations/reservations.module",{"_index":1086,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["reservationscontroller",{"_index":829,"title":{"controllers/ReservationsController.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"coverage.html":{}}}],["reservationsmodule",{"_index":886,"title":{"modules/ReservationsModule.html":{}},"body":{"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["reservationsservice",{"_index":859,"title":{"injectables/ReservationsService.html":{}},"body":{"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"coverage.html":{},"overview.html":{}}}],["reserveendat",{"_index":342,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["reservestartat",{"_index":341,"title":{},"body":{"classes/CreateReservationDto.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{}}}],["response",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["response.status(httpstatus.bad_request).json(exceptionformat",{"_index":431,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["response.status(status).json(exceptionformat",{"_index":424,"title":{},"body":{"classes/GlobalExceptionFilter.html":{}}}],["responseformat",{"_index":286,"title":{"classes/ResponseFormat.html":{}},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["responseformat(status",{"_index":965,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["responseinterceptor",{"_index":943,"title":{"injectables/ResponseInterceptor.html":{}},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["responseproperty",{"_index":1716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responses.ts",{"_index":1539,"title":{},"body":{"index.html":{}}}],["restaurant",{"_index":373,"title":{"entities/Restaurant.html":{}},"body":{"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"modules/MenusModule.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["restaurant.dto",{"_index":1052,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{}}}],["restaurant.dto.ts",{"_index":370,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["restaurant.id",{"_index":1101,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurant.menus",{"_index":598,"title":{},"body":{"entities/Menu.html":{}}}],["restaurant.reservations",{"_index":796,"title":{},"body":{"entities/Reservation.html":{}}}],["restaurant.user",{"_index":1168,"title":{},"body":{"entities/User.html":{}}}],["restaurant.userid",{"_index":1022,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["restaurantexistsmiddleware",{"_index":998,"title":{"injectables/RestaurantExistsMiddleware.html":{}},"body":{"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantid",{"_index":564,"title":{},"body":{"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"index.html":{}}}],["restaurantownerguard",{"_index":708,"title":{"guards/RestaurantOwnerGuard.html":{}},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["restaurantrepository",{"_index":1013,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{}}}],["restaurants",{"_index":1026,"title":{},"body":{"controllers/RestaurantsController.html":{},"entities/User.html":{},"index.html":{}}}],["restaurants'})@apibodywithmodel({createrestaurantdto",{"_index":1028,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants.controller",{"_index":1087,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["restaurants.service",{"_index":1055,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/:restaurantid",{"_index":1065,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/:restaurantid'})@apibearerauth()@apioperation({summary",{"_index":1042,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants/:restaurantid'})@apibodywithmodel({updaterestaurantdto",{"_index":1048,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants/:restaurantid'})@apiparam({name",{"_index":1037,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants/:restaurantid/menus",{"_index":657,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/:restaurantid/menus/:menuid",{"_index":730,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/:restaurantid/menus/:menuid'})@apibodywithmodel({updatemenudto",{"_index":692,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/:restaurantid/menus/:menuid'})@apiparam({name",{"_index":679,"title":{},"body":{"controllers/MenusController.html":{}}}],["restaurants/:restaurantid/reservations",{"_index":838,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["restaurants/:restaurantid/reservations/:reservationid",{"_index":863,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["restaurants/:restaurantid/reservations/:reservationid'})@apibodywithmodel({createreservationdto",{"_index":834,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["restaurants/:restaurantid/reservations/:reservationid'})@apibodywithmodel({updatereservationdto",{"_index":854,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["restaurants/:restaurantid/reservations/:reservationid'})@apiparam({name",{"_index":845,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["restaurants/entities/restaurant.entity",{"_index":374,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"entities/Menu.html":{},"modules/MenusModule.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"entities/User.html":{}}}],["restaurants/menus/entities/menu.entity",{"_index":827,"title":{},"body":{"entities/ReservationMenu.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{}}}],["restaurants/reservations/entities/reservation",{"_index":605,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{}}}],["restaurants/reservations/entities/reservation.entity",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"entities/ReservationMenu.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["restaurants/restaurant",{"_index":709,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{}}}],["restaurants/restaurants.module",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["restaurantscontroller",{"_index":1024,"title":{"controllers/RestaurantsController.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantsmodule",{"_index":52,"title":{"modules/RestaurantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurantsservice",{"_index":1054,"title":{"injectables/RestaurantsService.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["resting0301",{"_index":1604,"title":{},"body":{"index.html":{}}}],["result",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerService.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"injectables/ResponseInterceptor.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["returntype",{"_index":1378,"title":{},"body":{"injectables/UtilService.html":{}}}],["role",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["roleguard",{"_index":1109,"title":{"guards/RoleGuard.html":{}},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["roles",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roles()@delete('me",{"_index":1226,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles()@get('me",{"_index":1215,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles()@patch('me",{"_index":1231,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles()@post('refresh",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["roles(['undefined'])@delete(':reservationid",{"_index":849,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles(['undefined'])@get('me/reservations",{"_index":1221,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles(['undefined'])@patch(':reservationid",{"_index":855,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["roles(['undefined'])@post",{"_index":835,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["roles([userrole.customer",{"_index":864,"title":{},"body":{"controllers/ReservationsController.html":{},"controllers/UsersController.html":{}}}],["roles([userrole.shopkeeper",{"_index":720,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["roles.includes(userrole",{"_index":1129,"title":{},"body":{"guards/RoleGuard.html":{}}}],["roles.length",{"_index":1124,"title":{},"body":{"guards/RoleGuard.html":{}}}],["root",{"_index":1533,"title":{},"body":{"index.html":{}}}],["routermodule",{"_index":1081,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["routermodule.register",{"_index":1089,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["row",{"_index":1611,"title":{},"body":{"index.html":{}}}],["run",{"_index":1587,"title":{},"body":{"index.html":{}}}],["run_mode",{"_index":533,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":955,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"dependencies.html":{}}}],["ryu0423",{"_index":1605,"title":{},"body":{"index.html":{}}}],["samesite",{"_index":1371,"title":{},"body":{"injectables/UtilService.html":{}}}],["sauvignon",{"_index":577,"title":{},"body":{"entities/Menu.html":{}}}],["schema",{"_index":1678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["schemaobject",{"_index":1679,"title":{},"body":{"miscellaneous/variables.html":{}}}],["searchmenuresponse",{"_index":726,"title":{},"body":{"controllers/MenusController.html":{}}}],["searchoption",{"_index":873,"title":{},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/UtilService.html":{}}}],["searchoption.amount",{"_index":926,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["searchoption.amount[1",{"_index":928,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["searchoption.category",{"_index":1103,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["searchoption.location",{"_index":1105,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["searchoption.name",{"_index":1104,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["searchoption.phone",{"_index":921,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["searchoption.reserveendat",{"_index":924,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["searchoption.reservestartat",{"_index":922,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["searchpagination",{"_index":1346,"title":{},"body":{"injectables/UtilService.html":{}}}],["searchpagination(orm",{"_index":1361,"title":{},"body":{"injectables/UtilService.html":{}}}],["searchparam",{"_index":1407,"title":{},"body":{"injectables/UtilService.html":{}}}],["searchparam.tostring",{"_index":1419,"title":{},"body":{"injectables/UtilService.html":{}}}],["searchreservationresponse",{"_index":868,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["searchrestaurantresponse",{"_index":1059,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["searchuserreservationresponse",{"_index":1255,"title":{},"body":{"controllers/UsersController.html":{}}}],["secret",{"_index":318,"title":{},"body":{"injectables/CommonService.html":{}}}],["secret_access_token",{"_index":1457,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret_hash_password",{"_index":1458,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secret_refresh_token",{"_index":1459,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["secretconf",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["secretconfig",{"_index":1341,"title":{},"body":{"injectables/UtilService.html":{}}}],["secretoption",{"_index":242,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["secretoption.accesstoken",{"_index":260,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["secretoption.refreshtoken",{"_index":259,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["select",{"_index":929,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["servererror",{"_index":1758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serverurl",{"_index":1802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setcontext",{"_index":515,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setcontext(context",{"_index":518,"title":{},"body":{"injectables/LoggerService.html":{}}}],["shopkeeper",{"_index":1804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signature",{"_index":266,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["signupresponse",{"_index":1236,"title":{},"body":{"controllers/UsersController.html":{}}}],["skip",{"_index":769,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["snakenamingstrategy",{"_index":1737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"modules/CommonModule.html":{},"interfaces/CommonResponseFormat.html":{},"injectables/CommonService.html":{},"classes/CreateMenuDto.html":{},"classes/CreateReservationDto.html":{},"classes/CreateRestaurantDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerMiddleware.html":{},"modules/LoggerModule.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"modules/MenusModule.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"injectables/ReservationAmountParsePipe.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"injectables/TypeormService.html":{},"classes/UpdateMenuDto.html":{},"classes/UpdateReservationDto.html":{},"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{}}}],["sql",{"_index":1547,"title":{},"body":{"index.html":{}}}],["src",{"_index":1534,"title":{},"body":{"index.html":{}}}],["src/.../api.body.with.case.model.ts",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.body.with.model.ts",{"_index":1648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.search.model.ts",{"_index":1649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.with.case.model.ts",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.response.with.model.ts",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.ts",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../commonconf.ts",{"_index":1637,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../databaseconf.ts",{"_index":1638,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../datetime.validate.ts",{"_index":1516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../environment.ts",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.service.ts",{"_index":1640,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":1514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../phone.validate.ts",{"_index":1517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../protocol.ts",{"_index":1639,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../reservation",{"_index":1515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":1654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secret.ts",{"_index":1655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../secretconf.ts",{"_index":1641,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../swagger.ts",{"_index":1656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swaggerconf.ts",{"_index":1642,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../typeorm.ts",{"_index":1653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userrole.ts",{"_index":1643,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:25",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:39",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":101,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":102,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:31",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:47",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:69",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:17",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:52",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/login.dto.ts",{"_index":553,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/auth/dto/login.dto.ts:5",{"_index":557,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/auth/dto/login.dto.ts:8",{"_index":555,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/common/common.module.ts",{"_index":277,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/common.service.ts",{"_index":309,"title":{},"body":{"injectables/CommonService.html":{},"coverage.html":{}}}],["src/common/common.service.ts:5",{"_index":313,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/common.service.ts:8",{"_index":319,"title":{},"body":{"injectables/CommonService.html":{}}}],["src/common/datetime.validate.ts",{"_index":460,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/datetime.validate.ts:14",{"_index":461,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["src/common/datetime.validate.ts:16",{"_index":464,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["src/common/datetime.validate.ts:30",{"_index":462,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["src/common/decorators/api.body.with.case.model.ts",{"_index":1440,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.body.with.model.ts",{"_index":1442,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.search.model.ts",{"_index":1443,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.with.case.model.ts",{"_index":1444,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/api.response.with.model.ts",{"_index":1445,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/phone.validate.ts",{"_index":483,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/common/phone.validate.ts:13",{"_index":486,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["src/common/phone.validate.ts:23",{"_index":484,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["src/common/variables/commonconf.ts",{"_index":1446,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/databaseconf.ts",{"_index":1448,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/environment.ts",{"_index":1449,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/variables/secretconf.ts",{"_index":1461,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/common/variables/swaggerconf.ts",{"_index":1462,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/database/database.module.ts",{"_index":383,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/typeorm.service.ts",{"_index":1130,"title":{},"body":{"injectables/TypeormService.html":{},"coverage.html":{}}}],["src/database/typeorm.service.ts:10",{"_index":1135,"title":{},"body":{"injectables/TypeormService.html":{}}}],["src/database/typeorm.service.ts:7",{"_index":1133,"title":{},"body":{"injectables/TypeormService.html":{}}}],["src/logger/logger.module.ts",{"_index":506,"title":{},"body":{"modules/LoggerModule.html":{}}}],["src/logger/logger.service",{"_index":499,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/logger/logger.service.ts",{"_index":508,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/logger/logger.service.ts:10",{"_index":522,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:11",{"_index":527,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:12",{"_index":525,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:14",{"_index":528,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:15",{"_index":526,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:16",{"_index":524,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:17",{"_index":529,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:18",{"_index":517,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:24",{"_index":519,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:33",{"_index":520,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/logger/logger.service.ts:52",{"_index":531,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/main.ts",{"_index":1465,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/bearer",{"_index":233,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"coverage.html":{}}}],["src/middleware/global",{"_index":398,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"coverage.html":{}}}],["src/middleware/logger.middleware.ts",{"_index":496,"title":{},"body":{"injectables/LoggerMiddleware.html":{},"coverage.html":{}}}],["src/middleware/logger.middleware.ts:6",{"_index":497,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/middleware/logger.middleware.ts:9",{"_index":498,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["src/middleware/repsonse.interceptor.ts",{"_index":944,"title":{},"body":{"injectables/ResponseInterceptor.html":{},"coverage.html":{}}}],["src/middleware/repsonse.interceptor.ts:13",{"_index":946,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/middleware/repsonse.interceptor.ts:18",{"_index":950,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["src/middleware/role.guard.ts",{"_index":1110,"title":{},"body":{"guards/RoleGuard.html":{},"coverage.html":{}}}],["src/middleware/role.guard.ts:15",{"_index":1114,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/middleware/role.guard.ts:21",{"_index":1115,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/middleware/role.guard.ts:53",{"_index":1117,"title":{},"body":{"guards/RoleGuard.html":{}}}],["src/middleware/roles.decorator.ts",{"_index":1466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/restaurants/dto/create",{"_index":369,"title":{},"body":{"classes/CreateRestaurantDto.html":{},"coverage.html":{}}}],["src/restaurants/dto/update",{"_index":1145,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["src/restaurants/entities/restaurant.entity.ts",{"_index":967,"title":{},"body":{"entities/Restaurant.html":{},"coverage.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:21",{"_index":978,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:25",{"_index":993,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:32",{"_index":972,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:39",{"_index":986,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:46",{"_index":983,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:50",{"_index":975,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:54",{"_index":990,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:58",{"_index":977,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:61",{"_index":992,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:64",{"_index":988,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/entities/restaurant.entity.ts:67",{"_index":985,"title":{},"body":{"entities/Restaurant.html":{}}}],["src/restaurants/menus/dto/create",{"_index":326,"title":{},"body":{"classes/CreateMenuDto.html":{},"coverage.html":{}}}],["src/restaurants/menus/dto/update",{"_index":1140,"title":{},"body":{"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts",{"_index":559,"title":{},"body":{"entities/Menu.html":{},"coverage.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:19",{"_index":584,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:23",{"_index":602,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:29",{"_index":572,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:35",{"_index":586,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:42",{"_index":592,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:52",{"_index":582,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:55",{"_index":574,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:58",{"_index":604,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:61",{"_index":576,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:66",{"_index":600,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/entities/menu.entity.ts:72",{"_index":596,"title":{},"body":{"entities/Menu.html":{}}}],["src/restaurants/menus/menu",{"_index":615,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"coverage.html":{}}}],["src/restaurants/menus/menus.controller.ts",{"_index":649,"title":{},"body":{"controllers/MenusController.html":{},"coverage.html":{}}}],["src/restaurants/menus/menus.controller.ts:101",{"_index":676,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:150",{"_index":683,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:173",{"_index":694,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:187",{"_index":687,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.controller.ts:66",{"_index":662,"title":{},"body":{"controllers/MenusController.html":{}}}],["src/restaurants/menus/menus.module.ts",{"_index":744,"title":{},"body":{"modules/MenusModule.html":{}}}],["src/restaurants/menus/menus.service.ts",{"_index":747,"title":{},"body":{"injectables/MenusService.html":{},"coverage.html":{}}}],["src/restaurants/menus/menus.service.ts:10",{"_index":750,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:17",{"_index":754,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:26",{"_index":752,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:34",{"_index":756,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:44",{"_index":757,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:48",{"_index":759,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/menus/menus.service.ts:52",{"_index":758,"title":{},"body":{"injectables/MenusService.html":{}}}],["src/restaurants/middleware/restaurant",{"_index":999,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{},"coverage.html":{}}}],["src/restaurants/reservations/dto/create",{"_index":338,"title":{},"body":{"classes/CreateReservationDto.html":{},"coverage.html":{}}}],["src/restaurants/reservations/dto/update",{"_index":1143,"title":{},"body":{"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["src/restaurants/reservations/entities/reservation",{"_index":817,"title":{},"body":{"entities/ReservationMenu.html":{},"coverage.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts",{"_index":773,"title":{},"body":{"entities/Reservation.html":{},"coverage.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:24",{"_index":780,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:29",{"_index":803,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:34",{"_index":799,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:40",{"_index":795,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:47",{"_index":792,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:54",{"_index":786,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:60",{"_index":776,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:63",{"_index":777,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:66",{"_index":800,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:69",{"_index":778,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:72",{"_index":802,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:77",{"_index":797,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/entities/reservation.entity.ts:83",{"_index":787,"title":{},"body":{"entities/Reservation.html":{}}}],["src/restaurants/reservations/reservation",{"_index":433,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"injectables/ReservationAmountParsePipe.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/restaurants/reservations/reservations.controller.ts",{"_index":830,"title":{},"body":{"controllers/ReservationsController.html":{},"coverage.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:132",{"_index":842,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:190",{"_index":847,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:212",{"_index":856,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:236",{"_index":850,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.controller.ts:60",{"_index":836,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["src/restaurants/reservations/reservations.module.ts",{"_index":890,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["src/restaurants/reservations/reservations.service.ts",{"_index":893,"title":{},"body":{"injectables/ReservationsService.html":{},"coverage.html":{}}}],["src/restaurants/reservations/reservations.service.ts:127",{"_index":900,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:131",{"_index":904,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:135",{"_index":902,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:18",{"_index":895,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:34",{"_index":897,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/reservations/reservations.service.ts:76",{"_index":898,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["src/restaurants/restaurant",{"_index":1008,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.controller.ts",{"_index":1025,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.controller.ts:104",{"_index":1034,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:153",{"_index":1039,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:177",{"_index":1051,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:203",{"_index":1044,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.controller.ts:56",{"_index":1030,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.module.ts",{"_index":1079,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.module.ts:29",{"_index":1080,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.service.ts",{"_index":1092,"title":{},"body":{"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.service.ts:11",{"_index":1093,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:18",{"_index":1095,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:26",{"_index":1096,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:67",{"_index":1097,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:91",{"_index":1099,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/restaurants/restaurants.service.ts:95",{"_index":1098,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/users/dto/create",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1150,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1154,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:21",{"_index":1161,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":1175,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":1160,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":1176,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1163,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:44",{"_index":1171,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":1165,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":1155,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":1172,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":1156,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:61",{"_index":1169,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:64",{"_index":1167,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1180,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:103",{"_index":1206,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:132",{"_index":1222,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:178",{"_index":1216,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:198",{"_index":1232,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:215",{"_index":1227,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:53",{"_index":1211,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:69",{"_index":1193,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:87",{"_index":1199,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1275,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1277,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:107",{"_index":1295,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:141",{"_index":1289,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:153",{"_index":1300,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:17",{"_index":1301,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:184",{"_index":1299,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1283,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:33",{"_index":1297,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:42",{"_index":1286,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":1287,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":1288,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:81",{"_index":1291,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:93",{"_index":1293,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/util/common.ts",{"_index":1472,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/enums/userrole.ts",{"_index":1473,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/protocol.ts",{"_index":1474,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/util/response.ts",{"_index":282,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{},"coverage.html":{}}}],["src/util/response.ts:13",{"_index":939,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:14",{"_index":942,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:15",{"_index":938,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:16",{"_index":940,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:17",{"_index":941,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:18",{"_index":937,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:19",{"_index":936,"title":{},"body":{"classes/ResponseFormat.html":{}}}],["src/util/response.ts:42",{"_index":393,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:43",{"_index":395,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:44",{"_index":390,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:45",{"_index":392,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:46",{"_index":394,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:47",{"_index":391,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:48",{"_index":396,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/response.ts:49",{"_index":389,"title":{},"body":{"classes/ExceptionResponseFormat.html":{}}}],["src/util/secret.ts",{"_index":1476,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/swagger.ts",{"_index":1477,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/typeorm.ts",{"_index":1478,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/util/util.module.ts",{"_index":1337,"title":{},"body":{"modules/UtilModule.html":{}}}],["src/util/util.service.ts",{"_index":1339,"title":{},"body":{"injectables/UtilService.html":{},"coverage.html":{}}}],["src/util/util.service.ts:126",{"_index":1369,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:148",{"_index":1360,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:152",{"_index":1357,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:23",{"_index":1379,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:24",{"_index":1377,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:28",{"_index":1348,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:35",{"_index":1353,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:42",{"_index":1351,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:47",{"_index":1356,"title":{},"body":{"injectables/UtilService.html":{}}}],["src/util/util.service.ts:87",{"_index":1363,"title":{},"body":{"injectables/UtilService.html":{}}}],["start",{"_index":961,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["start:dev",{"_index":1596,"title":{},"body":{"index.html":{}}}],["start:prodapi",{"_index":1598,"title":{},"body":{"index.html":{}}}],["started",{"_index":1520,"title":{"index.html":{}},"body":{}}],["state",{"_index":1618,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1434,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/GlobalExceptionFilter.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"classes/ResponseFormat.html":{},"injectables/ResponseInterceptor.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["stopatfirsterror",{"_index":636,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"controllers/ReservationsController.html":{}}}],["strategies",{"_index":1510,"title":{},"body":{"dependencies.html":{}}}],["strict",{"_index":1372,"title":{},"body":{"injectables/UtilService.html":{}}}],["string",{"_index":284,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["structure.sql",{"_index":1613,"title":{},"body":{"index.html":{}}}],["subject",{"_index":1401,"title":{},"body":{"injectables/UtilService.html":{}}}],["summary",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["svg",{"_index":1627,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":317,"title":{},"body":{"injectables/CommonService.html":{},"index.html":{}}}],["swagger.ts",{"_index":1537,"title":{},"body":{"index.html":{}}}],["swagger_url",{"_index":1460,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["swaggerconf",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["swaggeroption",{"_index":1463,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":262,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["synchronize",{"_index":1735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":521,"title":{},"body":{"injectables/LoggerService.html":{}}}],["t",{"_index":320,"title":{},"body":{"injectables/CommonService.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerService.html":{},"injectables/UsersService.html":{}}}],["table",{"_index":1485,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1484,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":768,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["tap",{"_index":954,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["target",{"_index":478,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["test",{"_index":1548,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["test1@example.com",{"_index":1178,"title":{},"body":{"entities/User.html":{}}}],["test1@example.com'})@isnotempty()@isemail()@column({type",{"_index":1157,"title":{},"body":{"entities/User.html":{}}}],["testuser1",{"_index":556,"title":{},"body":{"classes/LoginDto.html":{},"entities/User.html":{}}}],["testuser1'})@column({type",{"_index":1173,"title":{},"body":{"entities/User.html":{}}}],["this.appservice.getserverversion",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(res",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(req",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.code",{"_index":307,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.commonservice.getconfig('common",{"_index":107,"title":{},"body":{"injectables/AppService.html":{}}}],["this.commonservice.getconfig('secret",{"_index":255,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/UtilService.html":{}}}],["this.configservice.get(configname",{"_index":323,"title":{},"body":{"injectables/CommonService.html":{}}}],["this.context",{"_index":539,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.createhashedpassword(message",{"_index":1387,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.customconfig.getconfig('database",{"_index":1139,"title":{},"body":{"injectables/TypeormService.html":{}}}],["this.detail",{"_index":308,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.errormessage",{"_index":474,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["this.findone(id",{"_index":1332,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getflaterrorconstraints(errors",{"_index":638,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["this.icons[index",{"_index":546,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.isduplicatedby",{"_index":1312,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.isoutput",{"_index":548,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.levels",{"_index":542,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.levels.indexof(level",{"_index":544,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.logger.log",{"_index":966,"title":{},"body":{"injectables/ResponseInterceptor.html":{}}}],["this.logger.log(`request",{"_index":503,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["this.matchroles(roles",{"_index":1126,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.menurepository",{"_index":767,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{}}}],["this.menurepository.delete(menuid",{"_index":772,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.findoneby",{"_index":770,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.save",{"_index":762,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menurepository.update(menuid",{"_index":771,"title":{},"body":{"injectables/MenusService.html":{}}}],["this.menusservice.create(+restaurantid",{"_index":725,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.createbulk(+restaurantid",{"_index":724,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.findall",{"_index":729,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.findone(+menuid",{"_index":732,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.remove(+menuid",{"_index":739,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.menusservice.update(+menuid",{"_index":736,"title":{},"body":{"controllers/MenusController.html":{}}}],["this.message",{"_index":302,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.method",{"_index":294,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.ok",{"_index":290,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.path",{"_index":295,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.payload",{"_index":296,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.reflector.get('roles",{"_index":1120,"title":{},"body":{"guards/RoleGuard.html":{}}}],["this.reservationrepository",{"_index":920,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["this.reservationrepository.create",{"_index":913,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.findoneby",{"_index":933,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.manager.save(reservationmenu",{"_index":919,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.save(reservation",{"_index":915,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.softdelete(id",{"_index":935,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationrepository.update(id",{"_index":934,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["this.reservationsservice.create",{"_index":867,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findall",{"_index":874,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.findone(+reservationid",{"_index":878,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.remove(+reservationid",{"_index":885,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.reservationsservice.update",{"_index":882,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["this.restaurantrepository",{"_index":1102,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.findone",{"_index":1106,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.findoneby",{"_index":1021,"title":{},"body":{"guards/RestaurantOwnerGuard.html":{}}}],["this.restaurantrepository.save",{"_index":1100,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.softdelete(id",{"_index":1108,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantrepository.update(id",{"_index":1107,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.restaurantsservice.create(req.user.id",{"_index":1058,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.findall",{"_index":1063,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.findone(+restaurantid",{"_index":1067,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.remove(+restaurantid",{"_index":1074,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.restaurantsservice.update(+restaurantid",{"_index":1070,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.secretconfig",{"_index":1382,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.accesstoken",{"_index":1392,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.password",{"_index":1384,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.secretconfig.refreshtoken",{"_index":1399,"title":{},"body":{"injectables/UtilService.html":{}}}],["this.status",{"_index":293,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"classes/ResponseFormat.html":{}}}],["this.timestamp",{"_index":297,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"classes/ResponseFormat.html":{}}}],["this.update",{"_index":537,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.userrepository",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.countby(whereoption",{"_index":1303,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1322,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(createuserdto",{"_index":1320,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softdelete(id",{"_index":1333,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":1330,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userselectoption",{"_index":1323,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.comparepassword",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1238,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(user.id",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{}}}],["this.usersservice.getme(req.user",{"_index":1262,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getmeresrvations",{"_index":1257,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isduplicatedby",{"_index":1244,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(req.user.id",{"_index":1271,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(req.user.id",{"_index":1267,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.utilservice.compareinputpasswordwith",{"_index":1307,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.utilservice.cookieoptions",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.utilservice.createhashedpassword",{"_index":1317,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.utilservice.createtoken(user",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.utilservice.searchpagination",{"_index":766,"title":{},"body":{"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["this.utilservice.thrownoexistsentitywithselectby",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{}}}],["this.utilservice.thrownoexistsentitywithselectby(this.repository",{"_index":1006,"title":{},"body":{"injectables/RestaurantExistsMiddleware.html":{}}}],["throw",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["thrownoexistsentitywithselectby",{"_index":1347,"title":{},"body":{"injectables/UtilService.html":{}}}],["thrownoexistsentitywithselectby(orm",{"_index":1366,"title":{},"body":{"injectables/UtilService.html":{}}}],["timestamp",{"_index":283,"title":{},"body":{"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/LoggerService.html":{},"classes/ResponseFormat.html":{},"miscellaneous/variables.html":{}}}],["title",{"_index":1680,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":247,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"index.html":{}}}],["tomastrain1",{"_index":1602,"title":{},"body":{"index.html":{}}}],["total",{"_index":668,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["totalamount",{"_index":1411,"title":{},"body":{"injectables/UtilService.html":{}}}],["transform",{"_index":619,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["transform(value",{"_index":624,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{}}}],["transformer",{"_index":353,"title":{},"body":{"classes/CreateReservationDto.html":{},"injectables/MenuDataParsePipe.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":865,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["true",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BearerParserMiddleware.html":{},"injectables/CommonService.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/LoggerService.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{}}}],["tsconfig.build.json",{"_index":1566,"title":{},"body":{"index.html":{}}}],["tsconfig.json",{"_index":1568,"title":{},"body":{"index.html":{}}}],["type",{"_index":352,"title":{},"body":{"classes/CreateReservationDto.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"entities/Menu.html":{},"controllers/MenusController.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"controllers/ReservationsController.html":{},"entities/Restaurant.html":{},"controllers/RestaurantsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined",{"_index":349,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["typealiases",{"_index":1636,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typecheck",{"_index":1798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typeof",{"_index":538,"title":{},"body":{"injectables/LoggerService.html":{},"injectables/ReservationAmountParsePipe.html":{},"guards/RoleGuard.html":{},"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"entities/Menu.html":{},"injectables/MenusService.html":{},"entities/Reservation.html":{},"entities/ReservationMenu.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantExistsMiddleware.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"dependencies.html":{},"index.html":{}}}],["typeorm.service",{"_index":385,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeorm.ts",{"_index":1536,"title":{},"body":{"index.html":{}}}],["typeormmodule",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([menu",{"_index":746,"title":{},"body":{"modules/MenusModule.html":{}}}],["typeormmodule.forfeature([reservation",{"_index":892,"title":{},"body":{"modules/ReservationsModule.html":{}}}],["typeormmodule.forfeature([restaurant",{"_index":1088,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":386,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1136,"title":{},"body":{"injectables/TypeormService.html":{}}}],["typeormoption",{"_index":1481,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormoptionsfactory",{"_index":1138,"title":{},"body":{"injectables/TypeormService.html":{}}}],["typeormservice",{"_index":384,"title":{"injectables/TypeormService.html":{}},"body":{"modules/DatabaseModule.html":{},"injectables/TypeormService.html":{},"coverage.html":{}}}],["typeormsource",{"_index":1482,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":1148,"title":{},"body":{"classes/UpdateRestaurantDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"index.html":{}}}],["typescript",{"_index":1567,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/RoleGuard.html":{}}}],["unauthorizedexception(errorprotocol",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"guards/RoleGuard.html":{}}}],["undefined",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UtilService.html":{}}}],["undefined})@apioperation({summary",{"_index":1191,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@apiparam({name",{"_index":659,"title":{},"body":{"controllers/MenusController.html":{}}}],["undefined})@deletedatecolumn",{"_index":976,"title":{},"body":{"entities/Restaurant.html":{}}}],["undefined})@isarray({message",{"_index":347,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["unique",{"_index":1158,"title":{},"body":{"entities/User.html":{}}}],["unknown",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CommonResponseFormat.html":{},"classes/ExceptionResponseFormat.html":{},"injectables/MenuDataParsePipe.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"classes/ResponseFormat.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["unlicensed",{"_index":1634,"title":{},"body":{"properties.html":{}}}],["unsigned",{"_index":591,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/User.html":{}}}],["update",{"_index":516,"title":{},"body":{"injectables/LoggerService.html":{},"controllers/MenusController.html":{},"injectables/MenusService.html":{},"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@req",{"_index":1266,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":903,"title":{},"body":{"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["update(menuid",{"_index":688,"title":{},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{}}}],["update(message",{"_index":1385,"title":{},"body":{"injectables/UtilService.html":{}}}],["update(req",{"_index":1228,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(reservationid",{"_index":851,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["update(restaurantid",{"_index":1045,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["updatedat",{"_index":565,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":603,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["updateduser",{"_index":1331,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatemenudto",{"_index":689,"title":{"classes/UpdateMenuDto.html":{}},"body":{"controllers/MenusController.html":{},"injectables/MenusService.html":{},"classes/UpdateMenuDto.html":{},"coverage.html":{}}}],["updatereservationdto",{"_index":852,"title":{"classes/UpdateReservationDto.html":{}},"body":{"controllers/ReservationsController.html":{},"injectables/ReservationsService.html":{},"classes/UpdateReservationDto.html":{},"coverage.html":{}}}],["updaterestaurantdto",{"_index":1046,"title":{"classes/UpdateRestaurantDto.html":{}},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantDto.html":{},"coverage.html":{}}}],["updaterestaurantresponse",{"_index":1068,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["updateuserdto",{"_index":1149,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.email",{"_index":1325,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.password",{"_index":1328,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.phone",{"_index":1327,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.userid",{"_index":1326,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":501,"title":{},"body":{"injectables/LoggerMiddleware.html":{}}}],["urlsearchparams(options",{"_index":1408,"title":{},"body":{"injectables/UtilService.html":{}}}],["use",{"_index":235,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["use(req",{"_index":237,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/LoggerMiddleware.html":{},"injectables/RestaurantExistsMiddleware.html":{}}}],["useclass",{"_index":387,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["useguards",{"_index":705,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["useguards(restaurantownerguard",{"_index":719,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{}}}],["useguards(restaurantownerguard)@roles(['undefined'])@delete(':menuid",{"_index":686,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(restaurantownerguard)@roles(['undefined'])@get",{"_index":841,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["useguards(restaurantownerguard)@roles(['undefined'])@get(':reservationid",{"_index":846,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["useguards(restaurantownerguard)@roles(['undefined'])@patch(':menuid",{"_index":693,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(restaurantownerguard)@roles(['undefined'])@post",{"_index":661,"title":{},"body":{"controllers/MenusController.html":{}}}],["useguards(roleguard",{"_index":1801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usemodel",{"_index":1684,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user",{"_index":175,"title":{"entities/User.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/Reservation.html":{},"controllers/ReservationsController.html":{},"modules/ReservationsModule.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1310,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto",{"_index":1153,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.id",{"_index":914,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["user.password",{"_index":1308,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.phone",{"_index":911,"title":{},"body":{"injectables/ReservationsService.html":{}}}],["user.reservations",{"_index":801,"title":{},"body":{"entities/Reservation.html":{}}}],["user.restaurants",{"_index":991,"title":{},"body":{"entities/Restaurant.html":{}}}],["user.role",{"_index":1127,"title":{},"body":{"guards/RoleGuard.html":{}}}],["user.userid",{"_index":1329,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdata",{"_index":257,"title":{},"body":{"injectables/BearerParserMiddleware.html":{}}}],["userhashedpassword",{"_index":1350,"title":{},"body":{"injectables/UtilService.html":{}}}],["userid",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"entities/Reservation.html":{},"injectables/ReservationsService.html":{},"entities/Restaurant.html":{},"guards/RestaurantOwnerGuard.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{},"index.html":{}}}],["useriddto",{"_index":1207,"title":{},"body":{"controllers/UsersController.html":{}}}],["useriddto?.userid",{"_index":1254,"title":{},"body":{"controllers/UsersController.html":{}}}],["useridvalidatedto",{"_index":1252,"title":{},"body":{"controllers/UsersController.html":{}}}],["username",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantsService.html":{},"entities/User.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":711,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["users",{"_index":1181,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["users'})@apibodywithmodel({createuserdto",{"_index":1210,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1276,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1234,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/:userid",{"_index":1264,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/:userid'})@apibearerauth()@apibodywithmodel({updateuserdto",{"_index":1230,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/:userid'})@apibearerauth()@apioperation({summary",{"_index":1225,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/entities/user.entity",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/Reservation.html":{},"modules/ReservationsModule.html":{},"entities/Restaurant.html":{}}}],["users/me",{"_index":1259,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/me'})@apibearerauth()@apioperation({summary",{"_index":1214,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/me/reservations",{"_index":1219,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.module",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{}}}],["users/users.service",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{}}}],["users/validate/email",{"_index":1240,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/email'})@apibodywithmodel({emailvalidatedto",{"_index":1190,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/phone",{"_index":1247,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/phone'})@apibodywithmodel({phonenumbervalidatedto",{"_index":1197,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/validate/user",{"_index":1203,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":1179,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userselectoption",{"_index":1278,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersmodule",{"_index":53,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MenusModule.html":{},"modules/ReservationsModule.html":{},"modules/RestaurantsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":184,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usertokendata",{"_index":261,"title":{},"body":{"injectables/BearerParserMiddleware.html":{},"injectables/ReservationsService.html":{},"injectables/UsersService.html":{},"injectables/UtilService.html":{}}}],["usertokendata.id",{"_index":1324,"title":{},"body":{"injectables/UsersService.html":{}}}],["util",{"_index":1311,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["util.service",{"_index":1338,"title":{},"body":{"modules/UtilModule.html":{}}}],["util/enums/userrole",{"_index":712,"title":{},"body":{"controllers/MenusController.html":{},"controllers/ReservationsController.html":{},"controllers/RestaurantsController.html":{},"guards/RoleGuard.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["util/protocol",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/MenuDataParsePipe.html":{},"controllers/MenusController.html":{},"injectables/ReservationAmountParsePipe.html":{},"controllers/ReservationsController.html":{},"guards/RestaurantOwnerGuard.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"guards/RoleGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["util/response",{"_index":411,"title":{},"body":{"classes/GlobalExceptionFilter.html":{},"injectables/ResponseInterceptor.html":{}}}],["util/util.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["util/util.service",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{}}}],["utilfunction.ts",{"_index":1538,"title":{},"body":{"index.html":{}}}],["utilmodule",{"_index":54,"title":{"modules/UtilModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UtilModule.html":{},"modules.html":{},"overview.html":{}}}],["utilservice",{"_index":185,"title":{"injectables/UtilService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/MenusService.html":{},"injectables/ReservationsService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/UsersService.html":{},"modules/UtilModule.html":{},"injectables/UtilService.html":{},"coverage.html":{},"overview.html":{}}}],["v",{"_index":1406,"title":{},"body":{"injectables/UtilService.html":{},"miscellaneous/variables.html":{}}}],["v10.9.0",{"_index":1526,"title":{},"body":{"index.html":{}}}],["v20.11.1",{"_index":1524,"title":{},"body":{"index.html":{}}}],["v3.0.8",{"_index":1532,"title":{},"body":{"index.html":{}}}],["validate",{"_index":438,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"injectables/MenuDataParsePipe.html":{}}}],["validate(datetime",{"_index":463,"title":{},"body":{"classes/IsDateTimeAfterNowConstraint.html":{}}}],["validate(endtime",{"_index":444,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{}}}],["validate(object",{"_index":635,"title":{},"body":{"injectables/MenuDataParsePipe.html":{}}}],["validate(phone",{"_index":485,"title":{},"body":{"classes/IsPhoneNumberFormatConstraint.html":{}}}],["validateemailresponse",{"_index":1239,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatenested",{"_index":362,"title":{},"body":{"classes/CreateReservationDto.html":{}}}],["validatephoneresponse",{"_index":1246,"title":{},"body":{"controllers/UsersController.html":{}}}],["validateuseridresponse",{"_index":1251,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationarguments",{"_index":441,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["validationerror",{"_index":621,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/UtilService.html":{}}}],["validationoptions",{"_index":449,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"miscellaneous/functions.html":{}}}],["validationpipe",{"_index":858,"title":{},"body":{"controllers/ReservationsController.html":{}}}],["validator",{"_index":363,"title":{},"body":{"classes/CreateReservationDto.html":{},"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{},"entities/Menu.html":{},"injectables/MenuDataParsePipe.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{},"injectables/UtilService.html":{},"dependencies.html":{}}}],["validator.ts",{"_index":1540,"title":{},"body":{"index.html":{}}}],["validatorconstraint",{"_index":450,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["validatorconstraintinterface",{"_index":435,"title":{},"body":{"classes/IsAfterStartTimeConstraint.html":{},"classes/IsDateTimeAfterNowConstraint.html":{},"classes/IsPhoneNumberFormatConstraint.html":{}}}],["value",{"_index":628,"title":{},"body":{"injectables/MenuDataParsePipe.html":{},"injectables/ReservationAmountParsePipe.html":{},"miscellaneous/variables.html":{}}}],["value.map(number",{"_index":816,"title":{},"body":{"injectables/ReservationAmountParsePipe.html":{}}}],["value.some((item",{"_index":814,"title":{},"body":{"injectables/ReservationAmountParsePipe.html":{}}}],["varchar",{"_index":569,"title":{},"body":{"entities/Menu.html":{},"entities/Reservation.html":{},"entities/Restaurant.html":{},"entities/User.html":{}}}],["variable",{"_index":1441,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1645,"title":{"miscellaneous/variables.html":{}},"body":{}}],["version",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"coverage.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["version'})@apioperation({summary",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["version=10.3.13",{"_index":1584,"title":{},"body":{"index.html":{}}}],["versionresponse",{"_index":30,"title":{},"body":{"controllers/AppController.html":{}}}],["vitest",{"_index":1531,"title":{},"body":{"index.html":{}}}],["vitest.config.mjs",{"_index":1569,"title":{},"body":{"index.html":{}}}],["void",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BearerParserMiddleware.html":{},"classes/GlobalExceptionFilter.html":{},"injectables/LoggerMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/RestaurantExistsMiddleware.html":{},"modules/RestaurantsModule.html":{}}}],["warn",{"_index":514,"title":{},"body":{"injectables/LoggerService.html":{}}}],["web",{"_index":1615,"title":{},"body":{"index.html":{}}}],["whereoption",{"_index":1298,"title":{},"body":{"injectables/UsersService.html":{}}}],["windows",{"_index":1527,"title":{},"body":{"index.html":{}}}],["winx64.msi",{"_index":1581,"title":{},"body":{"index.html":{}}}],["wronglogindata",{"_index":1781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrongparamtype",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getServerVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getServerVersion\n                        \n                    \n                \n            \n            \n                \n                        \n                    getServerVersion()\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({VersionResponse: undefined}, {ok: true, status: undefined, method: 'GET', path: '/version'})@ApiOperation({summary: '버전 확인'})@Get('version')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/app.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         any\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { Controller, Get, HttpStatus } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiOperation } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiResponseWithModel(\n    {\n      VersionResponse: {\n        version: '0.0.1',\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'GET',\n      path: '/version',\n    },\n  )\n  @ApiOperation({ summary: '버전 확인' })\n  @Get('version')\n  getServerVersion() {\n    return this.appService.getServerVersion();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    모듈\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUtilModule\n\nUtilModule\n\nAppModule -->\n\nUtilModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nAppModule -->\n\nLoggerService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            AppService\n                        \n                        \n                            LoggerService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            LoggerModule\n                        \n                        \n                            RestaurantsModule\n                        \n                        \n                            UsersModule\n                        \n                        \n                            UtilModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/app.module.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { BearerParserMiddleware } from '@middleware/bearer-parser.middleware';\nimport secretConf from '@common/variables/secretConf';\nimport swaggerConf from '@common/variables/swaggerConf';\nimport { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './auth/auth.module';\nimport { CommonModule } from './common/common.module';\nimport commonConf from './common/variables/commonConf';\nimport databaseConf from './common/variables/databaseConf';\nimport { DatabaseModule } from './database/database.module';\nimport { LoggerModule } from './logger/logger.module';\nimport { LoggerService } from './logger/logger.service';\nimport { LoggerMiddleware } from './middleware/logger.middleware';\nimport { RestaurantsModule } from './restaurants/restaurants.module';\nimport { UsersModule } from './users/users.module';\nimport { UtilModule } from './util/util.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [commonConf, databaseConf, secretConf, swaggerConf],\n    }),\n    CommonModule,\n    DatabaseModule,\n    UsersModule,\n    RestaurantsModule,\n    AuthModule,\n    DatabaseModule,\n    LoggerModule,\n    UtilModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService, LoggerService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware, BearerParserMiddleware).forRoutes('*api');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                getServerVersion\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        getServerVersion\n                        \n                    \n                \n            \n            \n                \ngetServerVersion()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/app.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :     { version: any; }\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CommonService } from './common/common.service';\nimport { CommonOption } from './common/variables/commonConf';\n\n@Injectable()\nexport class AppService {\n  constructor(private readonly commonService: CommonService) {}\n\n  getServerVersion() {\n    const commonConfig = this.commonService.getConfig('common');\n    return { version: commonConfig.version };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                접두어\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                logout\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                refresh\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(res: Response, loginDto: LoginDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({LoginResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/login'})@ApiBodyWithModel({LoginDto: })@ApiOperation({summary: '로그인'})@Post('login')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    logout(res: Response)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({LogoutResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/logout'})@ApiBearerAuth()@ApiOperation({summary: '로그아웃'})@Post('logout')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     { result: boolean; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        refresh\n                        \n                    \n                \n            \n            \n                \n                        \n                    refresh(req: Request, res: Response)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({RefreshResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/auth/login'})@ApiBearerAuth()@ApiOperation({summary: '토큰 리프레시'})@Roles()@Post('refresh')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Roles } from '@middleware/roles.decorator';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { Body, Controller, HttpStatus, Post, Req, Res } from '@nestjs/common';\nimport { ApiBearerAuth, ApiOperation } from '@nestjs/swagger';\nimport { Request, Response } from 'express';\nimport { AuthService } from './auth.service';\nimport { LoginDto } from './dto/login.dto';\nimport { EXAMPLE_JWT } from '@common/variables/environment';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @ApiResponseWithModel(\n    {\n      LoginResponse: {\n        accessToken: EXAMPLE_JWT,\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/login',\n    },\n  )\n  @ApiBodyWithModel({ LoginDto })\n  @ApiOperation({ summary: '로그인' })\n  @Post('login')\n  login(@Res({ passthrough: true }) res: Response, @Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto, res);\n  }\n\n  @ApiResponseWithModel(\n    { LogoutResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/logout',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '로그아웃' })\n  @Post('logout')\n  logout(@Res({ passthrough: true }) res: Response) {\n    this.authService.logout(res);\n    return { result: true };\n  }\n\n  @ApiResponseWithModel(\n    {\n      RefreshResponse: {\n        accessToken: EXAMPLE_JWT,\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/auth/login',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '토큰 리프레시' })\n  @Roles()\n  @Post('refresh')\n  refresh(@Req() req: Request, @Res({ passthrough: true }) res: Response) {\n    return this.authService.refreshToken(req, res);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    모듈\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { User } from '@users/entities/user.entity';\nimport { UsersModule } from '@users/users.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Reservation]), UsersModule],\n  controllers: [AuthController],\n  providers: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(userRepository: Repository, usersService: UsersService, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/auth/auth.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto, res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout(res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshToken(req: Request, res: Response)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/auth/auth.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '@users/entities/user.entity';\nimport { UsersService } from '@users/users.service';\nimport { Protocol } from '@util/protocol';\nimport { UtilService } from '@util/util.service';\nimport { Request, Response } from 'express';\nimport { Repository } from 'typeorm';\nimport { LoginDto } from './dto/login.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly usersService: UsersService,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async login(loginDto: LoginDto, res: Response) {\n    /* 유저 조회 후 없으면 throw */\n    await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { userId: loginDto.userId },\n      },\n    );\n\n    /* 비밀번호 검증, 틀리면 throw */\n    const user = await this.usersService.comparePassword(\n      loginDto.userId,\n      loginDto.password,\n    );\n\n    try {\n      const { accessToken, refreshToken } = this.utilService.createToken(user);\n\n      res.cookie('refresh', refreshToken, this.utilService.cookieOptions);\n\n      return { accessToken };\n    } catch (error) {\n      const errorProtocol = Protocol.JwtCreate;\n      throw new BadRequestException(errorProtocol);\n    }\n  }\n\n  logout(res: Response) {\n    res.clearCookie('refresh');\n  }\n\n  async refreshToken(req: Request, res: Response) {\n    if (!req.cookies.refresh) {\n      const errorProtocol = Protocol.NoRefreshCookie;\n      throw new UnauthorizedException(errorProtocol);\n    }\n\n    const user = req.user;\n    const foundUser = await this.usersService.findOne(user.id);\n\n    if (!foundUser) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol);\n    }\n\n    const { accessToken, refreshToken } = this.utilService.createToken(user);\n\n    res.cookie('refresh', refreshToken, this.utilService.cookieOptions);\n\n    return { accessToken };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/BearerParserMiddleware.html":{"url":"injectables/BearerParserMiddleware.html","title":"injectable - BearerParserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BearerParserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/bearer-parser.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/bearer-parser.middleware.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, _res, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/bearer-parser.middleware.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                _res\n                                            \n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { SecretOption } from '@common/variables/secretConf';\nimport {\n  BadRequestException,\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Protocol } from '@util/protocol';\nimport { NextFunction, Request } from 'express';\nimport * as jwt from 'jsonwebtoken';\n\n@Injectable()\nexport class BearerParserMiddleware implements NestMiddleware {\n  constructor(private readonly commonService: CommonService) {}\n\n  use(req: Request, _res, next: NextFunction) {\n    // 헤더에서 `Bearer token` 정보 가져오기\n    let authorization = req.headers?.authorization;\n    let isRefresh = false;\n\n    if (\n      ['/auth/refresh', '/auth/logout'].some((ex) =>\n        req.originalUrl.endsWith(ex),\n      )\n    ) {\n      // 쿠키에서 `Bearer token` 정보 가져오기\n      authorization = req.cookies.refresh;\n      isRefresh = true;\n    }\n\n    const secretOption = this.commonService.getConfig('secret');\n    if (authorization) {\n      const accessToken = authorization.replace(/^bearer\\s/i, '');\n      try {\n        const userData = jwt.verify(\n          accessToken,\n          isRefresh ? secretOption.refreshToken : secretOption.accessToken,\n        ) as UserTokenData;\n        req.user = userData;\n      } catch (error: any) {\n        switch (error.message) {\n          case 'invalid signature': {\n            const errorProtocol = Protocol.JwtWrongSignature;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          case 'jwt expired': {\n            const errorProtocol = Protocol.JwtExpired;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          case 'jwt malformed': {\n            const errorProtocol = Protocol.JwtMalFormed;\n            throw new UnauthorizedException(errorProtocol);\n          }\n          default: {\n            const errorProtocol = Protocol.JwtServerException;\n            throw new BadRequestException(errorProtocol);\n          }\n        }\n      }\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    모듈\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\n\nCommonService \n\nCommonService \n\n\n\nCommonModule\n\nCommonModule\n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            CommonService\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            CommonService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { CommonService } from './common.service';\n\n@Global()\n@Module({\n  providers: [CommonService],\n  exports: [CommonService],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"interfaces/CommonResponseFormat.html":{"url":"interfaces/CommonResponseFormat.html","title":"interface - CommonResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  인터페이스\n  \n  CommonResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n        \n            색인\n            \n                \n                    \n                        \n                            속성\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                                \n                                        \n                                            ok\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                속성\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ok\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ok:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:     HttpStatus\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :     HttpStatus\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            타입 :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.method = method;\n    this.path = path;\n    this.payload = payload;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/CommonService.html":{"url":"injectables/CommonService.html","title":"injectable - CommonService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/common/common.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                getConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/common/common.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfig\n                        \n                    \n                \n            \n            \n                \ngetConfig(configName: \"common\" | \"database\" | \"swagger\" | \"secret\")\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/common.service.ts:8\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                configName\n                                            \n                                                        \"common\" | \"database\" | \"swagger\" | \"secret\"\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     ConfigType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService, ConfigType } from '@nestjs/config';\n\n@Injectable()\nexport class CommonService {\n  constructor(private readonly configService: ConfigService) {}\n\n  getConfig any>(\n    configName: 'common' | 'database' | 'swagger' | 'secret',\n  ): ConfigType {\n    return this.configService.get(configName, {\n      infer: true,\n    }) as ConfigType;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateMenuDto.html":{"url":"classes/CreateMenuDto.html","title":"class - CreateMenuDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateMenuDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/dto/create-menu.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Menu, [\n  'category',\n  'name',\n  'description',\n  'price',\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Menu } from '../entities/menu.entity';\n\nexport class CreateMenuDto extends PickType(Menu, [\n  'category',\n  'name',\n  'description',\n  'price',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateReservationDto.html":{"url":"classes/CreateReservationDto.html","title":"class - CreateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/dto/create-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'phone',\n  'amount',\n])\n            \n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                menu\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     number[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: undefined})@IsArray({message: '메뉴는 배열형태로 전달되어야 합니다.'})@ArrayMinSize(1, {message: '최소 하나 이상의 메뉴를 선택해주세요.'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/dto/create-reservation.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  ArrayMinSize,\n  IsArray,\n  IsDate,\n  IsInt,\n  IsOptional,\n  IsPhoneNumber,\n  IsString,\n  Min,\n  ValidateNested,\n} from 'class-validator';\nimport { Reservation } from '../entities/reservation.entity';\n\nexport class CreateReservationDto extends PickType(Reservation, [\n  'reserveStartAt',\n  'reserveEndAt',\n  'phone',\n  'amount',\n]) {\n  @ApiProperty({ type: Number, example: [1, 2, 3] })\n  @IsArray({\n    message: '메뉴는 배열형태로 전달되어야 합니다.',\n  })\n  @ArrayMinSize(1, { message: '최소 하나 이상의 메뉴를 선택해주세요.' })\n  @Type(() => Number)\n  menu!: number[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateRestaurantDto.html":{"url":"classes/CreateRestaurantDto.html","title":"class - CreateRestaurantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateRestaurantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/dto/create-restaurant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(Restaurant, [\n  'category',\n  'name',\n  'location',\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\n\nexport class CreateRestaurantDto extends PickType(Restaurant, [\n  'category',\n  'name',\n  'location',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PickType(User, [\n  'userId',\n  'phone',\n  'email',\n  'username',\n  'password',\n  'role',\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { User } from '@users/entities/user.entity';\n\nexport class CreateUserDto extends PickType(User, [\n  'userId',\n  'phone',\n  'email',\n  'username',\n  'password',\n  'role',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    모듈\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TypeormService } from './typeorm.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      useClass: TypeormService,\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/ExceptionResponseFormat.html":{"url":"classes/ExceptionResponseFormat.html","title":"class - ExceptionResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  ExceptionResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                            CommonResponseFormat\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                    선택적\n                                detail\n                            \n                            \n                                message\n                            \n                            \n                                method\n                            \n                            \n                                ok\n                            \n                            \n                                path\n                            \n                            \n                                status\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(status: HttpStatus, code: number, method: string, message: any, path: string, detail?)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/response.ts:49\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        code\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        detail\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            네\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            선택적\n                        detail\n                        \n                    \n                \n            \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     string | object\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         boolean\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     HttpStatus\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.method = method;\n    this.path = path;\n    this.payload = payload;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/GlobalExceptionFilter.html":{"url":"classes/GlobalExceptionFilter.html","title":"class - GlobalExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  GlobalExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/global-exception.filter.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/global-exception.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: T, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/global-exception.filter.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoggerService } from '@logger/logger.service';\nimport {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ErrorType, Protocol } from '@util/protocol';\nimport { ExceptionResponseFormat } from '@util/response';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class GlobalExceptionFilter\n  implements ExceptionFilter\n{\n  constructor(private readonly logger: LoggerService) {}\n\n  catch(exception: T, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const method = request.method;\n    const path = request.originalUrl;\n\n    /* HttpException 지정 프로토콜 처리 */\n    if (exception instanceof HttpException) {\n      const status = exception.getStatus();\n\n      const { errorCode, message } = exception.getResponse() as ErrorType;\n      const detail = exception.cause;\n\n      const exceptionFormat = new ExceptionResponseFormat(\n        status,\n        errorCode,\n        method,\n        message,\n        path,\n        detail,\n      );\n\n      response.status(status).json(exceptionFormat);\n      return;\n    }\n\n    /* 그 외 예상치 못한 예외 일괄 Bad Request(400) 처리 */\n    const errorProtocol = Protocol.BadRequest;\n    const exceptionFormat = new ExceptionResponseFormat(\n      HttpStatus.BAD_REQUEST,\n      errorProtocol.errorCode,\n      method,\n      errorProtocol.message,\n      path,\n    );\n    response.status(HttpStatus.BAD_REQUEST).json(exceptionFormat);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/IsAfterStartTimeConstraint.html":{"url":"classes/IsAfterStartTimeConstraint.html","title":"class - IsAfterStartTimeConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  IsAfterStartTimeConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservation-date.validate.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/reservation-date.validate.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservation-date.validate.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(endTime: Date, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservation-date.validate.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                endTime\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport dayjs from 'dayjs';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\n\n@ValidatorConstraint({ name: 'IsAfterStartTime', async: false })\nexport class IsAfterStartTimeConstraint\n  implements ValidatorConstraintInterface\n{\n  errorMessage!: string;\n\n  validate(endTime: Date, args: ValidationArguments) {\n    const object = args.object as CreateReservationDto;\n\n    const diffMinute = dayjs(endTime).diff(object.reserveStartAt, 'minute');\n    const isMinuteSmall = diffMinute \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/IsDateTimeAfterNowConstraint.html":{"url":"classes/IsDateTimeAfterNowConstraint.html","title":"class - IsDateTimeAfterNowConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  IsDateTimeAfterNowConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/common/datetime.validate.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                errorMessage\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        errorMessage\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/common/datetime.validate.ts:14\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/datetime.validate.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(datetime: Date, args)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/datetime.validate.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                datetime\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport dayjs from 'dayjs';\n\n@ValidatorConstraint({ name: 'IsDateTimeAfterNow', async: false })\nexport class IsDateTimeAfterNowConstraint\n  implements ValidatorConstraintInterface\n{\n  errorMessage!: string;\n\n  validate(datetime: Date, args: ValidationArguments & { message: string }) {\n    const isDivTenMinute = dayjs(datetime).minute() % 10 === 0;\n    const isPast = dayjs().isSame(datetime) || dayjs(datetime).isBefore();\n\n    if (!isDivTenMinute) {\n      this.errorMessage = '시간은 10분 단위로 지정 가능합니다.';\n    }\n    if (isPast) {\n      this.errorMessage = '현재 시간보다 과거의 시간을 지정할 수 없습니다.';\n    }\n\n    return isDivTenMinute && !isPast;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return this.errorMessage;\n  }\n}\n\nexport function IsDateTimeAfterNow(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsDateTimeAfterNowConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/IsPhoneNumberFormatConstraint.html":{"url":"classes/IsPhoneNumberFormatConstraint.html","title":"class - IsPhoneNumberFormatConstraint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  IsPhoneNumberFormatConstraint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/common/phone.validate.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/phone.validate.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(phone: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/common/phone.validate.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\n@ValidatorConstraint({ name: 'IsPhoneNumberFormat', async: false })\nexport class IsPhoneNumberFormatConstraint\n  implements ValidatorConstraintInterface\n{\n  validate(phone: string, args: ValidationArguments) {\n    if (!phone) return false; // 값이 없으면 검증 실패\n    const phoneNumberFormat =\n      /\\b(\\d{3}-\\d{4}-\\d{4}|\\d{2}-\\d{4}-\\d{4}|\\d{2}-\\d{3,4}-\\d{4})/;\n    if (!phone.match(phoneNumberFormat)) {\n      return false;\n    }\n    return true;\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `${args.value}는 전화번호 형식이 아닙니다. 하이픈이 연결된 ###-####-#### 형식만 가능합니다.`;\n  }\n}\n\nexport function IsPhoneNumberFormat(validationOptions?: ValidationOptions) {\n  return function (object: object, propertyName: string) {\n    registerDecorator({\n      target: object.constructor,\n      propertyName,\n      options: validationOptions,\n      constraints: [],\n      validator: IsPhoneNumberFormatConstraint,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/LoggerMiddleware.html":{"url":"injectables/LoggerMiddleware.html","title":"injectable - LoggerMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/logger.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: any, next: () => void)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/logger.middleware.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request } from 'express';\nimport { LoggerService } from 'src/logger/logger.service';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  constructor(private readonly logger: LoggerService) {}\n\n  use(req: Request, res: any, next: () => void) {\n    const method = req.method;\n    const url = req.originalUrl;\n    this.logger.log(`Request [${method}] ${url} -->`);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/LoggerModule.html":{"url":"modules/LoggerModule.html","title":"module - LoggerModule","body":"\n                   \n\n\n\n\n    모듈\n    LoggerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoggerModule\n\n\n\ncluster_LoggerModule_providers\n\n\n\n\nLoggerService\n\nLoggerService\n\n\n\nLoggerModule\n\nLoggerModule\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/logger/logger.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            LoggerService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { LoggerService } from './logger.service';\n\n@Global()\n@Module({\n  providers: [LoggerService],\n})\nexport class LoggerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/logger/logger.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                context\n                            \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                    Private\n                                icons\n                            \n                            \n                                info\n                            \n                            \n                                    Private\n                                levels\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                setContext\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            접근자\n                        \n                    \n                    \n                        \n                            \n                                \n                                    timestamp\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/logger/logger.service.ts:18\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        setContext\n                        \n                    \n                \n            \n            \n                \nsetContext(context: T)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/logger/logger.service.ts:24\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/logger/logger.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : 'System'\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        icons\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : ['📄', '✨', '🐛', '⚠️', '❌'] as const\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        levels\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : ['log', 'info', 'debug', 'warn', 'error'] as const\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         LogMethod\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/logger/logger.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n        접근자\n    \n        \n            \n                \n                    \n                        \n                        timestamp\n                    \n                \n\n                \n                    \n                        gettimestamp()\n                    \n                \n                            \n                                \n                                    다음에 정의됨 src/logger/logger.service.ts:52\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { LOG_LEVEL, RUN_MODE } from '@common/variables/environment';\nimport { Injectable } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ntype LogMethod = (...messages: any) => void;\n\n@Injectable()\nexport class LoggerService {\n  // private readonly isOutput = RUN_MODE !== 'production';\n  private context: string = 'System';\n  private levels = ['log', 'info', 'debug', 'warn', 'error'] as const;\n  private icons = ['📄', '✨', '🐛', '⚠️', '❌'] as const;\n\n  log!: LogMethod;\n  info!: LogMethod;\n  error!: LogMethod;\n  warn!: LogMethod;\n  debug!: LogMethod;\n\n  constructor() {\n    this.update();\n  }\n\n  setContext(context: T) {\n    if (typeof context === 'string') {\n      this.context = context;\n    } else {\n      this.context = context.constructor.name;\n    }\n    this.update();\n  }\n\n  update() {\n    for (const level of this.levels) {\n      const index = this.levels.indexOf(level);\n      const icon = this.icons[index];\n\n      Object.defineProperty(this, level, {\n        get() {\n          // if (!this.isOutput) return () => {};\n          if (index >= LOG_LEVEL) return () => {};\n          return console[level].bind(\n            this,\n            `${icon} [${level.toUpperCase()}] ${this.timestamp} --`,\n          ) as LogMethod;\n        },\n        configurable: true,\n      });\n    }\n  }\n\n  private get timestamp() {\n    return dayjs().format('HH:mm.ss.SSS');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/auth/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'qweQQ!!1'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/auth/dto/login.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'testuser1'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/auth/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginDto {\n  @ApiProperty({ type: String, example: 'testuser1' })\n  userId!: string;\n\n  @ApiProperty({ type: String, example: 'qweQQ!!1' })\n  password!: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Menu.html":{"url":"entities/Menu.html","title":"entity - Menu","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Menu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/entities/menu.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                price\n                            \n                            \n                                    \n                                reservationMenus\n                            \n                            \n                                    \n                                restaurant\n                            \n                            \n                                    \n                                    \n                                restaurantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'main'})@IsNotEmpty({message: '카테고리는 필수 값입니다.'})@IsString({message: '메뉴 종류는 문자만 입력 가능합니다.'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: '홍게살/아스파라거스/레몬, Sauvignon Blanc(소비뇽 블랑)'})@IsNotEmpty({message: '설명을 비워둘 수 없습니다.'})@MinLength(2, {message: '설명은 최소 2자 이상 작성해주세요.'})@IsString({message: '메뉴 설명은 문자만 입력 가능합니다.'})@Column({type: 'varchar', length: 255})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Lunch 와인 페어링'})@IsNotEmpty({message: '메뉴명은 필수 값입니다.'})@IsString({message: '메뉴명은 문자만 입력 가능합니다.'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 100000})@IsNotEmpty({message: '가격은 필수 값입니다.'})@IsInt({message: '가격은 0이상의 정수만 가능합니다.'})@Min(0, {message: '가격은 0보다 작을 수 없습니다.'})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationMenus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     ReservationMenu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservationMenu => reservationMenu.reservation)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurant\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, restaurant => restaurant.menus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/menus/entities/menu.entity.ts:58\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { ReservationMenu } from '@restaurants/reservations/entities/reservation-menu.entity';\nimport { IsInt, IsNotEmpty, IsString, Min, MinLength } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Menu {\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  restaurantId!: number;\n\n  @ApiProperty({ type: String, example: 'main' })\n  @IsNotEmpty({ message: '카테고리는 필수 값입니다.' })\n  @IsString({ message: '메뉴 종류는 문자만 입력 가능합니다.' })\n  @Column({ type: 'varchar', length: 50 })\n  category!: string;\n\n  @ApiProperty({ type: String, example: 'Lunch 와인 페어링' })\n  @IsNotEmpty({ message: '메뉴명은 필수 값입니다.' })\n  @IsString({ message: '메뉴명은 문자만 입력 가능합니다.' })\n  @Column({ type: 'varchar', length: 50 })\n  name!: string;\n\n  @ApiProperty({ type: Number, example: 100_000 })\n  @IsNotEmpty({ message: '가격은 필수 값입니다.' })\n  @IsInt({ message: '가격은 0이상의 정수만 가능합니다.' })\n  @Min(0, { message: '가격은 0보다 작을 수 없습니다.' })\n  @Column({ type: 'int', unsigned: true })\n  price!: number;\n\n  @ApiProperty({\n    type: Number,\n    example: '홍게살/아스파라거스/레몬, Sauvignon Blanc(소비뇽 블랑)',\n  })\n  @IsNotEmpty({ message: '설명을 비워둘 수 없습니다.' })\n  @MinLength(2, { message: '설명은 최소 2자 이상 작성해주세요.' })\n  @IsString({ message: '메뉴 설명은 문자만 입력 가능합니다.' })\n  @Column({ type: 'varchar', length: 255 })\n  description!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => Restaurant, (restaurant) => restaurant.menus, {\n    cascade: true,\n  })\n  restaurant!: Restaurant;\n\n  @OneToMany(\n    () => ReservationMenu,\n    (reservationMenu) => reservationMenu.reservation,\n  )\n  reservationMenus!: ReservationMenu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/MenuDataParsePipe.html":{"url":"injectables/MenuDataParsePipe.html","title":"injectable - MenuDataParsePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MenuDataParsePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/menu-data-parse.pipe.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getFlatErrorConstraints\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFlatErrorConstraints\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFlatErrorConstraints(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menu-data-parse.pipe.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(value: CreateMenuDto, metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menu-data-parse.pipe.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            CreateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common';\nimport { Protocol } from '@util/protocol';\nimport { plainToInstance } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { CreateMenuDto } from './dto/create-menu.dto';\n\n@Injectable()\nexport class MenuDataParsePipe implements PipeTransform {\n  async transform(value: CreateMenuDto, metadata: ArgumentMetadata) {\n    if (!metadata.metatype) {\n      return value;\n    }\n\n    const menuValidate = async (menu) => {\n      const object = plainToInstance(CreateMenuDto, menu);\n      const errors = await validate(object, { stopAtFirstError: true });\n      if (errors.length > 0) {\n        const messages = this.getFlatErrorConstraints(errors);\n        const errorProtocol = Protocol.ArgsRequired;\n        throw new BadRequestException(errorProtocol, { cause: messages });\n      }\n    };\n\n    if (Array.isArray(value)) {\n      for (const item of value) {\n        await menuValidate(item);\n      }\n    } else {\n      await menuValidate(value);\n    }\n\n    return value;\n  }\n\n  private getFlatErrorConstraints(errors: ValidationError[]) {\n    return errors.map((err) => Object.values(err.constraints || {})).flat();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/MenusController.html":{"url":"controllers/MenusController.html","title":"controller - MenusController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  MenusController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/menus.controller.ts\n        \n\n            \n                접두어\n            \n            \n                menus\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(restaurantId: number, createMenuDto: CreateMenuDto | CreateMenuDto[])\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithCaseModel({CreateMenuDto: undefined}, HttpStatus.CREATED, '/restaurants/:restaurantId/menus', 'POS')@ApiBodyWithCaseModel({CreateMenuDto: undefined})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 메뉴 추가'})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto | CreateMenuDto[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: Request, restaurantId: number, page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseSearchModel({SearchMenuResponse: Menu}, '/restaurants/:restaurantId/menus', {page: 2, count: 10, total: 3})@ApiQuery({name: 'page', type: Number, example: DEFAULT_PAGE, required: false})@ApiQuery({name: 'perPage', type: Number, example: PER_PAGE, required: false})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiOperation({summary: '식당 메뉴 전체 조회'})@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:101\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    DEFAULT_PAGE\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    PER_PAGE\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(menuId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({SearchMenuResponse: Menu}, {ok: true, status: undefined, method: 'GET', path: '/restaurants/:restaurantId/menus/:menuId'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'menuId', type: Number, example: 1})@ApiOperation({summary: '식당 메뉴 상세 조회'})@Get(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:150\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(menuId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'menuId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 메뉴 제거'})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Delete(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:187\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(menuId: string, updateMenuDto: UpdateMenuDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({PatchMenuResponse: undefined}, {ok: true, status: undefined, method: 'PATCH', path: '/restaurants/:restaurantId/menus/:menuId'})@ApiBodyWithModel({UpdateMenuDto: })@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'menuId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 메뉴 수정'})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Patch(':menuId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.controller.ts:173\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateMenuDto\n                                            \n                                                            UpdateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBodyWithCaseModel } from '@common/decorators/api.body.with.case.model';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseSearchModel } from '@common/decorators/api.response.search.model';\nimport { ApiResponseWithCaseModel } from '@common/decorators/api.response.with.case.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { DEFAULT_PAGE, PER_PAGE } from '@common/variables/environment';\nimport { Roles } from '@middleware/roles.decorator';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { RestaurantOwnerGuard } from '@restaurants/restaurant-owner.guard';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { CreateMenuDto } from './dto/create-menu.dto';\nimport { UpdateMenuDto } from './dto/update-menu.dto';\nimport { Menu } from './entities/menu.entity';\nimport { MenuDataParsePipe } from './menu-data-parse.pipe';\nimport { MenusService } from './menus.service';\nimport { Request } from 'express';\n\n@Controller('menus')\nexport class MenusController {\n  constructor(private readonly menusService: MenusService) {}\n\n  @ApiResponseWithCaseModel(\n    {\n      CreateMenuDto: {\n        '개별 추가': { id: 1 },\n        '다중 추가': [{ id: 1 }],\n      },\n    },\n    HttpStatus.CREATED,\n    '/restaurants/:restaurantId/menus',\n    'POS',\n  )\n  @ApiBodyWithCaseModel({\n    CreateMenuDto: {\n      '개별 추가': CreateMenuDto,\n      '다중 추가': [CreateMenuDto],\n    },\n  })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 메뉴 추가' })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Post()\n  create(\n    @Param('restaurantId') restaurantId: number,\n    @Body(MenuDataParsePipe)\n    createMenuDto: CreateMenuDto | CreateMenuDto[],\n  ) {\n    if (Array.isArray(createMenuDto)) {\n      return this.menusService.createBulk(+restaurantId, createMenuDto);\n    }\n    return this.menusService.create(+restaurantId, createMenuDto);\n  }\n\n  @ApiResponseSearchModel(\n    { SearchMenuResponse: Menu },\n    '/restaurants/:restaurantId/menus',\n    {\n      page: 2,\n      count: 10,\n      total: 3,\n    },\n  )\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    example: DEFAULT_PAGE,\n    required: false,\n  })\n  @ApiQuery({\n    name: 'perPage',\n    type: Number,\n    example: PER_PAGE,\n    required: false,\n  })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 메뉴 전체 조회' })\n  @Get()\n  findAll(\n    @Req() req: Request,\n    @Param('restaurantId') restaurantId: number,\n    @Query(\n      'page',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    page: number = DEFAULT_PAGE,\n    @Query(\n      'perPage',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    perPage: number = PER_PAGE,\n  ) {\n    return this.menusService.findAll(\n      req.originalUrl,\n      +restaurantId,\n      page,\n      perPage,\n    );\n  }\n\n  @ApiResponseWithModel(\n    {\n      SearchMenuResponse: Menu,\n    },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'GET',\n      path: '/restaurants/:restaurantId/menus/:menuId',\n    },\n  )\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'menuId', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 메뉴 상세 조회' })\n  @Get(':menuId')\n  findOne(@Param('menuId') menuId: string) {\n    return this.menusService.findOne(+menuId);\n  }\n\n  @ApiResponseWithModel(\n    {\n      PatchMenuResponse: { id: 1 },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'PATCH',\n      path: '/restaurants/:restaurantId/menus/:menuId',\n    },\n  )\n  @ApiBodyWithModel({ UpdateMenuDto })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'menuId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 메뉴 수정' })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Patch(':menuId')\n  update(\n    @Param('menuId') menuId: string,\n    @Body(MenuDataParsePipe) updateMenuDto: UpdateMenuDto,\n  ) {\n    return this.menusService.update(+menuId, updateMenuDto);\n  }\n\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'menuId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 메뉴 제거' })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Delete(':menuId')\n  remove(@Param('menuId') menuId: string) {\n    return this.menusService.remove(+menuId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/MenusModule.html":{"url":"modules/MenusModule.html","title":"module - MenusModule","body":"\n                   \n\n\n\n\n    모듈\n    MenusModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MenusModule\n\n\n\ncluster_MenusModule_imports\n\n\n\ncluster_MenusModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nMenusModule\n\nMenusModule\n\nMenusModule -->\n\nUsersModule->MenusModule\n\n\n\n\n\nMenusService\n\nMenusService\n\nMenusModule -->\n\nMenusService->MenusModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/menus/menus.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            MenusService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            MenusController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { UsersModule } from '@users/users.module';\nimport { Menu } from './entities/menu.entity';\nimport { MenusController } from './menus.controller';\nimport { MenusService } from './menus.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Menu, Restaurant]), UsersModule],\n  controllers: [MenusController],\n  providers: [MenusService],\n})\nexport class MenusModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/MenusService.html":{"url":"injectables/MenusService.html","title":"injectable - MenusService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MenusService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/menus.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                createBulk\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(menuRepository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/menus/menus.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        menuRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(restaurantId: number, createMenuDto: CreateMenuDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createBulk\n                        \n                    \n                \n            \n            \n                \n                        \n                    createBulk(restaurantId: number, createMenuDto: CreateMenuDto[])\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createMenuDto\n                                            \n                                                            CreateMenuDto[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(path: string, restaurantId: number, page: number, perPage: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(menuId: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(menuId: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(menuId: number, updateMenuDto: UpdateMenuDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/menus/menus.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                menuId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateMenuDto\n                                            \n                                                            UpdateMenuDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { UtilService } from '@util/util.service';\nimport { Repository } from 'typeorm';\nimport { CreateMenuDto } from './dto/create-menu.dto';\nimport { UpdateMenuDto } from './dto/update-menu.dto';\nimport { Menu } from './entities/menu.entity';\n\n@Injectable()\nexport class MenusService {\n  constructor(\n    @InjectRepository(Menu)\n    private readonly menuRepository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async createBulk(restaurantId: number, createMenuDto: CreateMenuDto[]) {\n    const bulkMenus = await this.menuRepository.save(\n      createMenuDto.map((menu) => ({ restaurantId, ...menu })),\n    );\n    return bulkMenus.map(({ id }) => ({\n      id,\n    }));\n  }\n\n  async create(restaurantId: number, createMenuDto: CreateMenuDto) {\n    const menu = await this.menuRepository.save({\n      restaurantId,\n      ...createMenuDto,\n    });\n    return { id: menu.id };\n  }\n\n  findAll(path: string, restaurantId: number, page: number, perPage: number) {\n    return this.utilService.searchPagination(\n      this.menuRepository,\n      path,\n      { where: { restaurantId }, take: perPage, skip: (page - 1) * perPage },\n      page,\n      perPage,\n    );\n  }\n\n  findOne(menuId: number) {\n    return this.menuRepository.findOneBy({ id: menuId });\n  }\n\n  update(menuId: number, updateMenuDto: UpdateMenuDto) {\n    return this.menuRepository.update(menuId, updateMenuDto);\n  }\n\n  async remove(menuId: number) {\n    await this.menuRepository.delete(menuId);\n    return { id: menuId };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Reservation.html":{"url":"entities/Reservation.html","title":"entity - Reservation","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Reservation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/entities/reservation.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                amount\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                reservationMenus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                reserveEndAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                reserveStartAt\n                            \n                            \n                                    \n                                restaurant\n                            \n                            \n                                    \n                                    \n                                    \n                                restaurantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: 5})@IsInt({message: '정수만 가능합니다.'})@Min(1, {message: '0이상의 정수만 가능합니다.'})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '010-1234-5678'})@IsOptional()@IsString({message: '문자만 가능합니다'})@IsPhoneNumberFormat()@Column({type: 'varchar', length: 13})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservationMenus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     ReservationMenu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservationMenu => reservationMenu.reservation)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        reserveEndAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: '2025-03-13T15:00'})@IsDate({message: '시간 형식만 가능합니다.'})@IsAfterStartTime()@IsDateTimeAfterNow()@Column({type: 'datetime'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        reserveStartAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Date, example: '2025-03-13T13:00'})@IsDate({message: '시간 형식만 가능합니다.'})@IsDateTimeAfterNow()@Column({type: 'datetime'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurant\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, restaurant => restaurant.reservations, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@IsInt({message: '정수만 가능합니다.'})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         User\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, user => user.reservations, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@IsInt({message: '정수만 가능합니다.'})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation.entity.ts:29\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { ReservationMenu } from '@restaurants/reservations/entities/reservation-menu.entity';\nimport { User } from '@users/entities/user.entity';\nimport { IsDate, IsInt, IsOptional, IsString, Min } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { IsPhoneNumberFormat } from '../../../common/phone.validate';\nimport { IsAfterStartTime } from '../reservation-date.validate';\nimport { IsDateTimeAfterNow } from '@common/datetime.validate';\n\n@Entity()\nexport class Reservation {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @IsInt({ message: '정수만 가능합니다.' })\n  @Column({ type: 'int' })\n  userId!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @IsInt({ message: '정수만 가능합니다.' })\n  @Column({ type: 'int' })\n  restaurantId!: number;\n\n  @ApiProperty({ type: Date, example: '2025-03-13T13:00' })\n  @IsDate({ message: '시간 형식만 가능합니다.' })\n  @IsDateTimeAfterNow()\n  @Column({ type: 'datetime' })\n  reserveStartAt!: Date;\n\n  @ApiProperty({ type: Date, example: '2025-03-13T15:00' })\n  @IsDate({ message: '시간 형식만 가능합니다.' })\n  @IsAfterStartTime()\n  @IsDateTimeAfterNow()\n  @Column({ type: 'datetime' })\n  reserveEndAt!: Date;\n\n  @ApiProperty({ type: String, example: '010-1234-5678' })\n  @IsOptional()\n  @IsString({ message: '문자만 가능합니다' })\n  @IsPhoneNumberFormat()\n  @Column({ type: 'varchar', length: 13 })\n  phone!: string;\n\n  @ApiProperty({ type: Date, example: 5 })\n  @IsInt({ message: '정수만 가능합니다.' })\n  @Min(1, { message: '0이상의 정수만 가능합니다.' })\n  @Column({ type: 'int', unsigned: true })\n  amount!: number;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => User, (user) => user.reservations, { cascade: true })\n  user!: User;\n\n  @ManyToOne(() => Restaurant, (restaurant) => restaurant.reservations, {\n    cascade: true,\n  })\n  restaurant!: Restaurant;\n\n  @OneToMany(\n    () => ReservationMenu,\n    (reservationMenu) => reservationMenu.reservation,\n  )\n  reservationMenus!: ReservationMenu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ReservationAmountParsePipe.html":{"url":"injectables/ReservationAmountParsePipe.html","title":"injectable - ReservationAmountParsePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationAmountParsePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservation-amount-parse.pipe.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number | number[], metadata: ArgumentMetadata)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservation-amount-parse.pipe.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number | number[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                metadata\n                                            \n                                                        ArgumentMetadata\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n} from '@nestjs/common';\nimport { Protocol } from '@util/protocol';\n\n@Injectable()\nexport class ReservationAmountParsePipe implements PipeTransform {\n  transform(value: number | number[], metadata: ArgumentMetadata) {\n    if (!metadata.metatype) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      const errorProtocol = Protocol.TypeCheck;\n      throw new BadRequestException(errorProtocol, {\n        cause: '예약 인원 검색에 두개의 amount 파라미터가 필요합니다.',\n      });\n    }\n\n    if (value.some((item) => Number.isNaN(+item))) {\n      const errorProtocol = Protocol.TypeCheck;\n      throw new BadRequestException(errorProtocol, {\n        cause: '예약 인원 수는 정수로 구성되어야 합니다.',\n      });\n    }\n\n    if (typeof value === 'undefined') {\n      return value;\n    }\n\n    return value.map(Number);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/ReservationMenu.html":{"url":"entities/ReservationMenu.html","title":"entity - ReservationMenu","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  ReservationMenu\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/entities/reservation-menu.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                menu\n                            \n                            \n                                    \n                                    \n                                menuId\n                            \n                            \n                                    \n                                reservation\n                            \n                            \n                                    \n                                    \n                                reservationId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation-menu.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menu\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Menu\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, menu => menu.reservationMenus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation-menu.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        menuId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation-menu.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservation\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, reservation => reservation.reservationMenus, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation-menu.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        reservationId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/reservations/entities/reservation-menu.entity.ts:24\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class ReservationMenu extends BaseEntity {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  menuId!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  reservationId!: number;\n\n  @ManyToOne(() => Reservation, (reservation) => reservation.reservationMenus, {\n    cascade: true,\n  })\n  reservation!: Reservation;\n\n  @ManyToOne(() => Menu, (menu) => menu.reservationMenus, { cascade: true })\n  menu!: Menu;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/ReservationsController.html":{"url":"controllers/ReservationsController.html","title":"controller - ReservationsController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  ReservationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.controller.ts\n        \n\n            \n                접두어\n            \n            \n                reservations\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: Request, restaurantId: number, createReservationDto: CreateReservationDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({CreateReservationResponse: undefined}, {ok: true, status: undefined, method: 'GET', path: '/restaurants/:restaurantId/reservations/:reservationId'})@ApiBodyWithModel({CreateReservationDto: })@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 예약 추가'})@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: Request, restaurantId: number, reserveStartAt: Date, reserveEndAt: Date, phone: string, amount: number[], page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseSearchModel({SearchReservationResponse: Reservation}, '/restaurants/:restaurantId/reservations', {page: 2, count: 10, total: 3})@ApiQuery({name: 'reserveStartAt', type: Date, example: '2025-03-16T16:00', required: false})@ApiQuery({name: 'reserveEndAt', type: Date, example: '2025-03-15T17:30', required: false})@ApiQuery({name: 'phone', type: String, example: '010-1234', required: false})@ApiQuery({name: 'amount', type: undefined, example: undefined, required: false})@ApiQuery({name: 'page', type: Number, example: DEFAULT_PAGE, required: false})@ApiQuery({name: 'perPage', type: Number, example: PER_PAGE, required: false})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 전체 예약 조회'})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                reserveStartAt\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                reserveEndAt\n                                            \n                                                            Date\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                phone\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                amount\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    DEFAULT_PAGE\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    PER_PAGE\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(reservationId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({FindOneReservationResponse: Reservation}, {ok: true, status: undefined, method: 'GET', path: '/restaurants/:restaurantId/reservations/:reservationId'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'reservationId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 단건 예약 상세 조회'})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Get(':reservationId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:190\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(reservationId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'reservationId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 예약 취소'})@Roles(['undefined'])@Delete(':reservationId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:236\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(reservationId: string, updateReservationDto: UpdateReservationDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({PatchReservationResponse: undefined}, {ok: true, status: undefined, method: 'PATCH', path: '/restaurants/:restaurantId/reservations/:reservationId'})@ApiBodyWithModel({UpdateReservationDto: })@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiParam({name: 'reservationId', type: Number, example: 1})@ApiBearerAuth()@ApiOperation({summary: '식당 예약 수정'})@Roles(['undefined'])@Patch(':reservationId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.controller.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                reservationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateReservationDto\n                                            \n                                                            UpdateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiResponseSearchModel } from '@common/decorators/api.response.search.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { DEFAULT_PAGE, PER_PAGE } from '@common/variables/environment';\nimport { Roles } from '@middleware/roles.decorator';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  ParseArrayPipe,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n  ValidationPipe,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { RestaurantOwnerGuard } from '@restaurants/restaurant-owner.guard';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { UpdateReservationDto } from './dto/update-reservation.dto';\nimport { Reservation } from './entities/reservation.entity';\nimport { ReservationsService } from './reservations.service';\nimport { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ReservationAmountParsePipe } from './reservation-amount-parse.pipe';\n\n@Controller('reservations')\nexport class ReservationsController {\n  constructor(private readonly reservationsService: ReservationsService) {}\n\n  @ApiResponseWithModel(\n    {\n      CreateReservationResponse: { id: 1 },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'GET',\n      path: '/restaurants/:restaurantId/reservations/:reservationId',\n    },\n  )\n  @ApiBodyWithModel({ CreateReservationDto })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 추가' })\n  @Roles([UserRole.Customer])\n  @Post()\n  create(\n    @Req() req: Request,\n    @Param('restaurantId') restaurantId: number,\n    @Body(\n      new ValidationPipe({\n        stopAtFirstError: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    )\n    createReservationDto: CreateReservationDto,\n  ) {\n    const user = req.user;\n    return this.reservationsService.create(\n      user,\n      +restaurantId,\n      createReservationDto,\n    );\n  }\n\n  @ApiResponseSearchModel(\n    { SearchReservationResponse: Reservation },\n    '/restaurants/:restaurantId/reservations',\n    {\n      page: 2,\n      count: 10,\n      total: 3,\n    },\n  )\n  @ApiQuery({\n    name: 'reserveStartAt',\n    type: Date,\n    example: '2025-03-16T16:00',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'reserveEndAt',\n    type: Date,\n    example: '2025-03-15T17:30',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'phone',\n    type: String,\n    example: '010-1234',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'amount',\n    type: [Number],\n    example: [1, 3],\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    example: DEFAULT_PAGE,\n    required: false,\n  })\n  @ApiQuery({\n    name: 'perPage',\n    type: Number,\n    example: PER_PAGE,\n    required: false,\n  })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 전체 예약 조회' })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Get()\n  findAll(\n    @Req() req: Request,\n    @Param('restaurantId') restaurantId: number,\n    @Query('reserveStartAt') reserveStartAt: Date,\n    @Query('reserveEndAt') reserveEndAt: Date,\n    @Query('phone') phone: string,\n    @Query('amount', ReservationAmountParsePipe) amount: number[],\n    @Query(\n      'page',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    page: number = DEFAULT_PAGE,\n    @Query(\n      'perPage',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    perPage: number = PER_PAGE,\n  ) {\n    const searchOption = { reserveStartAt, reserveEndAt, phone, amount };\n    return this.reservationsService.findAll(\n      req.originalUrl,\n      restaurantId,\n      page,\n      perPage,\n      searchOption,\n    );\n  }\n\n  @ApiResponseWithModel(\n    {\n      FindOneReservationResponse: Reservation,\n    },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'GET',\n      path: '/restaurants/:restaurantId/reservations/:reservationId',\n    },\n  )\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'reservationId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 단건 예약 상세 조회' })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Get(':reservationId')\n  findOne(@Param('reservationId') reservationId: string) {\n    return this.reservationsService.findOne(+reservationId);\n  }\n\n  @ApiResponseWithModel(\n    {\n      PatchReservationResponse: { id: 1 },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'PATCH',\n      path: '/restaurants/:restaurantId/reservations/:reservationId',\n    },\n  )\n  @ApiBodyWithModel({ UpdateReservationDto })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'reservationId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 수정' })\n  @Roles([UserRole.Customer])\n  @Patch(':reservationId')\n  update(\n    @Param('reservationId') reservationId: string,\n    @Body(\n      new ValidationPipe({\n        stopAtFirstError: true,\n        transformOptions: {\n          enableImplicitConversion: true,\n        },\n      }),\n    )\n    updateReservationDto: UpdateReservationDto,\n  ) {\n    return this.reservationsService.update(\n      +reservationId,\n      updateReservationDto,\n    );\n  }\n\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiParam({ name: 'reservationId', type: Number, example: 1 })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 예약 취소' })\n  @Roles([UserRole.Customer])\n  @Delete(':reservationId')\n  remove(@Param('reservationId') reservationId: string) {\n    return this.reservationsService.remove(+reservationId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/ReservationsModule.html":{"url":"modules/ReservationsModule.html","title":"module - ReservationsModule","body":"\n                   \n\n\n\n\n    모듈\n    ReservationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_imports\n\n\n\ncluster_ReservationsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nUsersModule->ReservationsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            ReservationsService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            ReservationsController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { User } from '@users/entities/user.entity';\nimport { UsersModule } from '@users/users.module';\nimport { Reservation } from './entities/reservation.entity';\nimport { ReservationsController } from './reservations.controller';\nimport { ReservationsService } from './reservations.service';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Reservation, User, Menu, Restaurant]),\n    UsersModule,\n  ],\n  controllers: [ReservationsController],\n  providers: [ReservationsService],\n})\nexport class ReservationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ReservationsService.html":{"url":"injectables/ReservationsService.html","title":"injectable - ReservationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ReservationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/reservations.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(menuRepository: Repository, reservationRepository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/reservations/reservations.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        menuRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: UserTokenData, restaurantId: number, createReservationDto: CreateReservationDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserTokenData\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createReservationDto\n                                            \n                                                            CreateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(path: string, restaurantId: number, page: number, perPage: number, searchOption: SearchOption)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                restaurantId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                searchOption\n                                            \n                                                        SearchOption\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:127\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateReservationDto: UpdateReservationDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/reservations/reservations.service.ts:131\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateReservationDto\n                                            \n                                                            UpdateReservationDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { ReservationMenu } from '@restaurants/reservations/entities/reservation-menu.entity';\nimport { UtilService } from '@util/util.service';\nimport {\n  Between,\n  LessThanOrEqual,\n  Like,\n  MoreThanOrEqual,\n  Repository,\n} from 'typeorm';\nimport { CreateReservationDto } from './dto/create-reservation.dto';\nimport { UpdateReservationDto } from './dto/update-reservation.dto';\nimport { Reservation } from './entities/reservation.entity';\n\n@Injectable()\nexport class ReservationsService {\n  constructor(\n    @InjectRepository(Menu)\n    private readonly menuRepository: Repository,\n    @InjectRepository(Reservation)\n    private readonly reservationRepository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  /* \n  1. 예약자 존재 여부를 검증한다.\n  2. 예약자 전화번호 입력 없을 시 예약자 정보의 전화번호를 적용한다.\n  3. 예약 인원 음수 입력을 방지한다.\n  4. 예약 일자 과거 입력을 방지한다.\n  5. 예약 종료일자는 시작일자보다 과거일 수 없다.\n  */\n  async create(\n    user: UserTokenData,\n    restaurantId: number,\n    createReservationDto: CreateReservationDto,\n  ) {\n    const { phone } = createReservationDto;\n\n    /* 입력 전화번호 없을 시 사용자 전화번호가 기본값 */\n    if (!phone) {\n      Object.assign(createReservationDto, { phone: user.phone });\n    }\n\n    const { menu, ...dtoData } = createReservationDto;\n\n    /* 예약 객체 미리 생성 */\n    const reservation = this.reservationRepository.create({\n      userId: user.id,\n      restaurantId,\n      ...dtoData,\n    });\n\n    await this.reservationRepository.save(reservation);\n\n    /* 메뉴 데이터베이스 존재 검증 */\n    for (const id of menu) {\n      const menu = await this.utilService.throwNoExistsEntityWithSelectBy(\n        this.menuRepository,\n        {\n          where: { id },\n        },\n      );\n\n      const reservationMenu = new ReservationMenu();\n      reservationMenu.menuId = menu.id;\n      reservationMenu.reservationId = reservation.id;\n\n      await this.reservationRepository.manager.save(reservationMenu);\n    }\n\n    return { id: reservation.id };\n  }\n\n  findAll(\n    path: string,\n    restaurantId: number,\n    page: number,\n    perPage: number,\n    searchOption: SearchOption,\n  ) {\n    return this.utilService.searchPagination(\n      this.reservationRepository,\n      path,\n      {\n        where: {\n          restaurantId,\n          phone: searchOption.phone\n            ? Like('%' + searchOption.phone + '%')\n            : undefined,\n          reserveStartAt: searchOption.reserveStartAt\n            ? MoreThanOrEqual(searchOption.reserveStartAt)\n            : undefined,\n          reserveEndAt: searchOption.reserveEndAt\n            ? LessThanOrEqual(searchOption.reserveEndAt)\n            : undefined,\n          amount: searchOption.amount\n            ? Between(+searchOption.amount[0], +searchOption.amount[1])\n            : undefined,\n        },\n        take: perPage,\n        skip: (page - 1) * perPage,\n        select: {\n          user: {\n            id: true,\n            userId: true,\n            username: true,\n            phone: true,\n          },\n        },\n        relations: {\n          user: true,\n          restaurant: true,\n          reservationMenus: true,\n        },\n        order: {\n          createdAt: 'DESC',\n        },\n      },\n      page,\n      perPage,\n      searchOption,\n    );\n  }\n\n  findOne(id: number) {\n    return this.reservationRepository.findOneBy({ id });\n  }\n\n  update(id: number, updateReservationDto: UpdateReservationDto) {\n    return this.reservationRepository.update(id, updateReservationDto);\n  }\n\n  async remove(id: number) {\n    await this.reservationRepository.softDelete(id);\n    return { id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/ResponseFormat.html":{"url":"classes/ResponseFormat.html","title":"class - ResponseFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  ResponseFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/response.ts\n        \n\n\n\n\n            \n                구현\n            \n            \n                            CommonResponseFormat\n            \n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    선택적\n                                message\n                            \n                            \n                                method\n                            \n                            \n                                ok\n                            \n                            \n                                path\n                            \n                            \n                                payload\n                            \n                            \n                                status\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(status: HttpStatus, method: string, payload: any, path: string, message?: string)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/response.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        status\n                                                  \n                                                        \n                                                                    HttpStatus\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        method\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        payload\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        path\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            네\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            선택적\n                        message\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ok\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         boolean\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        payload\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     string | object\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     HttpStatus\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timestamp\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/response.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport dayjs from 'dayjs';\n\ninterface CommonResponseFormat {\n  ok: boolean;\n  status: HttpStatus;\n  method: string;\n  path: string;\n  timestamp: string;\n}\n\nexport class ResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  method!: string;\n  path: string;\n  payload!: string | object;\n  message?: string;\n  timestamp!: string;\n\n  constructor(\n    status: HttpStatus,\n    method: string,\n    payload: any,\n    path: string,\n    message?: string,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.method = method;\n    this.path = path;\n    this.payload = payload;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (message) {\n      this.message = message;\n    }\n  }\n}\n\nexport class ExceptionResponseFormat implements CommonResponseFormat {\n  ok!: boolean;\n  status!: HttpStatus;\n  code!: number;\n  method!: string;\n  path!: string;\n  message!: string | object;\n  timestamp!: string;\n  detail?: unknown;\n\n  constructor(\n    status: HttpStatus,\n    code: number,\n    method: string,\n    message: any,\n    path: string,\n    detail?: unknown,\n  ) {\n    this.ok = [200, 201].includes(status);\n    this.status = status;\n    this.code = code;\n    this.message = message;\n    this.method = method;\n    this.path = path;\n    this.timestamp = dayjs().format('YYYY-MM-DD HH:mm:ss.SSS');\n\n    if (detail) {\n      this.detail = detail;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/ResponseInterceptor.html":{"url":"injectables/ResponseInterceptor.html","title":"injectable - ResponseInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/middleware/repsonse.interceptor.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/repsonse.interceptor.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/repsonse.interceptor.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { ResponseFormat } from '@util/response';\nimport { Request, Response } from 'express';\nimport { map, Observable, tap } from 'rxjs';\nimport { LoggerService } from '@logger/logger.service';\n\n@Injectable()\nexport class ResponseInterceptor implements NestInterceptor {\n  constructor(private readonly logger: LoggerService) {\n    logger.setContext(this);\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const req = context.switchToHttp().getRequest();\n    const res = context.switchToHttp().getResponse();\n    const pathname = req.originalUrl;\n    const method = req.method;\n    const status = res.statusCode;\n    const start = Date.now();\n\n    return next.handle().pipe(\n      map((data) => new ResponseFormat(status, method, data, pathname)),\n      tap(() =>\n        this.logger.log(\n          `\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/Restaurant.html":{"url":"entities/Restaurant.html","title":"entity - Restaurant","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  Restaurant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/entities/restaurant.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                location\n                            \n                            \n                                    \n                                menus\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                user\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'chinese cuisine'})@IsString({message: '식당 유형은 문자만 가능합니다.'})@MinLength(1, {message: '식당 유형은 1자 이상이어야 합니다.'})@MaxLength(50, {message: '식당 유형은 50자 이내여야 합니다.'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '2025-03-11 14:51:15'})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        location\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '서울시 00구 00동 000-0'})@IsString({message: '주소지는 문자만 가능합니다.'})@MinLength(1, {message: '주소지는 1자 이상이어야 합니다.'})@MaxLength(200, {message: '주소지는 200자 이내여야 합니다.'})@Column({type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        menus\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Menu[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, menu => menu.restaurant)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '자금성'})@IsString({message: '식당 이름은 문자만 가능합니다.'})@MinLength(1, {message: '식당 이름은 1자 이상이어야 합니다.'})@MaxLength(50, {message: '식당 이름은 50자 이내여야 합니다.'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.restaurant)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '2025-03-11 14:51:15'})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         User\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ManyToOne(undefined, user => user.restaurants, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@Column({type: 'int'})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/restaurants/entities/restaurant.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Menu } from '@restaurants/menus/entities/menu.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { User } from '@users/entities/user.entity';\nimport { IsString, MaxLength, MinLength } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Restaurant {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: Number, example: 1 })\n  @Column({ type: 'int' })\n  userId!: number;\n\n  @ApiProperty({ type: String, example: 'chinese cuisine' })\n  @IsString({ message: '식당 유형은 문자만 가능합니다.' })\n  @MinLength(1, { message: '식당 유형은 1자 이상이어야 합니다.' })\n  @MaxLength(50, { message: '식당 유형은 50자 이내여야 합니다.' })\n  @Column({ type: 'varchar', length: 50 })\n  category!: string;\n\n  @ApiProperty({ type: String, example: '자금성' })\n  @IsString({ message: '식당 이름은 문자만 가능합니다.' })\n  @MinLength(1, { message: '식당 이름은 1자 이상이어야 합니다.' })\n  @MaxLength(50, { message: '식당 이름은 50자 이내여야 합니다.' })\n  @Column({ type: 'varchar', length: 50 })\n  name!: string;\n\n  @ApiProperty({ type: String, example: '서울시 00구 00동 000-0' })\n  @IsString({ message: '주소지는 문자만 가능합니다.' })\n  @MinLength(1, { message: '주소지는 1자 이상이어야 합니다.' })\n  @MaxLength(200, { message: '주소지는 200자 이내여야 합니다.' })\n  @Column({ type: 'varchar', length: 200 })\n  location!: string;\n\n  @ApiProperty({ type: String, example: '2025-03-11 14:51:15' })\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @ApiProperty({ type: String, example: '2025-03-11 14:51:15' })\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @ApiProperty({ type: String, example: null })\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @ManyToOne(() => User, (user) => user.restaurants, { cascade: true })\n  user!: User;\n\n  @OneToMany(() => Reservation, (reservation) => reservation.restaurant)\n  reservations!: Reservation[];\n\n  @OneToMany(() => Menu, (menu) => menu.restaurant)\n  menus!: Menu[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/RestaurantExistsMiddleware.html":{"url":"injectables/RestaurantExistsMiddleware.html","title":"injectable - RestaurantExistsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantExistsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/middleware/restaurant-exists.middleware.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(repository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/middleware/restaurant-exists.middleware.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, _res, next: () => void)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/middleware/restaurant-exists.middleware.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                _res\n                                            \n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { UtilService } from '@util/util.service';\nimport { Request } from 'express';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class RestaurantExistsMiddleware implements NestMiddleware {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly repository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async use(req: Request, _res, next: () => void) {\n    const restaurantId = req.params.restaurantId;\n\n    await this.utilService.throwNoExistsEntityWithSelectBy(this.repository, {\n      where: { id: +restaurantId },\n    });\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"guards/RestaurantOwnerGuard.html":{"url":"guards/RestaurantOwnerGuard.html","title":"guard - RestaurantOwnerGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    가드\n    RestaurantOwnerGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            파일\n            \n            \n                src/restaurants/restaurant-owner.guard.ts\n            \n\n\n\n\n\n\n                \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    생성자\n        \n            \n                \n                    \nconstructor(restaurantRepository: Repository)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/restaurant-owner.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        restaurantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurant-owner.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  BadRequestException,\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class RestaurantOwnerGuard implements CanActivate {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly restaurantRepository: Repository,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const userId = request.user.id;\n    const restaurantId = +request.params.restaurantId;\n\n    if (Number.isNaN(restaurantId)) {\n      const errorProtocol = Protocol.WrongParamType;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    const restaurant = await this.restaurantRepository.findOneBy({\n      id: restaurantId,\n    });\n\n    if (!restaurant) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol);\n    }\n\n    if (restaurant.userId !== userId) {\n      const errorProtocol = Protocol.NoMatchOwnRestaurant;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/RestaurantsController.html":{"url":"controllers/RestaurantsController.html","title":"controller - RestaurantsController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  RestaurantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/restaurants.controller.ts\n        \n\n            \n                접두어\n            \n            \n                restaurants\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: Request, createRestaurantDto: CreateRestaurantDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({CreateRestaurantResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/restaurants'})@ApiBodyWithModel({CreateRestaurantDto: })@ApiBearerAuth()@ApiOperation({summary: '식당 정보 추가'})@Roles(['undefined'])@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createRestaurantDto\n                                            \n                                                            CreateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(req: Request, category: string, name: string, location: string, page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseSearchModel({SearchRestaurantResponse: Restaurant}, '/restaurants', {page: 2, count: 10, total: 3})@ApiQuery({name: 'category', type: String, example: 'fine%20dining', required: false})@ApiQuery({name: 'name', type: String, example: '류니', required: false})@ApiQuery({name: 'location', type: String, example: '서울', required: false})@ApiQuery({name: 'page', type: Number, example: DEFAULT_PAGE, required: false})@ApiQuery({name: 'perPage', type: Number, example: PER_PAGE, required: false})@ApiOperation({summary: '식당 전체 조회'})@Get()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                location\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    DEFAULT_PAGE\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    PER_PAGE\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(restaurantId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({FindOneRestaurantResponse: Restaurant}, {ok: true, status: undefined, method: 'GET', path: '/restaurants/:restaurantId'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@ApiOperation({summary: '식당 상세 조회'})@Get(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(restaurantId: string)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({DeleteRestaurantResponse: undefined}, {ok: true, status: undefined, method: 'DELETE', path: '/restaurants/:restaurantId'})@ApiBearerAuth()@ApiOperation({summary: '식당 삭제'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Delete(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(restaurantId: string, updateRestaurantDto: UpdateRestaurantDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({UpdateRestaurantResponse: undefined}, {ok: true, status: undefined, method: 'PATCH', path: '/restaurants/:restaurantId'})@ApiBodyWithModel({UpdateRestaurantDto: CreateRestaurantDto})@ApiBearerAuth()@ApiOperation({summary: '식당 정보 수정'})@ApiParam({name: 'restaurantId', type: Number, example: 1})@UseGuards(RestaurantOwnerGuard)@Roles(['undefined'])@Patch(':restaurantId')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.controller.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                restaurantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateRestaurantDto\n                                            \n                                                            UpdateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseSearchModel } from '@common/decorators/api.response.search.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { DEFAULT_PAGE, PER_PAGE } from '@common/variables/environment';\nimport { Roles } from '@middleware/roles.decorator';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n} from '@nestjs/swagger';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { CreateRestaurantDto } from './dto/create-restaurant.dto';\nimport { UpdateRestaurantDto } from './dto/update-restaurant.dto';\nimport { Restaurant } from './entities/restaurant.entity';\nimport { RestaurantOwnerGuard } from './restaurant-owner.guard';\nimport { RestaurantsService } from './restaurants.service';\n\n@Controller('restaurants')\nexport class RestaurantsController {\n  constructor(private readonly restaurantsService: RestaurantsService) {}\n\n  @ApiResponseWithModel(\n    {\n      CreateRestaurantResponse: { id: 1 },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/restaurants',\n    },\n  )\n  @ApiBodyWithModel({ CreateRestaurantDto })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 정보 추가' })\n  @Roles([UserRole.Shopkeeper])\n  @Post()\n  create(\n    @Req() req: Request,\n    @Body() createRestaurantDto: CreateRestaurantDto,\n  ) {\n    return this.restaurantsService.create(req.user.id, createRestaurantDto);\n  }\n\n  @ApiResponseSearchModel(\n    { SearchRestaurantResponse: Restaurant },\n    '/restaurants',\n    {\n      page: 2,\n      count: 10,\n      total: 3,\n    },\n  )\n  @ApiQuery({\n    name: 'category',\n    type: String,\n    example: 'fine%20dining',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'name',\n    type: String,\n    example: '류니',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'location',\n    type: String,\n    example: '서울',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    example: DEFAULT_PAGE,\n    required: false,\n  })\n  @ApiQuery({\n    name: 'perPage',\n    type: Number,\n    example: PER_PAGE,\n    required: false,\n  })\n  @ApiOperation({ summary: '식당 전체 조회' })\n  @Get()\n  findAll(\n    @Req() req: Request,\n    @Query('category') category: string,\n    @Query('name') name: string,\n    @Query('location') location: string,\n    @Query(\n      'page',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    page: number = DEFAULT_PAGE,\n    @Query(\n      'perPage',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    perPage: number = PER_PAGE,\n  ) {\n    const searchOption = { category, name, location };\n    return this.restaurantsService.findAll(\n      req.originalUrl,\n      +page,\n      +perPage,\n      searchOption,\n    );\n  }\n\n  @ApiResponseWithModel(\n    { FindOneRestaurantResponse: Restaurant },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'GET',\n      path: '/restaurants/:restaurantId',\n    },\n  )\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @ApiOperation({ summary: '식당 상세 조회' })\n  @Get(':restaurantId')\n  findOne(@Param('restaurantId') restaurantId: string) {\n    return this.restaurantsService.findOne(+restaurantId);\n  }\n\n  @ApiResponseWithModel(\n    {\n      UpdateRestaurantResponse: {\n        id: 1,\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'PATCH',\n      path: '/restaurants/:restaurantId',\n    },\n  )\n  @ApiBodyWithModel({ UpdateRestaurantDto: CreateRestaurantDto })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 정보 수정' })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Patch(':restaurantId')\n  update(\n    @Param('restaurantId') restaurantId: string,\n    @Body() updateRestaurantDto: UpdateRestaurantDto,\n  ) {\n    return this.restaurantsService.update(+restaurantId, updateRestaurantDto);\n  }\n\n  @ApiResponseWithModel(\n    {\n      DeleteRestaurantResponse: {\n        id: 1,\n      },\n    },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'DELETE',\n      path: '/restaurants/:restaurantId',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '식당 삭제' })\n  @ApiParam({ name: 'restaurantId', type: Number, example: 1 })\n  @UseGuards(RestaurantOwnerGuard)\n  @Roles([UserRole.Shopkeeper])\n  @Delete(':restaurantId')\n  remove(@Param('restaurantId') restaurantId: string) {\n    return this.restaurantsService.remove(+restaurantId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/RestaurantsModule.html":{"url":"modules/RestaurantsModule.html","title":"module - RestaurantsModule","body":"\n                   \n\n\n\n\n    모듈\n    RestaurantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_imports\n\n\n\ncluster_RestaurantsModule_exports\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\n\nMenusModule\n\nMenusModule\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nRestaurantsModule -->\n\nMenusModule->RestaurantsModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nRestaurantsModule -->\n\nReservationsModule->RestaurantsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nRestaurantsModule -->\n\nUsersModule->RestaurantsModule\n\n\n\n\n\nRestaurantsService \n\nRestaurantsService \n\nRestaurantsService  -->\n\nRestaurantsModule->RestaurantsService \n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/restaurants/restaurants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            RestaurantsService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            RestaurantsController\n                        \n                    \n                \n                \n                    가져오기\n                    \n                        \n                            MenusModule\n                        \n                        \n                            ReservationsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            RestaurantsService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.module.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { RouterModule } from '@nestjs/core';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UsersModule } from '@users/users.module';\nimport { Restaurant } from './entities/restaurant.entity';\nimport { MenusModule } from './menus/menus.module';\nimport { RestaurantExistsMiddleware } from './middleware/restaurant-exists.middleware';\nimport { ReservationsModule } from './reservations/reservations.module';\nimport { RestaurantsController } from './restaurants.controller';\nimport { RestaurantsService } from './restaurants.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Restaurant]),\n    RouterModule.register([\n      { path: 'restaurants/:restaurantId', module: MenusModule },\n      { path: 'restaurants/:restaurantId', module: ReservationsModule },\n    ]),\n    MenusModule,\n    ReservationsModule,\n    UsersModule,\n  ],\n  controllers: [RestaurantsController],\n  providers: [RestaurantsService],\n  exports: [RestaurantsService],\n})\nexport class RestaurantsModule implements NestModule {\n  /* 식당 하위 도메인 예약, 메뉴 경로에서 식당 존재 여부를 검증 */\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(RestaurantExistsMiddleware)\n      .forRoutes('restaurants/:restaurantId/*api');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/RestaurantsService.html":{"url":"injectables/RestaurantsService.html","title":"injectable - RestaurantsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/restaurants.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(restaurantRepository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/restaurants/restaurants.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        restaurantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: number, createRestaurantDto: CreateRestaurantDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                createRestaurantDto\n                                            \n                                                            CreateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(path: string, page: number, perPage: number, searchOption: SearchOption)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                searchOption\n                                            \n                                                        SearchOption\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateRestaurantDto: UpdateRestaurantDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/restaurants/restaurants.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateRestaurantDto\n                                            \n                                                            UpdateRestaurantDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Protocol } from '@util/protocol';\nimport { UtilService } from '@util/util.service';\nimport { Like, Repository } from 'typeorm';\nimport { CreateRestaurantDto } from './dto/create-restaurant.dto';\nimport { UpdateRestaurantDto } from './dto/update-restaurant.dto';\nimport { Restaurant } from './entities/restaurant.entity';\n\n@Injectable()\nexport class RestaurantsService {\n  constructor(\n    @InjectRepository(Restaurant)\n    private readonly restaurantRepository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async create(userId: number, createRestaurantDto: CreateRestaurantDto) {\n    const restaurant = await this.restaurantRepository.save({\n      userId,\n      ...createRestaurantDto,\n    });\n    return { id: restaurant.id };\n  }\n\n  findAll(\n    path: string,\n    page: number,\n    perPage: number,\n    searchOption: SearchOption,\n  ) {\n    return this.utilService.searchPagination(\n      this.restaurantRepository,\n      path,\n      {\n        take: perPage,\n        skip: (page - 1) * perPage,\n        where: {\n          category: searchOption.category\n            ? Like('%' + searchOption.category + '%')\n            : undefined,\n          name: searchOption.name\n            ? Like('%' + searchOption.name + '%')\n            : undefined,\n          location: searchOption.location\n            ? Like('%' + searchOption.location + '%')\n            : undefined,\n        },\n        relations: {\n          menus: true,\n          user: true,\n        },\n        select: {\n          user: {\n            id: true,\n            userId: true,\n            username: true,\n          },\n        },\n      },\n      page,\n      perPage,\n      searchOption,\n    );\n  }\n\n  async findOne(id: number) {\n    const restaurant = await this.restaurantRepository.findOne({\n      where: { id },\n      relations: {\n        menus: true,\n        user: true,\n      },\n      select: {\n        user: {\n          id: true,\n          userId: true,\n          username: true,\n        },\n      },\n    });\n    if (!restaurant) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol, {\n        cause: '식당 정보를 찾을 수 없습니다.',\n      });\n    }\n    return restaurant;\n  }\n\n  update(id: number, updateRestaurantDto: UpdateRestaurantDto) {\n    return this.restaurantRepository.update(id, updateRestaurantDto);\n  }\n\n  async remove(id: number) {\n    await this.restaurantRepository.softDelete(id);\n    return { id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"guards/RoleGuard.html":{"url":"guards/RoleGuard.html","title":"guard - RoleGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    가드\n    RoleGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            파일\n            \n            \n                src/middleware/role.guard.ts\n            \n\n\n\n\n\n\n                \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                            \n                                    Private\n                                matchRoles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    생성자\n        \n            \n                \n                    \nconstructor(usersService: UsersService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/middleware/role.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/role.guard.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        matchRoles\n                        \n                    \n                \n            \n            \n                \n                        \n                    matchRoles(roles: UserRole[], userRole: UserRole)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/middleware/role.guard.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                roles\n                                            \n                                                            UserRole[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                userRole\n                                            \n                                                            UserRole\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  Inject,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { UsersService } from '@users/users.service';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly reflector: Reflector,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise {\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const roles =\n      this.reflector.get('roles', context.getHandler()) ||\n      this.reflector.get('roles', context.getClass());\n\n    if (typeof roles === 'undefined') {\n      return true;\n    }\n\n    if (!user) {\n      const errorProtocol = Protocol.RequiredLogin;\n      throw new UnauthorizedException(errorProtocol);\n    }\n\n    if (roles.length === 0) {\n      return true;\n    }\n\n    /* 데이터베이스 사용자 데이터 존재 검증, 없으면 throw */\n    await this.usersService.findOne(user.id);\n\n    const isMatchRole = this.matchRoles(roles, user.role);\n    if (!isMatchRole) {\n      const errorProtocol = Protocol.NoMatchRoles;\n      throw new UnauthorizedException(errorProtocol);\n    }\n\n    return true;\n  }\n\n  private matchRoles(roles: UserRole[], userRole: UserRole) {\n    return roles.includes(userRole);\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/TypeormService.html":{"url":"injectables/TypeormService.html","title":"injectable - TypeormService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TypeormService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/database/typeorm.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                createTypeOrmOptions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(customConfig: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/database/typeorm.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        customConfig\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        createTypeOrmOptions\n                        \n                    \n                \n            \n            \n                \ncreateTypeOrmOptions()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/database/typeorm.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :     TypeOrmModuleOptions\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { DatabaseOption } from '@common/variables/databaseConf';\nimport { Injectable } from '@nestjs/common';\nimport { TypeOrmModuleOptions, TypeOrmOptionsFactory } from '@nestjs/typeorm';\n\n@Injectable()\nexport class TypeormService implements TypeOrmOptionsFactory {\n  constructor(private readonly customConfig: CommonService) {}\n\n  createTypeOrmOptions(): TypeOrmModuleOptions {\n    return this.customConfig.getConfig('database');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateMenuDto.html":{"url":"classes/UpdateMenuDto.html","title":"class - UpdateMenuDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateMenuDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/menus/dto/update-menu.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateMenuDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateMenuDto } from './create-menu.dto';\n\nexport class UpdateMenuDto extends PartialType(CreateMenuDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateReservationDto.html":{"url":"classes/UpdateReservationDto.html","title":"class - UpdateReservationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateReservationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/reservations/dto/update-reservation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateReservationDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateReservationDto } from './create-reservation.dto';\n\nexport class UpdateReservationDto extends PartialType(CreateReservationDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateRestaurantDto.html":{"url":"classes/UpdateRestaurantDto.html","title":"class - UpdateRestaurantDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateRestaurantDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/restaurants/dto/update-restaurant.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateRestaurantDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateRestaurantDto } from './create-restaurant.dto';\n\nexport class UpdateRestaurantDto extends PartialType(CreateRestaurantDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  클래스\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CreateUserDto, ['role'])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends OmitType(CreateUserDto, ['role']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  엔티티\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    선택적\n                                deletedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                phone\n                            \n                            \n                                    \n                                reservations\n                            \n                            \n                                    \n                                restaurants\n                            \n                            \n                                    \n                                    \n                                role\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                            \n                                    \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            선택적\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'test1@example.com'})@IsNotEmpty()@IsEmail()@Column({type: 'varchar', unique: true, length: 100})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: Number, example: 1})@PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'qweQQ!!1'})@Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: () => String, example: '010-1234-5678'})@IsPhoneNumberFormat()@Column({type: 'varchar', unique: true, length: 13})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        reservations\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Reservation[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, reservation => reservation.user)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        restaurants\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Restaurant[]\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @OneToMany(undefined, restaurant => restaurant.user)\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         UserRole\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: () => UserRole, enum: UserRole, example: 1})@Column({type: 'int', unsigned: true})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         Date\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: 'testuser1'})@Column({type: 'varchar', unique: true, length: 20})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        데코레이터 : \n                        \n                        \n                            @ApiProperty({type: String, example: '김윤호'})@IsString({message: '사용자 이름은 문자만 가능합니다.'})@Column({type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { IsPhoneNumberFormat } from '@common/phone.validate';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Restaurant } from '@restaurants/entities/restaurant.entity';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { UserRole } from '../../util/enums/UserRole';\n\n@Entity()\nexport class User {\n  @ApiProperty({ type: Number, example: 1 })\n  @PrimaryGeneratedColumn()\n  id!: number;\n\n  @ApiProperty({ type: String, example: 'testuser1' })\n  @Column({ type: 'varchar', unique: true, length: 20 })\n  userId!: string;\n\n  @ApiProperty({ type: String, example: 'test1@example.com' })\n  @IsNotEmpty()\n  @IsEmail()\n  @Column({ type: 'varchar', unique: true, length: 100 })\n  email!: string;\n\n  @ApiProperty({ type: String, example: '김윤호' })\n  @IsString({ message: '사용자 이름은 문자만 가능합니다.' })\n  @Column({ type: 'varchar', length: 20 })\n  username!: string;\n\n  @ApiProperty({ type: String, example: 'qweQQ!!1' })\n  @Column({ type: 'varchar', length: 50 })\n  password!: string;\n\n  @ApiProperty({ type: () => UserRole, enum: UserRole, example: 1 })\n  @Column({ type: 'int', unsigned: true })\n  role!: UserRole;\n\n  @ApiProperty({ type: () => String, example: '010-1234-5678' })\n  @IsPhoneNumberFormat()\n  @Column({ type: 'varchar', unique: true, length: 13 })\n  phone!: string;\n\n  @CreateDateColumn()\n  createdAt!: Date;\n\n  @UpdateDateColumn()\n  updatedAt!: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n\n  @OneToMany(() => Restaurant, (restaurant) => restaurant.user)\n  restaurants!: Restaurant[];\n\n  @OneToMany(() => Reservation, (reservation) => reservation.user)\n  reservations!: Reservation[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  컨트롤러\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                접두어\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    색인\n    \n        \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedEmail\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedPhoneNumber\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                checkDuplicatedUserId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getMe\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getMeResrvations\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedEmail(emailDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidateEmailResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/email'})@ApiBodyWithModel({EmailValidateDto: undefined})@ApiOperation({summary: '이메일 중복 검증'})@Post('validate/email')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                emailDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedPhoneNumber(phoneDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidatePhoneResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/phone'})@ApiBodyWithModel({PhoneNumberValidateDto: undefined})@ApiOperation({summary: '전화번호 중복 검증'})@Post('validate/phone')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                phoneDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        checkDuplicatedUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkDuplicatedUserId(userIdDto: Pick)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({ValidateUserIdResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users/validate/user-id'})@ApiBodyWithModel({UserIdValidateDto: undefined})@ApiOperation({summary: '사용자 아이디 중복 검증'})@Post('validate/user-id')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userIdDto\n                                            \n                                                            Pick\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({SignupResponse: undefined}, {ok: true, status: undefined, method: 'POST', path: '/users'})@ApiBodyWithModel({CreateUserDto: })@ApiOperation({summary: '회원가입'})@Post()\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(req: Request)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({GetMeResponse: User}, {ok: true, status: undefined, method: 'GET', path: '/users/me'})@ApiBearerAuth()@ApiOperation({summary: '로그인 회원 정보 조회'})@Roles()@Get('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:178\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getMeResrvations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMeResrvations(req: Request, page: number, perPage: number)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseSearchModel({SearchUserReservationResponse: Reservation}, '/users/me/reservations', {page: 2, count: 10, total: 3})@ApiQuery({name: 'page', type: Number, example: DEFAULT_PAGE, required: false})@ApiQuery({name: 'perPage', type: Number, example: PER_PAGE, required: false})@ApiBearerAuth()@ApiOperation({summary: '회원 예약 목록 조회'})@Roles(['undefined'])@Get('me/reservations')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:132\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                                기본 값\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    DEFAULT_PAGE\n                                            \n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n                                            \n                                                    PER_PAGE\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(req: Request)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({DeleteUserResponse: undefined}, {ok: true, status: undefined, method: 'DELETE', path: '/users/:userId'})@ApiBearerAuth()@ApiOperation({summary: '회원 탈퇴'})@Roles()@Delete('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:215\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(req: Request, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    데코레이터 : \n                    \n                    @ApiResponseWithModel({PatchUserResponse: undefined}, {ok: true, status: undefined, method: 'PATCH', path: '/users/:userId'})@ApiBearerAuth()@ApiBodyWithModel({UpdateUserDto: })@ApiOperation({summary: '회원 정보 수정'})@Roles()@Patch('me')\n                \n            \n\n                    \n                        \n                            다음에 정의됨 src/users/users.controller.ts:198\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { ApiBodyWithModel } from '@common/decorators/api.body.with.model';\nimport { ApiResponseSearchModel } from '@common/decorators/api.response.search.model';\nimport { ApiResponseWithModel } from '@common/decorators/api.response.with.model';\nimport { DEFAULT_PAGE, PER_PAGE } from '@common/variables/environment';\nimport { Roles } from '@middleware/roles.decorator';\nimport {\n  BadRequestException,\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpStatus,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  Req,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  PickType,\n} from '@nestjs/swagger';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { UserRole } from '@util/enums/UserRole';\nimport { Protocol } from '@util/protocol';\nimport { Request } from 'express';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiResponseWithModel(\n    { SignupResponse: PickType(User, ['id']) },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'POST',\n      path: '/users',\n    },\n  )\n  @ApiBodyWithModel({\n    CreateUserDto,\n  })\n  @ApiOperation({ summary: '회원가입' })\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiResponseWithModel(\n    { ValidateEmailResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/email',\n    },\n  )\n  @ApiBodyWithModel({ EmailValidateDto: PickType(CreateUserDto, ['email']) })\n  @ApiOperation({ summary: '이메일 중복 검증' })\n  @Post('validate/email')\n  checkDuplicatedEmail(@Body() emailDto: Pick) {\n    return this.usersService.isDuplicatedBy({ email: emailDto?.email });\n  }\n\n  @ApiResponseWithModel(\n    { ValidatePhoneResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/phone',\n    },\n  )\n  @ApiBodyWithModel({\n    PhoneNumberValidateDto: PickType(CreateUserDto, ['phone']),\n  })\n  @ApiOperation({ summary: '전화번호 중복 검증' })\n  @Post('validate/phone')\n  checkDuplicatedPhoneNumber(@Body() phoneDto: Pick) {\n    return this.usersService.isDuplicatedBy({ phone: phoneDto?.phone });\n  }\n\n  @ApiResponseWithModel(\n    { ValidateUserIdResponse: { result: true } },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'POST',\n      path: '/users/validate/user-id',\n    },\n  )\n  @ApiBodyWithModel({ UserIdValidateDto: PickType(CreateUserDto, ['userId']) })\n  @ApiOperation({ summary: '사용자 아이디 중복 검증' })\n  @Post('validate/user-id')\n  checkDuplicatedUserId(@Body() userIdDto: Pick) {\n    return this.usersService.isDuplicatedBy({ userId: userIdDto?.userId });\n  }\n\n  @ApiResponseSearchModel(\n    { SearchUserReservationResponse: Reservation },\n    '/users/me/reservations',\n    {\n      page: 2,\n      count: 10,\n      total: 3,\n    },\n  )\n  @ApiQuery({\n    name: 'page',\n    type: Number,\n    example: DEFAULT_PAGE,\n    required: false,\n  })\n  @ApiQuery({\n    name: 'perPage',\n    type: Number,\n    example: PER_PAGE,\n    required: false,\n  })\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '회원 예약 목록 조회' })\n  @Roles([UserRole.Customer])\n  @Get('me/reservations')\n  async getMeResrvations(\n    @Req() req: Request,\n    @Query(\n      'page',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    page: number = DEFAULT_PAGE,\n    @Query(\n      'perPage',\n      new ParseIntPipe({\n        exceptionFactory(error) {\n          const errorProtocol = Protocol.ArgsRequired;\n          throw new BadRequestException(errorProtocol, { cause: error });\n        },\n        optional: true,\n      }),\n    )\n    perPage: number = PER_PAGE,\n  ) {\n    return this.usersService.getMeResrvations(\n      req.originalUrl,\n      req.user,\n      page,\n      perPage,\n    );\n  }\n\n  @ApiResponseWithModel(\n    { GetMeResponse: User },\n    {\n      ok: true,\n      status: HttpStatus.OK,\n      method: 'GET',\n      path: '/users/me',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '로그인 회원 정보 조회' })\n  @Roles()\n  @Get('me')\n  async getMe(@Req() req: Request) {\n    return this.usersService.getMe(req.user);\n  }\n\n  @ApiResponseWithModel(\n    { PatchUserResponse: { id: 1 } },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'PATCH',\n      path: '/users/:userId',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiBodyWithModel({\n    UpdateUserDto,\n  })\n  @ApiOperation({ summary: '회원 정보 수정' })\n  @Roles()\n  @Patch('me')\n  async update(@Req() req: Request, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(req.user.id, updateUserDto);\n  }\n\n  @ApiResponseWithModel(\n    { DeleteUserResponse: { id: 1 } },\n    {\n      ok: true,\n      status: HttpStatus.CREATED,\n      method: 'DELETE',\n      path: '/users/:userId',\n    },\n  )\n  @ApiBearerAuth()\n  @ApiOperation({ summary: '회원 탈퇴' })\n  @Roles()\n  @Delete('me')\n  async remove(@Req() req: Request) {\n    return this.usersService.remove(req.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    모듈\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    컨트롤러\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Reservation])],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                userSelectOption\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparePassword\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUserId\n                            \n                            \n                                    Async\n                                getMe\n                            \n                            \n                                    Async\n                                getMeResrvations\n                            \n                            \n                                    Async\n                                isDuplicatedBy\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(reservationRepository: Repository, userRepository: Repository, utilService: UtilService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        reservationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                                \n                                                        utilService\n                                                  \n                                                        \n                                                                        UtilService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparePassword(userId: string, inputPassword: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                inputPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                        \n                            반환 :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:141\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneByUserId(userId: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:81\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMe\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMe(userTokenData: UserTokenData)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                userTokenData\n                                            \n                                                            UserTokenData\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getMeResrvations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMeResrvations(path: string, userTokenData: UserTokenData, page: number, perPage: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                userTokenData\n                                            \n                                                            UserTokenData\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isDuplicatedBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    isDuplicatedBy(whereOption: T)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:33\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                whereOption\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/users/users.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        userSelectOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n    id: true,\n    userId: true,\n    email: true,\n    phone: true,\n    role: true,\n  }\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/users/users.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Reservation } from '@restaurants/reservations/entities/reservation.entity';\nimport { Protocol } from '@util/protocol';\nimport { UtilService } from '@util/util.service';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  userSelectOption = {\n    id: true,\n    userId: true,\n    email: true,\n    phone: true,\n    role: true,\n  };\n\n  constructor(\n    @InjectRepository(Reservation)\n    private readonly reservationRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly utilService: UtilService,\n  ) {}\n\n  async isDuplicatedBy(whereOption: T) {\n    const count = await this.userRepository.countBy(whereOption);\n    const errorProtocol = Protocol.Conflict;\n    if (count > 0) {\n      throw new ConflictException(errorProtocol, 'email이 중복됩니다.');\n    }\n    return { result: true };\n  }\n\n  async comparePassword(userId: string, inputPassword: string) {\n    const user = await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { userId },\n      },\n    );\n    const message = userId + inputPassword;\n    const isSamePassword = this.utilService.compareInputPasswordWith(\n      message,\n      user.password,\n    );\n\n    if (!isSamePassword) {\n      const errorProtocol = Protocol.WrongLoginData;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    return user;\n  }\n  /* user's util */\n\n  async create(createUserDto: CreateUserDto) {\n    await this.isDuplicatedBy({ email: createUserDto.email });\n    await this.isDuplicatedBy({ userId: createUserDto.userId });\n    await this.isDuplicatedBy({ phone: createUserDto.phone });\n\n    const hashedPassword = this.utilService.createHashedPassword(\n      createUserDto.userId + createUserDto.password,\n    );\n    createUserDto.password = hashedPassword;\n    const createdData = await this.userRepository.save(createUserDto);\n    return { id: createdData.id };\n  }\n\n  findAll() {\n    return this.userRepository.find();\n  }\n\n  async findOneByUserId(userId: string) {\n    const user = await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { userId },\n        select: this.userSelectOption,\n      },\n    );\n\n    return user;\n  }\n\n  async getMe(userTokenData: UserTokenData) {\n    const id = userTokenData.id;\n\n    const user = await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { id },\n        select: this.userSelectOption,\n      },\n    );\n\n    return user;\n  }\n\n  async getMeResrvations(\n    path: string,\n    userTokenData: UserTokenData,\n    page: number,\n    perPage: number,\n  ) {\n    const userId = userTokenData.id;\n    const reservations = await this.utilService.searchPagination(\n      this.reservationRepository,\n      path,\n      {\n        where: {\n          userId,\n        },\n        select: {\n          user: this.userSelectOption,\n        },\n        relations: {\n          restaurant: true,\n          reservationMenus: true,\n          user: true,\n        },\n        take: perPage,\n        skip: (page - 1) * perPage,\n        order: {\n          createdAt: 'DESC',\n        },\n      },\n      page,\n      perPage,\n    );\n    return reservations;\n  }\n\n  async findOne(id: number) {\n    const user = await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { id },\n        select: this.userSelectOption,\n      },\n    );\n\n    return user;\n  }\n\n  async update(id: number, updateUserDto: UpdateUserDto) {\n    const user = await this.utilService.throwNoExistsEntityWithSelectBy(\n      this.userRepository,\n      {\n        where: { id },\n      },\n    );\n\n    if (updateUserDto.email) {\n      await this.isDuplicatedBy({ email: updateUserDto.email });\n    }\n    if (updateUserDto.userId) {\n      await this.isDuplicatedBy({ userId: updateUserDto.userId });\n    }\n    if (updateUserDto.phone) {\n      await this.isDuplicatedBy({ phone: updateUserDto.phone });\n    }\n\n    if (updateUserDto.password) {\n      const hashedPassword = this.utilService.createHashedPassword(\n        user.userId + updateUserDto.password,\n      );\n      updateUserDto.password = hashedPassword;\n    }\n\n    await this.userRepository.update(id, updateUserDto);\n\n    const updatedUser = await this.findOne(id);\n    return updatedUser;\n  }\n\n  async remove(id: number) {\n    await this.userRepository.softDelete(id);\n    return { id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules/UtilModule.html":{"url":"modules/UtilModule.html","title":"module - UtilModule","body":"\n                   \n\n\n\n\n    모듈\n    UtilModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UtilModule\n\n\n\ncluster_UtilModule_exports\n\n\n\ncluster_UtilModule_providers\n\n\n\n\nUtilService \n\nUtilService \n\n\n\nUtilModule\n\nUtilModule\n\nUtilService  -->\n\nUtilModule->UtilService \n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilModule -->\n\nUtilService->UtilModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            파일\n        \n        \n            src/util/util.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    제공자\n                    \n                        \n                            UtilService\n                        \n                    \n                \n                \n                    내보내기\n                    \n                        \n                            UtilService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { UtilService } from './util.service';\n\n@Global()\n@Module({\n  providers: [UtilService],\n  exports: [UtilService],\n})\nexport class UtilModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"injectables/UtilService.html":{"url":"injectables/UtilService.html","title":"injectable - UtilService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UtilService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            파일\n        \n        \n            src/util/util.service.ts\n        \n\n\n\n\n\n            \n    색인\n    \n        \n                \n                    \n                        속성\n                    \n                \n                \n                    \n                        \n                            \n                                cookieOptions\n                            \n                            \n                                secretConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        메소드\n                    \n                \n                \n                    \n                        \n                            \n                                compareInputPasswordWith\n                            \n                            \n                                createHashedPassword\n                            \n                            \n                                createToken\n                            \n                            \n                                getFlatErrorConstraints\n                            \n                            \n                                isEmptyObject\n                            \n                            \n                                    Async\n                                searchPagination\n                            \n                            \n                                    Async\n                                throwNoExistsEntityWithSelectBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    생성자\n        \n            \n                \n                    \nconstructor(commonService: CommonService)\n                    \n                \n                        \n                            \n                                다음에 정의됨 src/util/util.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    매개변수 :\n                                    \n                                        \n                                            \n                                                이름\n                                                    타입\n                                                선택적\n                                            \n                                        \n                                        \n                                                \n                                                        commonService\n                                                  \n                                                        \n                                                                        CommonService\n                                                        \n                                                  \n                                                    \n                                                            아니오\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        메소드\n    \n    \n        \n            \n                \n                    \n                    \n                        compareInputPasswordWith\n                        \n                    \n                \n            \n            \n                \ncompareInputPasswordWith(message: string, userHashedPassword: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                userHashedPassword\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createHashedPassword\n                        \n                    \n                \n            \n            \n                \ncreateHashedPassword(message: string)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createToken\n                        \n                    \n                \n            \n            \n                \ncreateToken(undefined: Omit)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            Omit\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     { accessToken: any; refreshToken: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFlatErrorConstraints\n                        \n                    \n                \n            \n            \n                \ngetFlatErrorConstraints(errors: ValidationError[])\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:152\n                        \n                    \n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                errors\n                                            \n                                                        ValidationError[]\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEmptyObject\n                        \n                    \n                \n            \n            \n                \nisEmptyObject(obj: Obj)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:148\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    Obj\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                        Obj\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        searchPagination\n                        \n                    \n                \n            \n            \n                \n                        \n                    searchPagination(orm: Repository, path: string, query: FindManyOptions, page: number, perPage: number, searchOption?: SearchOption)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:87\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    Domain\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                orm\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                query\n                                            \n                                                        FindManyOptions\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                perPage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                searchOption\n                                            \n                                                        SearchOption\n                                            \n\n                                            \n                                                    네\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        throwNoExistsEntityWithSelectBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    throwNoExistsEntityWithSelectBy(orm: Repository, findOption: FindOneOptions)\n                \n            \n\n\n                    \n                        \n                            다음에 정의됨 src/util/util.service.ts:126\n                        \n                    \n\n                    \n                        \n                            타입 매개 변수 :\n                            \n                                    Domain\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                orm\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                        \n                                                findOption\n                                            \n                                                        FindOneOptions\n                                            \n\n                                            \n                                                    아니오\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            반환 :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        속성\n    \n    \n        \n            \n                \n                    \n                    \n                        cookieOptions\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     CookieOptions\n\n                    \n                \n                \n                    \n                        기본 값 : {\n    httpOnly: true,\n    sameSite: 'strict',\n    maxAge: 1 * 24 * 60 * 60 * 1000,\n  }\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/util.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        secretConfig\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         ReturnType\n\n                    \n                \n                    \n                        \n                                다음에 정의됨 src/util/util.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { CommonService } from '@common/common.service';\nimport { SecretOption } from '@common/variables/secretConf';\nimport {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport * as crypto from 'crypto';\nimport * as jwt from 'jsonwebtoken';\nimport { Protocol } from './protocol';\nimport { CookieOptions } from 'express';\nimport {\n  FindManyOptions,\n  FindOneOptions,\n  ObjectLiteral,\n  Repository,\n} from 'typeorm';\nimport { ValidationError } from 'class-validator';\n\n/* 순환참조 우회를 위해 전역 모듈로 유틸 주입 활용 */\n@Injectable()\nexport class UtilService {\n  secretConfig: ReturnType;\n  cookieOptions: CookieOptions = {\n    httpOnly: true,\n    sameSite: 'strict',\n    maxAge: 1 * 24 * 60 * 60 * 1000,\n  };\n\n  constructor(private readonly commonService: CommonService) {\n    this.secretConfig = this.commonService.getConfig('secret');\n  }\n\n  /* message = userId + password 조합 */\n  createHashedPassword(message: string) {\n    return crypto\n      .createHmac('sha256', this.secretConfig.password)\n      .update(message)\n      .digest('base64');\n  }\n\n  compareInputPasswordWith(message: string, userHashedPassword: string) {\n    const hashedPassword = this.createHashedPassword(message);\n    return hashedPassword === userHashedPassword;\n  }\n\n  createToken({\n    id,\n    userId,\n    email,\n    role,\n    phone,\n  }: Omit) {\n    const userTokenData = { id, userId, email, role, phone };\n    const isExistsArgs = Object.keys(userTokenData).every((item) =>\n      ['id', 'userId', 'email', 'role', 'phone'].includes(item),\n    );\n\n    if (!isExistsArgs) {\n      const errorProtocol = Protocol.ArgsRequired;\n      throw new BadRequestException(errorProtocol);\n    }\n\n    const accessToken = jwt.sign(\n      { id, userId, email, role, phone },\n      this.secretConfig.accessToken,\n      {\n        issuer: 'HitRestaurant',\n        algorithm: 'HS256',\n        expiresIn: '5m',\n      },\n    );\n    const refreshToken = jwt.sign(\n      { id, userId, email, role, phone },\n      this.secretConfig.refreshToken,\n      {\n        issuer: 'HitRestaurant',\n        algorithm: 'HS256',\n        expiresIn: '1d',\n        subject: 'refresh',\n      },\n    );\n\n    return { accessToken, refreshToken };\n  }\n\n  async searchPagination(\n    orm: Repository,\n    path: string,\n    query: FindManyOptions,\n    page: number,\n    perPage: number,\n    searchOption?: SearchOption,\n  ): Promise {\n    const options = Object.fromEntries(\n      Object.entries(searchOption || {}).filter(\n        ([k, v]) => typeof v !== 'undefined',\n      ),\n    );\n    const searchParam = new URLSearchParams(options);\n    const dataList = await orm.find(query);\n    const totalAmount = await orm.countBy(query.where ?? {});\n    const total = Math.ceil(totalAmount / perPage);\n    const prev = (page - 1) * perPage > 0;\n    const next = (page + 1) * perPage  0;\n    const prevQuery = prev\n      ? `${path}${page > 1 ? `?page=${page - 1}` : ''}${isNotEmptyParam ? '&' + searchParam.toString() : ''}`\n      : undefined;\n    const nextQuery = next\n      ? `${path}?page=${page + 1}${isNotEmptyParam ? '&' + searchParam.toString() : ''}`\n      : undefined;\n\n    return {\n      data: dataList,\n      pagination: {\n        page,\n        count: dataList.length,\n        total,\n        prev: prevQuery,\n        next: nextQuery,\n      },\n    };\n  }\n\n  async throwNoExistsEntityWithSelectBy(\n    orm: Repository,\n    findOption: FindOneOptions,\n  ) {\n    const domainName = orm.create().constructor.name;\n    const entity = await orm.findOne({\n      where: findOption.where,\n      select: findOption.select,\n      order: findOption.order,\n      relations: findOption.relations,\n    });\n\n    if (!entity) {\n      const errorProtocol = Protocol.NotFound;\n      throw new NotFoundException(errorProtocol, {\n        cause: [domainName, findOption.where],\n      });\n    }\n\n    return entity;\n  }\n\n  isEmptyObject(obj: Obj) {\n    return Object.keys(obj).length === 0;\n  }\n\n  getFlatErrorConstraints(errors: ValidationError[]) {\n    return errors.map((err) => Object.values(err.constraints || {})).flat();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    문서 커버리지\n\n\n\n    \n\n\n\n    \n        \n            파일\n            타입\n            식별자\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/common.service.ts\n            \n            injectable\n            CommonService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/datetime.validate.ts\n            \n            class\n            IsDateTimeAfterNowConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/common/datetime.validate.ts\n            \n            function\n            IsDateTimeAfterNow\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.body.with.case.model.ts\n            \n            variable\n            ApiBodyWithCaseModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.body.with.model.ts\n            \n            variable\n            ApiBodyWithModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.search.model.ts\n            \n            variable\n            ApiResponseSearchModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.with.case.model.ts\n            \n            variable\n            ApiResponseWithCaseModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/decorators/api.response.with.model.ts\n            \n            variable\n            ApiResponseWithModel\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/phone.validate.ts\n            \n            class\n            IsPhoneNumberFormatConstraint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/common/phone.validate.ts\n            \n            function\n            IsPhoneNumberFormat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/commonConf.ts\n            \n            type alias\n            CommonOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/databaseConf.ts\n            \n            type alias\n            DatabaseOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            API_PATH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_HOST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_PASS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DB_USER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            DEFAULT_PAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            EXAMPLE_JWT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            LOG_LEVEL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            PER_PAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            PORT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            RUN_MODE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_ACCESS_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_HASH_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SECRET_REFRESH_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            SWAGGER_URL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/environment.ts\n            \n            variable\n            VERSION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/secretConf.ts\n            \n            type alias\n            SecretOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/common/variables/swaggerConf.ts\n            \n            type alias\n            SwaggerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/typeorm.service.ts\n            \n            injectable\n            TypeormService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                        src/logger/logger.service.ts\n            \n            type alias\n            LogMethod\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/bearer-parser.middleware.ts\n            \n            injectable\n            BearerParserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/global-exception.filter.ts\n            \n            class\n            GlobalExceptionFilter\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/logger.middleware.ts\n            \n            injectable\n            LoggerMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/repsonse.interceptor.ts\n            \n            injectable\n            ResponseInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/middleware/role.guard.ts\n            \n            guard\n            RoleGuard\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/middleware/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/dto/create-restaurant.dto.ts\n            \n            class\n            CreateRestaurantDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/dto/update-restaurant.dto.ts\n            \n            class\n            UpdateRestaurantDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/entities/restaurant.entity.ts\n            \n            entity\n            Restaurant\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/dto/create-menu.dto.ts\n            \n            class\n            CreateMenuDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/dto/update-menu.dto.ts\n            \n            class\n            UpdateMenuDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/entities/menu.entity.ts\n            \n            entity\n            Menu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/menus/menu-data-parse.pipe.ts\n            \n            injectable\n            MenuDataParsePipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/menus/menus.controller.ts\n            \n            controller\n            MenusController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/menus/menus.service.ts\n            \n            injectable\n            MenusService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/restaurants/middleware/restaurant-exists.middleware.ts\n            \n            injectable\n            RestaurantExistsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/dto/create-reservation.dto.ts\n            \n            class\n            CreateReservationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/dto/update-reservation.dto.ts\n            \n            class\n            UpdateReservationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/entities/reservation-menu.entity.ts\n            \n            entity\n            ReservationMenu\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/entities/reservation.entity.ts\n            \n            entity\n            Reservation\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservation-amount-parse.pipe.ts\n            \n            injectable\n            ReservationAmountParsePipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservation-date.validate.ts\n            \n            class\n            IsAfterStartTimeConstraint\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/restaurants/reservations/reservation-date.validate.ts\n            \n            function\n            IsAfterStartTime\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservations.controller.ts\n            \n            controller\n            ReservationsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/reservations/reservations.service.ts\n            \n            injectable\n            ReservationsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/restaurants/restaurant-owner.guard.ts\n            \n            guard\n            RestaurantOwnerGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.controller.ts\n            \n            controller\n            RestaurantsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.service.ts\n            \n            injectable\n            RestaurantsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                        src/util/common.ts\n            \n            variable\n            commonOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/enums/UserRole.ts\n            \n            variable\n            UserRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/enums/UserRole.ts\n            \n            type alias\n            UserRole\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            variable\n            Protocol\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            type alias\n            ErrorType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/protocol.ts\n            \n            type alias\n            Protocol\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            class\n            ExceptionResponseFormat\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            class\n            ResponseFormat\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/util/response.ts\n            \n            interface\n            CommonResponseFormat\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/util/secret.ts\n            \n            variable\n            secretOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/swagger.ts\n            \n            variable\n            swaggerOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            isDev\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            isTest\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            typeormOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/util/typeorm.ts\n            \n            variable\n            typeormSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/util/util.service.ts\n            \n            injectable\n            UtilService\n            \n                0 %\n                (0/11)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        의존성\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/config : ^4.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.0.6\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.8.0\n        \n            cookie-parser : ^1.4.7\n        \n            dayjs : ^1.11.13\n        \n            jsonwebtoken : ^9.0.2\n        \n            mysql2 : ^3.13.0\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.21\n        \n            typeorm-naming-strategies : ^4.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  함수\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsAfterStartTime   (src/.../reservation-date.validate.ts)\n                        \n                        \n                            IsDateTimeAfterNow   (src/.../datetime.validate.ts)\n                        \n                        \n                            IsPhoneNumberFormat   (src/.../phone.validate.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/restaurants/reservations/reservation-date.validate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsAfterStartTime\n                        \n                    \n                \n            \n            \n                \nIsAfterStartTime(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    네\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/datetime.validate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsDateTimeAfterNow\n                        \n                    \n                \n            \n            \n                \nIsDateTimeAfterNow(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    네\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/common/phone.validate.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsPhoneNumberFormat\n                        \n                    \n                \n            \n            \n                \nIsPhoneNumberFormat(validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                매개변수 :\n                                \n                                \n                                    \n                                        \n                                            이름\n                                                타입\n                                            선택적\n                                        \n                                    \n                                    \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    네\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHIT Restaurant API\n에이치아이티 식당(가명)을 위한 API 제작\n\n개발 환경\n설치 및 실행\nAPI 개요\n\n개발 환경\n\nNode.js: v20.11.1\nNpm: v10.9.0\nWindows: 11 home\nMariaDB: 10.1.13\nVitest: v3.0.8\n\n폴더 구조\n예시 :root/\n├── src/  # 애플리케이션 소스 코드\n│   ├── auth/  # 인증 관련 모듈\n│   ├── common/  # 공통 유틸리티 및 상수\n│   ├── database/  # 데이터베이스 설정 및 관련 코드\n│   ├── logger/  # 로깅 관련 기능\n│   ├── middleware/  # 미들웨어 관련 코드\n│   ├── restaurants/  # 레스토랑 관련 기능\n│   ├── types/  # 공통 타입 관리\n│   ├── users/  # 유저 관련 기능\n│   ├── util/  # 유틸리티 기능 모음\n│   │   ├── typeorm.ts  # TypeORM 설정 관련 파일\n│   │   ├── swagger.ts  # Swagger 설정 파일\n│   │   ├── utilFunction.ts  # 공통 유틸리티 함수\n│   │   ├── responses.ts  # 공통 응답 포맷\n│   │   └── validator.ts  # 검증 로직\n│   ├── app.controller.ts  # 앱 컨트롤러\n│   ├── app.module.ts  # 앱 모듈\n│   ├── app.service.ts  # 앱 서비스\n│   └── main.ts  # 메인 부트스트랩 실행\n│\n├── docs/  # 프로젝트 문서\n├── lib/  # 외부 라이브러리\n├── sql/  # SQL 관련 쿼리 파일\n├── test/  # 테스트 코드\n│\n├── .dependency-cruiser.js  # 의존성 크루징 설정\n├── .env  # 환경변수 파일\n├── .env.test  # 테스트 환경변수 파일\n├── .gitignore  # Git 무시 목록\n├── .prettierrc  # Prettier 설정\n├── eslint.config.mjs  # ESLint 설정\n├── nest-cli.json  # NestJS CLI 설정\n├── package-lock.json  # 패키지 버전 고정 파일\n├── package.json  # 프로젝트 메타 정보 및 종속성 관리\n├── README.md  # 프로젝트 설명 문서\n├── tsconfig.build.json  # TypeScript 빌드 설정\n├── tsconfig.json  # TypeScript 설정\n└── vitest.config.mjs  # Vitest 설정 파일설치 및 실행\n소스코드를 다운로드 하거나 git clone을 통해 내려받습니다.\n예시 :git clone https://github.com/kkn1125/hit-assignment.git프로젝트 폴더로 이동해서 의존을 설치합니다.\n예시 :npm ci\n# or\nnpm installMariaDB가 없으시다면 아래 명령을 참조해주세요. 도커를 사용하고 계시다면 도커를 권장드립니다.\n예시 :# Windows\ncurl -o- https://archive.mariadb.org/mariadb-10.3.13/winx64-packages/mariadb-10.3.13-winx64.msi\n# 또는\nchoco install mariadb --version=10.3.13\n# https://community.chocolatey.org/packages/mariadb/10.3.13 참조\n\n# Docker\ndocker run -it -d -p :3306 -e MYSQL_ROOT_PASSWORD= --name mariadb mariadb:10.3.13\n\n# Mac\nbrew install mariadb데이터베이스와 npm 설치가 끝났다면 다음과 같이 실행합니다.\n예시 :# 개발 버전\nnpm run start:dev\n\n# 프로덕션\nnpm run build\nnpm run start:prodAPI 진입점\n\nAPI: http://:/api\n인가: 헤더 Authorization: Bearer  사용\n\nSwagger 문서\n\nSwagger Docs: http://:/docs\n\n로그인 방식\n\nBearer access token 사용한 인증\ncookie를 이용한 refresh token 발급\nrefresh 요청을 통한 로그인 연장 (access token 재발급)\n\n더미 데이터\n더미 데이터는 고객 계정 3개, 점주 계정 2개이며, 식당 정보는 두 가지입니다. 각 식당에 등록된 메뉴는 10가지 내외입니다.\n\n유저 아이디\ntomastrain1, matjung1221, resting0301\n\n\n점주 아이디\nryu0423, imfinedining\n\n\n공통 비밀번호\nqweQQ!!1 (대소문자 주의)\n\n\n\nSQL 파일\nSQL 파일은 더미 데이터 insert가 없는 파일과 있는 파일이 두 가지 있습니다.\n루트 경로에서 .sql 디렉토리에 위치합니다.\n\ndump-hit_restaurant-inlcude-row-data.sql: 더미 데이터 insert 구문 포함\ndump-hit_restaurant-only-structure.sql: 테이블 구조만\n\n발생 이슈\n과제를 진행하면서 마주했던 이슈와 해결 방향에 대한 내용입니다.\nJWT 로그인 처리 구현\n\n문제: json web token(이하 JWT) 구현 시 유지보수와 기능 확장 측면에서 어떤 방식이 더 나은지에 대한 고민\n고민 과정:\naccess token(이하 액세스 토큰)을 사용할 때 쿠키, 헤더 중 어디에 포함해서 요청할 것인가?\n액세스 토큰을 미들웨어로 처리할지, 토큰이 필요한 경로마다 가드로 설정할지?\nJWT 페이로드에 사용자의 정보를 어디까지 표시할 지?\n\n\n해결 과정:\n헤더에 Authorization키에 Bearer 값으로 토큰을 요청\n미들웨어로 처리하여 모든 경로에서 Authorization헤더 키 검증\nAuthorization키가 헤더에 있다면, JWT 검증 및 유저 존재, 정보 일치 검증, request객체에 user프로퍼티에 사용자 정보 저장\n없다면, 미들웨어 통과\n\n\nJWT에 포함되는 사용자 정보는 식별을 위해 userId와 사용자명, 역할(고객/점주), 휴대전화번호로 제한\n\n\n이유:\n프론트에서 redux나 recoil과 같은 state로 액세스 토큰을 관리 한다는 가정이며, 로컬스토리지 등에 저장하는 것보다 안전할 것으로 판단\nBearer를 전역 미들웨어에서 파싱하는 이유\n각 도메인별 컨트롤러에 가드 사용을 최소화하고 간단한 구조를 만들기 위함\n이후 각 API별 인증이 필요한 경우 권한 검증 Roles 데코레이터에서 로그인을 기본적으로 검증하고, 권한을 검증하기 때문에 파싱과 인증 성격을 분류하기 위함\n\n\nJWT를 파싱하는 미들웨어에서 데이터베이스 사용자 정보 조회가 매 요청마다 일어난다면 비효율적일 것으로 판단하고 최소한 검증에 필요한 id, userId, username, phone, role 정보를 포함\n\n\n\nApiResponse, ApiBody 데코레이터 커스텀\n\n문제: 스웨거 문서 작성 시 코드가 길어지는 현상으로 인해 커스터마이징 필요성 고민\n고민 과정:\n기본적으로 제공되는 ApiResponse와 같은 데코레이터에 응답 또는 바디 데이터 예시를 작성할 때 문서 관련 코드가 길어져 가독성이 떨어질 것으로 생각\nDto와 같은 형태로 응답, 바디 데이터를 따로 만들어 import할지?\n\n\n해결 과정:\n@nestjs/common에서 제공하는 applyDecorators를 사용하여 공통적인 데이터와 포맷을 따로 작성하여 활용\n\n\n이유:\n각 응답과 바디 데이터를 위해 클래스를 별도로 생성하기 보다 하나의 커스텀 데코레이터를 수정하는 편이 효율적이라 판단\n\n\n\n유틸 함수 및 환경변수 처리\n\n문제: 과제 내용 중 파일 구조를 참고하여 유틸 함수에 대해 nest 방식의 주입, import 하여 사용하는 면에 대해 고민\n고민 과정:\n주입, import는 컨트롤러, 비즈니스 로직 등에 모두 사용 가능\n환경변수 사용 시 상수 파일과 유틸함수 파일 간 dotenv 호출 중복되는 경우 발생\n\n\n해결 과정:\nnest의 기능으로 유틸 모듈을 생성하여 글로벌로 적용\n필요한 도메인에 유틸 서비스를 주입받아 사용\n\n\n이유:\n주입을 통해 확장하는 편이 import cost를 줄이며 유연한 관계를 유지할 수 있다고 판단\n유틸 서비스를 이용해 도메인별 서비스단에 주입하여 사용 및 환경변수를 dotenv 호출 중복 없이 사용\n\n\n\n토큰 검증 및 데이터 존재 여부, 주인 여부 검증\n\n문제: 사용자 또는 식당 점주, 예약자 본인 검증을 어떤 방식으로 할지에 대한 고민\n고민 과정:\n도메인 데이터에 접근, 수정 시 사용자 본인 검증을 가드로 하는게 좋은가?\n데이터의 주인을 검증하기 위해 가드 사용보다 미들웨어에서 검증하게 된다면, 미들웨어만 유지보수만 하면 되지 않을까?\n데이터 존재 여부는 어떤 방식이 유지보수하기에 용이한가?\n\n\n해결 과정:\n오너 가드를 구현\n오너 가드는 식당 도메인(하위 도메인 포함)에 사용\n데이터 존재 검증은 미들웨어에서 2번과 마찬가지로 restaurantId를 사용\n\n\n이유:\n데이터 주인 검증은 일부 API에만 필요하기 때문\n중간 path parameter인 :restaurantId를 통해 파싱된 토큰 정보와 식당 정보를 대조하여 점주인지 판별\n식당 존재를 데이터베이스 조회를 통해 검증, 단, 식당 도메인을 제외한 하위 도메인(메뉴, 예약)에만 사용\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    모듈\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    사용할 수 있는 그래프가 없습니다.\n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoggerModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        MenusModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        ReservationsModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurantsModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilModule\n                    \n                    \n                                \n                                    \n                                        브라우저가 SVG를 지원하지 않습니다\n                                    \n                                \n                        \n                            탐색\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    개요\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_MenusModule\n\n\n\ncluster_MenusModule_providers\n\n\n\ncluster_ReservationsModule\n\n\n\ncluster_ReservationsModule_providers\n\n\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_exports\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UtilModule\n\n\n\ncluster_UtilModule_exports\n\n\n\ncluster_UtilModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nCommonService \n\nCommonService \n\nCommonService  -->\n\nCommonModule->CommonService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nLoggerModule\n\nLoggerModule\n\nAppModule -->\n\nLoggerModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nRestaurantsService \n\nRestaurantsService \n\nRestaurantsService  -->\n\nRestaurantsModule->RestaurantsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nRestaurantsModule -->\n\nUsersModule->RestaurantsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nMenusModule\n\nMenusModule\n\nMenusModule -->\n\nUsersModule->MenusModule\n\n\n\n\n\nReservationsModule\n\nReservationsModule\n\nReservationsModule -->\n\nUsersModule->ReservationsModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUtilModule\n\nUtilModule\n\nAppModule -->\n\nUtilModule->AppModule\n\n\n\n\n\nUtilService \n\nUtilService \n\nUtilService  -->\n\nUtilModule->UtilService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nLoggerService\n\nLoggerService\n\nLoggerModule -->\n\nLoggerService->LoggerModule\n\n\n\nAppModule -->\n\nLoggerService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCommonService\n\nCommonService\n\nCommonModule -->\n\nCommonService->CommonModule\n\n\n\nRestaurantsModule -->\n\nMenusModule->RestaurantsModule\n\n\n\n\n\nMenusService\n\nMenusService\n\nMenusModule -->\n\nMenusService->MenusModule\n\n\n\nRestaurantsModule -->\n\nReservationsModule->RestaurantsModule\n\n\n\n\n\nReservationsService\n\nReservationsService\n\nReservationsModule -->\n\nReservationsService->ReservationsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nUtilService\n\nUtilService\n\nUtilModule -->\n\nUtilService->UtilModule\n\n\n\n\n\n\n    \n    \n    \n        확대\n        초기화\n        축소\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 모듈\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 컨트롤러\n                \n            \n        \n        \n            \n                \n                    \n                    5 엔티티\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 클래스\n                \n            \n        \n        \n            \n                \n                    \n                    2 가드\n                \n            \n        \n        \n            \n                \n                    \n                    1 인터페이스\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        속성\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  타입 별칭\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            CommonOption   (src/.../commonConf.ts)\n                        \n                        \n                            DatabaseOption   (src/.../databaseConf.ts)\n                        \n                        \n                            ErrorType   (src/.../protocol.ts)\n                        \n                        \n                            LogMethod   (src/.../logger.service.ts)\n                        \n                        \n                            Protocol   (src/.../protocol.ts)\n                        \n                        \n                            SecretOption   (src/.../secretConf.ts)\n                        \n                        \n                            SwaggerOption   (src/.../swaggerConf.ts)\n                        \n                        \n                            UserRole   (src/.../UserRole.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/variables/commonConf.ts\n    \n    \n        \n            \n                \n                    \n                    CommonOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/databaseConf.ts\n    \n    \n        \n            \n                \n                    \n                    DatabaseOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/util/protocol.ts\n    \n    \n        \n            \n                \n                    \n                    ErrorType\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Protocol\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/logger/logger.service.ts\n    \n    \n        \n            \n                \n                    \n                    LogMethod\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/secretConf.ts\n    \n    \n        \n            \n                \n                    \n                    SecretOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/common/variables/swaggerConf.ts\n    \n    \n        \n            \n                \n                    \n                    SwaggerOption\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/util/enums/UserRole.ts\n    \n    \n        \n            \n                \n                    \n                    UserRole\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  기타\n  변수\n\n\n\n    색인\n    \n        \n            \n                \n                    \n                        \n                            API_PATH   (src/.../environment.ts)\n                        \n                        \n                            ApiBodyWithCaseModel   (src/.../api.body.with.case.model.ts)\n                        \n                        \n                            ApiBodyWithModel   (src/.../api.body.with.model.ts)\n                        \n                        \n                            ApiResponseSearchModel   (src/.../api.response.search.model.ts)\n                        \n                        \n                            ApiResponseWithCaseModel   (src/.../api.response.with.case.model.ts)\n                        \n                        \n                            ApiResponseWithModel   (src/.../api.response.with.model.ts)\n                        \n                        \n                            commonOption   (src/.../common.ts)\n                        \n                        \n                            DB_HOST   (src/.../environment.ts)\n                        \n                        \n                            DB_NAME   (src/.../environment.ts)\n                        \n                        \n                            DB_PASS   (src/.../environment.ts)\n                        \n                        \n                            DB_PORT   (src/.../environment.ts)\n                        \n                        \n                            DB_USER   (src/.../environment.ts)\n                        \n                        \n                            DEFAULT_PAGE   (src/.../environment.ts)\n                        \n                        \n                            EXAMPLE_JWT   (src/.../environment.ts)\n                        \n                        \n                            isDev   (src/.../typeorm.ts)\n                        \n                        \n                            isTest   (src/.../typeorm.ts)\n                        \n                        \n                            LOG_LEVEL   (src/.../environment.ts)\n                        \n                        \n                            PER_PAGE   (src/.../environment.ts)\n                        \n                        \n                            PORT   (src/.../environment.ts)\n                        \n                        \n                            Protocol   (src/.../protocol.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            RUN_MODE   (src/.../environment.ts)\n                        \n                        \n                            SECRET_ACCESS_TOKEN   (src/.../environment.ts)\n                        \n                        \n                            SECRET_HASH_PASSWORD   (src/.../environment.ts)\n                        \n                        \n                            SECRET_REFRESH_TOKEN   (src/.../environment.ts)\n                        \n                        \n                            secretOption   (src/.../secret.ts)\n                        \n                        \n                            SWAGGER_URL   (src/.../environment.ts)\n                        \n                        \n                            swaggerOption   (src/.../swagger.ts)\n                        \n                        \n                            typeormOption   (src/.../typeorm.ts)\n                        \n                        \n                            typeormSource   (src/.../typeorm.ts)\n                        \n                        \n                            UserRole   (src/.../UserRole.ts)\n                        \n                        \n                            VERSION   (src/.../environment.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/variables/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        API_PATH\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : '/api'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_HOST\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_HOST as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_NAME\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_NAME as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_PASS\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_PASS as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_PORT\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : +(process.env.DB_PORT ?? 3306)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DB_USER\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.DB_USER as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_PAGE\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        기본 값 : 1\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXAMPLE_JWT\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcklkIjoidGVzdHVzZXIxIiwiZW1haWwiOiJ0ZXN0dXNlcjFAZXhhbXBsZS5jb20iLCJyb2xlIjoxLCJwaG9uZSI6IjAxMC0yMTM0LTE1MzQiLCJpYXQiOjE3NDE5MjAzNjQsImV4cCI6MTc0MTkyMDY2NCwiaXNzIjoiSGl0UmVzdGF1cmFudCJ9.scLKEQA5nszs3faE69WWIcMoE0v96fg2GZRougoY6AI'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOG_LEVEL\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : +(process.env.LOG_LEVEL ?? 5)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PER_PAGE\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         number\n\n                    \n                \n                \n                    \n                        기본 값 : 10\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PORT\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : +(process.env.PORT ?? 8080)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RUN_MODE\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.NODE_ENV ?? 'production'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_ACCESS_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_ACCESS_TOKEN as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_HASH_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_HASH_PASSWORD as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SECRET_REFRESH_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : process.env.SECRET_REFRESH_TOKEN as string\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SWAGGER_URL\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         string\n\n                    \n                \n                \n                    \n                        기본 값 : 'http://localhost:8080'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        VERSION\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : pkg.version ?? '0.0.1'\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.body.with.case.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiBodyWithCaseModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object,\n>(modelProps: {\n  [k: string]: {\n    [summary: string]: Model | Model[];\n  };\n}) => {\n  const [modelName, models] = Object.entries(modelProps)[0];\n  const extraModels: Type[] = [];\n  const schema: SchemaObject = {\n    title: modelName,\n    oneOf: Object.entries(models).map(([summary, model]) => {\n      const isArray = Array.isArray(model);\n      const useModel = isArray ? model[0] : model;\n      const isClass = typeof useModel === 'function';\n      if (isClass) {\n        extraModels.push(useModel);\n        return isArray\n          ? {\n              title: summary,\n              type: 'array',\n              items: {\n                $ref: getSchemaPath(useModel),\n              },\n            }\n          : {\n              title: summary,\n              type: 'object',\n              $ref: getSchemaPath(useModel),\n            };\n      }\n\n      return isArray\n        ? {\n            title: summary,\n            type: 'array',\n            items: {\n              properties: Object.fromEntries(\n                Object.entries(useModel).map(([k, v]) => [\n                  k,\n                  {\n                    type: typeof v,\n                    value: v,\n                  },\n                ]),\n              ),\n            },\n          }\n        : {\n            title: summary,\n            type: 'object',\n            properties: Object.fromEntries(\n              Object.entries(useModel).map(([k, v]) => [\n                k,\n                {\n                  type: typeof v,\n                  value: v,\n                },\n              ]),\n            ),\n          };\n    }),\n  };\n\n  if (extraModels.length > 0) {\n    return applyDecorators(ApiBody({ schema }), ApiExtraModels(...extraModels));\n  }\n  return applyDecorators(ApiBody({ schema }));\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.body.with.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiBodyWithModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(modelProps: {\n  [k: string]: Model;\n}) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n  const isClass =\n    model.constructor.toString().startsWith('class') ||\n    model.constructor.toString().match(/function (Function)/);\n\n  if (isClass) {\n    const extendsModel = model as Type;\n    const createClass = {\n      [modelName]: class extends extendsModel {},\n    }[modelName];\n    return applyDecorators(\n      ApiBody({\n        schema: { $ref: getSchemaPath(createClass) },\n      }),\n      ApiExtraModels(createClass),\n    );\n  }\n\n  return applyDecorators(\n    ApiBody({\n      schema: {\n        title: modelName,\n        properties: Object.fromEntries(\n          Object.entries(model).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        ),\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.search.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseSearchModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : >(\n  modelProps: {\n    [k: string]: Model;\n  },\n  path: string,\n  pagination: PaginationType,\n) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n\n  return applyDecorators(\n    ApiResponse({\n      status: HttpStatus.OK,\n      schema: {\n        anyOf: [\n          {\n            title: modelName,\n            properties: {\n              ok: {\n                type: 'boolean',\n                example: true,\n              },\n              status: {\n                type: 'number',\n                example: HttpStatus.OK,\n              },\n              path: {\n                type: 'string',\n                example: API_PATH + path,\n              },\n              payload: {\n                properties: {\n                  data: {\n                    type: 'array',\n                    items: {\n                      $ref: getSchemaPath(model),\n                    },\n                  },\n                  pagination: {\n                    required: ['page', 'total'],\n                    properties: {\n                      page: {\n                        type: 'number',\n                        example: pagination.page,\n                      },\n                      count: {\n                        type: 'number',\n                        example: pagination.count,\n                      },\n                      total: {\n                        type: 'number',\n                        example: pagination.total,\n                      },\n                      prev: {\n                        type: 'string',\n                        example: `${API_PATH + path}?page=${pagination.page - 1}`,\n                        description:\n                          '이전 페이지가 없을 시 prev는 응답에 포함되지 않습니다.',\n                      },\n                      next: {\n                        type: 'string',\n                        example: `${API_PATH + path}?page=${pagination.page + 1}`,\n                        description:\n                          '다음 페이지가 없을 시 next는 응답에 포함되지 않습니다.',\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n          {\n            title: modelName,\n            properties: {\n              ok: {\n                type: 'boolean',\n                example: true,\n              },\n              status: {\n                type: 'number',\n                example: HttpStatus.OK,\n              },\n              path: {\n                type: 'string',\n                example: API_PATH + path,\n              },\n              payload: {\n                properties: {\n                  data: {\n                    type: 'array',\n                    items: {\n                      $ref: getSchemaPath(model),\n                    },\n                  },\n                  pagination: {\n                    required: ['page', 'total'],\n                    properties: {\n                      page: {\n                        type: 'number',\n                        example: pagination.page,\n                      },\n                      count: {\n                        type: 'number',\n                        example: pagination.count,\n                      },\n                      total: {\n                        type: 'number',\n                        example: pagination.total,\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        ],\n      },\n    }),\n    ApiExtraModels(model),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.with.case.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseWithCaseModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(\n  modelProps: {\n    [k: string]: {\n      [summary: string]: Model | Model[];\n    };\n  },\n  status: HttpStatus,\n  path: string,\n  method: string,\n) => {\n  const [modelName, models] = Object.entries(modelProps)[0];\n  const extraModels: Type[] = [];\n  const schema: SchemaObject = {\n    title: modelName,\n    oneOf: Object.entries(models).map(([summary, model]) => {\n      const isArray = Array.isArray(model);\n      const useModel = isArray ? model[0] : model;\n      const isClass = typeof useModel === 'function';\n\n      if (isClass) {\n        extraModels.push(useModel);\n        return {\n          title: summary,\n          type: 'object',\n          properties: {\n            ok: { type: 'boolean', example: [200, 201].includes(status) },\n            status: { type: 'number', example: status },\n            method: { type: 'string', example: method },\n            path: { type: 'string', example: API_PATH + path },\n            payload: isArray\n              ? {\n                  type: 'array',\n                  items: {\n                    $ref: getSchemaPath(useModel),\n                  },\n                }\n              : {\n                  type: 'object',\n                  $ref: getSchemaPath(useModel),\n                },\n            timestamp: { type: 'string', example: '2025-03-14 21:28:30.718' },\n          },\n        };\n      }\n      return {\n        title: summary,\n        type: 'object',\n        properties: {\n          ok: { type: 'boolean', example: [200, 201].includes(status) },\n          status: { type: 'number', example: status },\n          method: { type: 'string', example: method },\n          path: { type: 'string', example: API_PATH + path },\n          payload: isArray\n            ? {\n                type: 'array',\n                items: {\n                  properties: Object.fromEntries(\n                    Object.entries(useModel).map(([k, v]) => [\n                      k,\n                      {\n                        type: typeof v,\n                        value: v,\n                      },\n                    ]),\n                  ),\n                },\n              }\n            : {\n                type: 'object',\n                properties: Object.fromEntries(\n                  Object.entries(useModel).map(([k, v]) => [\n                    k,\n                    {\n                      type: typeof v,\n                      value: v,\n                    },\n                  ]),\n                ),\n              },\n          timestamp: { type: 'string', example: '2025-03-14 21:28:30.718' },\n        },\n      };\n    }),\n  };\n\n  const examples = Object.fromEntries(\n    Object.entries(models).map(([summary, model]) => [\n      summary,\n      {\n        summary,\n        value: {\n          ok: true,\n          status,\n          method,\n          path: API_PATH + path,\n          payload: model,\n          timestamp: '2025-03-14 21:28:30.718',\n        },\n      },\n    ]),\n  );\n\n  if (extraModels.length > 0) {\n    return applyDecorators(\n      ApiResponse({ schema, examples }),\n      ApiExtraModels(...extraModels),\n    );\n  }\n  return applyDecorators(ApiResponse({ schema, examples }));\n}\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/api.response.with.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ApiResponseWithModel\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 :  | object>(\n  modelProps: { [k: string]: Model },\n  { ok, status, method, path, message }: ResponseProperty,\n  options?: Omit,\n) => {\n  const [modelName, model] = Object.entries(modelProps)[0];\n  const isArray = Array.isArray(model);\n  const properties: Record = {};\n  properties.ok = { type: 'boolean', example: ok };\n  properties.status = { type: 'number', example: status };\n  properties.method = { type: 'string', example: method };\n  properties.path = { type: 'string', example: API_PATH + path };\n  properties.payload = {};\n  if (message) {\n    properties.message = { type: 'string', example: message };\n  }\n  properties.timestamp = { type: 'string', example: '2025-03-14 21:28:30.718' };\n\n  const pickModel = isArray ? model[0] : model;\n  const isClass =\n    pickModel.constructor.toString().startsWith('class') ||\n    pickModel.constructor.toString().match(/function (Function)/);\n\n  if (isClass) {\n    properties.payload = isArray\n      ? { type: 'array', items: { $ref: getSchemaPath(pickModel) } }\n      : {\n          $ref: getSchemaPath(pickModel),\n        };\n\n    return applyDecorators(\n      ApiResponse({\n        ...options,\n        status,\n        schema: { properties },\n      }),\n      ApiExtraModels(pickModel),\n    );\n  }\n\n  properties.payload = {\n    properties: isArray\n      ? Object.fromEntries(\n          Object.entries(model[0]).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        )\n      : Object.fromEntries(\n          Object.entries(model).map(([k, v]) => [\n            k,\n            {\n              type: typeof v,\n              example: v,\n            },\n          ]),\n        ),\n  };\n\n  return applyDecorators(\n    ApiResponse({\n      ...options,\n      status,\n      schema: {\n        title: modelName,\n        properties,\n      },\n    }),\n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/util/common.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        commonOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  version: VERSION,\n  port: PORT,\n  allowOrigins:\n    RUN_MODE === 'development'\n      ? ['localhost:8080']\n      : [\n          /* production host */\n        ],\n}\n                    \n                \n\n\n        \n    \n\n    src/util/typeorm.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDev\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : RUN_MODE === 'development'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTest\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : RUN_MODE === 'test'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeormOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  type: 'mariadb',\n  synchronize: isTest,\n  namingStrategy: new SnakeNamingStrategy(),\n  entities: [User, Restaurant, Reservation, Menu, ReservationMenu],\n  username: DB_USER,\n  password: DB_PASS,\n  host: DB_HOST,\n  port: DB_PORT,\n  database: DB_NAME,\n  logging: isTest || isDev ? ['query', 'error'] : ['error'],\n  migrations: [Migration1741439368275],\n  dropSchema: isTest,\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typeormSource\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : new DataSource(typeormOption)\n                    \n                \n\n\n        \n    \n\n    src/util/protocol.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Protocol\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : {\n  /* common error */\n  BadRequest: { errorCode: 1000, message: '잘못된 요청입니다.' }, // 400\n  UnAuthorized: { errorCode: 1001, message: '인증이 필요합니다.' }, // 401\n  Forbidden: { errorCode: 1002, message: '접근 권한이 없습니다.' }, // 403\n  NotFound: { errorCode: 1003, message: '리소스를 찾을 수 없습니다.' }, // 404\n  Conflict: { errorCode: 1004, message: '리소스가 중복됩니다.' }, // 409\n  ServerError: { errorCode: 1005, message: '서버에 문제가 발생했습니다.' }, // 500\n\n  /* auth error */\n  RequiredLogin: { errorCode: 2000, message: '로그인이 필요합니다.' }, // 401\n  NoMatchRoles: { errorCode: 2001, message: '사용자 권한이 없습니다.' }, // 401\n  CookieWrongType: { errorCode: 2002, message: '잘못된 쿠키 정보입니다.' }, // 400\n  JwtWrongSignature: { errorCode: 2003, message: '잘못된 서명입니다.' }, // 401\n  JwtExpired: { errorCode: 2004, message: '토큰이 만료되었습니다.' }, // 401\n  JwtMalFormed: { errorCode: 2005, message: '잘못된 토큰 형태입니다.' }, // 401\n  JwtCreate: { errorCode: 2006, message: '토큰 발급에 문제가 발생했습니다.' }, // 400\n  JwtServerException: {\n    errorCode: 2007,\n    message: '토큰 인증에 문제가 발생했습니다.',\n  }, // 401\n  NoRefreshCookie: {\n    errorCode: 2008,\n    message: '잘못된 접근입니다.',\n  }, // 401\n  NoMatchUser: {\n    errorCode: 2009,\n    message: '사용자 정보를 찾지 못했습니다.',\n  }, // 404\n  WrongLoginData: {\n    errorCode: 2010,\n    message: '입력 정보를 다시 확인해주세요.',\n  }, // 400\n\n  /* guard, controller */\n  ArgsRequired: {\n    errorCode: 3000,\n    message: '데이터를 확인해주세요.',\n  }, // 400\n  WrongParamType: {\n    errorCode: 3001,\n    message: '파라미터를 확인해주세요.',\n  }, // 400\n  NoMatchOwnRestaurant: {\n    errorCode: 3002,\n    message: '해당 식당의 점주만 이용 가능합니다.',\n  }, // 400\n\n  /* type check */\n  MustPositive: {\n    errorCode: 4000,\n    message: '음수 값은 허용되지 않습니다.',\n  },\n  NotAllowedPastTime: {\n    errorCode: 4001,\n    message: '현재 시간보다 과거 시간을 설정 할 수 없습니다.',\n  },\n  InvalidTimeRange: {\n    errorCode: 4002,\n    message: '종료시간이 시작 시간보다 과거일 수 없습니다.',\n  },\n  PageOver: {\n    errorCode: 4003,\n    message: '페이지 범위를 벗어났습니다.',\n  },\n  TypeCheck: {\n    errorCode: 4004,\n    message: '타입이 맞지 않습니다.',\n  },\n} as const\n                    \n                \n\n\n        \n    \n\n    src/middleware/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : (args: UserRole[] = []) => {\n  return applyDecorators(SetMetadata('roles', args), UseGuards(RoleGuard));\n}\n                    \n                \n\n\n        \n    \n\n    src/util/secret.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        secretOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  password: SECRET_HASH_PASSWORD,\n  accessToken: SECRET_ACCESS_TOKEN,\n  refreshToken: SECRET_REFRESH_TOKEN,\n}\n                    \n                \n\n\n        \n    \n\n    src/util/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        swaggerOption\n                        \n                    \n                \n            \n                \n                    \n                        타입 :         object\n\n                    \n                \n                \n                    \n                        기본 값 : {\n  serverUrl: SWAGGER_URL,\n}\n                    \n                \n\n\n        \n    \n\n    src/util/enums/UserRole.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserRole\n                        \n                    \n                \n            \n                \n                    \n                        기본 값 : {\n  Customer: 1, // 고객\n  Shopkeeper: 2, // 식당 주인\n} as const\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         개의 결과가 일치했습니다 \"\"\n        \n    \n    \n        검색 결과가 없습니다 \"\"\n    \n\n"}}
}
